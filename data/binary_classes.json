{"func_code_string":"public static HtmlPage toHtmlPage(String string) {\n        try {\n            URL url = new URL(\"http:\/\/bitvunit.codescape.de\/some_page.html\");\n            return HTMLParser.parseHtml(new StringWebResponse(string, url), new WebClient().getCurrentWindow());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error creating HtmlPage from String.\", e);\n        }\n    }","func_code_tokens":["public","static","HtmlPage","toHtmlPage","(","String","string",")","{","try","{","URL","url","=","new","URL","(","\"http:\/\/bitvunit.codescape.de\/some_page.html\"",")",";","return","HTMLParser",".","parseHtml","(","new","StringWebResponse","(","string",",","url",")",",","new","WebClient","(",")",".","getCurrentWindow","(",")",")",";","}","catch","(","IOException","e",")","{","throw","new","RuntimeException","(","\"Error creating HtmlPage from String.\"",",","e",")",";","}","}"],"func_documentation_string":"Creates a {@link HtmlPage} from a given {@link String} that contains the HTML code for that page.\n\n@param string {@link String} that contains the HTML code\n@return {@link HtmlPage} for this {@link String}","func_documentation_tokens":["Creates","a","{","@link","HtmlPage","}","from","a","given","{","@link","String","}","that","contains","the","HTML","code","for","that","page","."],"label":1,"text":"Creates a {@link HtmlPage} from a given {@link String} that contains the HTML code for that page.\n\n@param string {@link String} that contains the HTML code\n@return {@link HtmlPage} for this {@link String}[SEP]public static HtmlPage toHtmlPage(String string) {\n        try {\n            URL url = new URL(\"http:\/\/bitvunit.codescape.de\/some_page.html\");\n            return HTMLParser.parseHtml(new StringWebResponse(string, url), new WebClient().getCurrentWindow());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error creating HtmlPage from String.\", e);\n        }\n    }"}
{"func_code_string":"public static HtmlPage toHtmlPage(WebDriver webDriver) {\n        try {\n            return HTMLParser.parseHtml(\n                    new StringWebResponse(webDriver.getPageSource(), new URL(webDriver.getCurrentUrl())),\n                    new WebClient().getCurrentWindow()\n            );\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error creating HtmlPage from WebDriver.\", e);\n        }\n    }","func_code_tokens":["public","static","HtmlPage","toHtmlPage","(","WebDriver","webDriver",")","{","try","{","return","HTMLParser",".","parseHtml","(","new","StringWebResponse","(","webDriver",".","getPageSource","(",")",",","new","URL","(","webDriver",".","getCurrentUrl","(",")",")",")",",","new","WebClient","(",")",".","getCurrentWindow","(",")",")",";","}","catch","(","IOException","e",")","{","throw","new","RuntimeException","(","\"Error creating HtmlPage from WebDriver.\"",",","e",")",";","}","}"],"func_documentation_string":"Create a {@link HtmlPage} from a given {@link WebDriver} that has been navigated to a HTML page.\n\n@param webDriver {@link WebDriver} that has been navigated to a HTML page\n@return {@link HtmlPage} for the {@link WebDriver}","func_documentation_tokens":["Create","a","{","@link","HtmlPage","}","from","a","given","{","@link","WebDriver","}","that","has","been","navigated","to","a","HTML","page","."],"label":1,"text":"Create a {@link HtmlPage} from a given {@link WebDriver} that has been navigated to a HTML page.\n\n@param webDriver {@link WebDriver} that has been navigated to a HTML page\n@return {@link HtmlPage} for the {@link WebDriver}[SEP]public static HtmlPage toHtmlPage(WebDriver webDriver) {\n        try {\n            return HTMLParser.parseHtml(\n                    new StringWebResponse(webDriver.getPageSource(), new URL(webDriver.getCurrentUrl())),\n                    new WebClient().getCurrentWindow()\n            );\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error creating HtmlPage from WebDriver.\", e);\n        }\n    }"}
{"func_code_string":"public static String reverse(String string) {\n\t\tif(string != null) {\n\t\t\treturn new StringBuilder(string).reverse().toString();\n\t\t}\n\t\treturn null;\n\t}","func_code_tokens":["public","static","String","reverse","(","String","string",")","{","if","(","string","!=","null",")","{","return","new","StringBuilder","(","string",")",".","reverse","(",")",".","toString","(",")",";","}","return","null",";","}"],"func_documentation_string":"Reverses the input string.\n\n@param string\nthe string to be reversed.\n@return\nthe reversed string.","func_documentation_tokens":["Reverses","the","input","string","."],"label":1,"text":"Reverses the input string.\n\n@param string\nthe string to be reversed.\n@return\nthe reversed string.[SEP]public static String reverse(String string) {\n\t\tif(string != null) {\n\t\t\treturn new StringBuilder(string).reverse().toString();\n\t\t}\n\t\treturn null;\n\t}"}
{"func_code_string":"public HtmlElement findHtmlElementById(String elementId) {\n        try {\n            return htmlPage.getHtmlElementById(elementId);\n        } catch (ElementNotFoundException e) {\n            return null;\n        }\n    }","func_code_tokens":["public","HtmlElement","findHtmlElementById","(","String","elementId",")","{","try","{","return","htmlPage",".","getHtmlElementById","(","elementId",")",";","}","catch","(","ElementNotFoundException","e",")","{","return","null",";","}","}"],"func_documentation_string":"Returns the {@link HtmlElement} with the given id.\n\n@param elementId id to search for on the HTML page\n@return {@link HtmlElement} with the given id","func_documentation_tokens":["Returns","the","{","@link","HtmlElement","}","with","the","given","id","."],"label":1,"text":"Returns the {@link HtmlElement} with the given id.\n\n@param elementId id to search for on the HTML page\n@return {@link HtmlElement} with the given id[SEP]public HtmlElement findHtmlElementById(String elementId) {\n        try {\n            return htmlPage.getHtmlElementById(elementId);\n        } catch (ElementNotFoundException e) {\n            return null;\n        }\n    }"}
{"func_code_string":"@NonNull\n    public static String getNowDateTime(@NonNull String format) {\n        SimpleDateFormat formatter = new SimpleDateFormat(format, Locale.ENGLISH);\n        Date curDate = new Date(System.currentTimeMillis());\n        return formatter.format(curDate);\n    }","func_code_tokens":["@","NonNull","public","static","String","getNowDateTime","(","@","NonNull","String","format",")","{","SimpleDateFormat","formatter","=","new","SimpleDateFormat","(","format",",","Locale",".","ENGLISH",")",";","Date","curDate","=","new","Date","(","System",".","currentTimeMillis","(",")",")",";","return","formatter",".","format","(","curDate",")",";","}"],"func_documentation_string":"Format the current time in the specified format.\n\n@return the time string.","func_documentation_tokens":["Format","the","current","time","in","the","specified","format","."],"label":1,"text":"Format the current time in the specified format.\n\n@return the time string.[SEP]@NonNull\n    public static String getNowDateTime(@NonNull String format) {\n        SimpleDateFormat formatter = new SimpleDateFormat(format, Locale.ENGLISH);\n        Date curDate = new Date(System.currentTimeMillis());\n        return formatter.format(curDate);\n    }"}
{"func_code_string":"private static long toJavaSecs(long secs) {\n    \/\/ postgres epoc to java epoc\n    secs += 946684800L;\n\n    \/\/ Julian\/Gregorian calendar cutoff point\n    if (secs < -12219292800L) { \/\/ October 4, 1582 -> October 15, 1582\n      secs += 86400 * 10;\n      if (secs < -14825808000L) { \/\/ 1500-02-28 -> 1500-03-01\n        int extraLeaps = (int) ((secs + 14825808000L) \/ 3155760000L);\n        extraLeaps--;\n        extraLeaps -= extraLeaps \/ 4;\n        secs += extraLeaps * 86400L;\n      }\n    }\n    return secs;\n  }","func_code_tokens":["private","static","long","toJavaSecs","(","long","secs",")","{","\/\/ postgres epoc to java epoc","secs","+=","946684800L",";","\/\/ Julian\/Gregorian calendar cutoff point","if","(","secs","<","-","12219292800L",")","{","\/\/ October 4, 1582 -> October 15, 1582","secs","+=","86400","*","10",";","if","(","secs","<","-","14825808000L",")","{","\/\/ 1500-02-28 -> 1500-03-01","int","extraLeaps","=","(","int",")","(","(","secs","+","14825808000L",")","\/","3155760000L",")",";","extraLeaps","--",";","extraLeaps","-=","extraLeaps","\/","4",";","secs","+=","extraLeaps","*","86400L",";","}","}","return","secs",";","}"],"func_documentation_string":"Converts the given postgresql seconds to java seconds. Reverse engineered by inserting varying\ndates to postgresql and tuning the formula until the java dates matched. See {@link #toPgSecs}\nfor the reverse operation.\n\n@param secs Postgresql seconds.\n@return Java seconds.","func_documentation_tokens":["Converts","the","given","postgresql","seconds","to","java","seconds",".","Reverse","engineered","by","inserting","varying","dates","to","postgresql","and","tuning","the","formula","until","the","java","dates","matched",".","See","{","@link","#toPgSecs","}","for","the","reverse","operation","."],"label":0,"text":"Converts the given postgresql seconds to java seconds. Reverse engineered by inserting varying\ndates to postgresql and tuning the formula until the java dates matched. See {@link #toPgSecs}\nfor the reverse operation.\n\n@param secs Postgresql seconds.\n@return Java seconds.[SEP]private static long toJavaSecs(long secs) {\n    \/\/ postgres epoc to java epoc\n    secs += 946684800L;\n\n    \/\/ Julian\/Gregorian calendar cutoff point\n    if (secs < -12219292800L) { \/\/ October 4, 1582 -> October 15, 1582\n      secs += 86400 * 10;\n      if (secs < -14825808000L) { \/\/ 1500-02-28 -> 1500-03-01\n        int extraLeaps = (int) ((secs + 14825808000L) \/ 3155760000L);\n        extraLeaps--;\n        extraLeaps -= extraLeaps \/ 4;\n        secs += extraLeaps * 86400L;\n      }\n    }\n    return secs;\n  }"}
{"func_code_string":"private static long toPgSecs(long secs) {\n    \/\/ java epoc to postgres epoc\n    secs -= 946684800L;\n\n    \/\/ Julian\/Greagorian calendar cutoff point\n    if (secs < -13165977600L) { \/\/ October 15, 1582 -> October 4, 1582\n      secs -= 86400 * 10;\n      if (secs < -15773356800L) { \/\/ 1500-03-01 -> 1500-02-28\n        int years = (int) ((secs + 15773356800L) \/ -3155823050L);\n        years++;\n        years -= years \/ 4;\n        secs += years * 86400;\n      }\n    }\n\n    return secs;\n  }","func_code_tokens":["private","static","long","toPgSecs","(","long","secs",")","{","\/\/ java epoc to postgres epoc","secs","-=","946684800L",";","\/\/ Julian\/Greagorian calendar cutoff point","if","(","secs","<","-","13165977600L",")","{","\/\/ October 15, 1582 -> October 4, 1582","secs","-=","86400","*","10",";","if","(","secs","<","-","15773356800L",")","{","\/\/ 1500-03-01 -> 1500-02-28","int","years","=","(","int",")","(","(","secs","+","15773356800L",")","\/","-","3155823050L",")",";","years","++",";","years","-=","years","\/","4",";","secs","+=","years","*","86400",";","}","}","return","secs",";","}"],"func_documentation_string":"Converts the given java seconds to postgresql seconds. See {@link #toJavaSecs} for the reverse\noperation. The conversion is valid for any year 100 BC onwards.\n\n@param secs Postgresql seconds.\n@return Java seconds.","func_documentation_tokens":["Converts","the","given","java","seconds","to","postgresql","seconds",".","See","{","@link","#toJavaSecs","}","for","the","reverse","operation",".","The","conversion","is","valid","for","any","year","100","BC","onwards","."],"label":0,"text":"Converts the given java seconds to postgresql seconds. See {@link #toJavaSecs} for the reverse\noperation. The conversion is valid for any year 100 BC onwards.\n\n@param secs Postgresql seconds.\n@return Java seconds.[SEP]private static long toPgSecs(long secs) {\n    \/\/ java epoc to postgres epoc\n    secs -= 946684800L;\n\n    \/\/ Julian\/Greagorian calendar cutoff point\n    if (secs < -13165977600L) { \/\/ October 15, 1582 -> October 4, 1582\n      secs -= 86400 * 10;\n      if (secs < -15773356800L) { \/\/ 1500-03-01 -> 1500-02-28\n        int years = (int) ((secs + 15773356800L) \/ -3155823050L);\n        years++;\n        years -= years \/ 4;\n        secs += years * 86400;\n      }\n    }\n\n    return secs;\n  }"}
{"func_code_string":"public String posSubst(String s, String[] subs, int behavior) {\n        Matcher matcher = posPattern.matcher(s);\n        int previousEnd = 0;\n        StringBuffer sb = new StringBuffer();\n        String varValue;\n        int varIndex;\n        String condlVal;  \/\/ Conditional : value\n        while (matcher.find()) {\n            varIndex = Integer.parseInt(matcher.group(1)) - 1;\n            condlVal = ((matcher.groupCount() > 1) ? matcher.group(2) : null);\n            varValue = ((varIndex < subs.length) ? subs[varIndex] : null);\n            if (condlVal != null) {\n                \/\/ Replace varValue (the value to be substituted), with\n                \/\/ the post-:+ portion of the expression.\n                varValue = ((varValue == null)\n                        ? \"\"\n                        : condlVal.replaceAll(\"\\\\Q%\" + (varIndex+1) + \"\\\\E\\\\b\",\n                                RefCapablePropertyResourceBundle.literalize(\n                                        varValue)));\n            }\n            \/\/ System.err.println(\"Behavior: \" + behavior);\n            if (varValue == null) switch (behavior) {\n                case THROW_BEHAVIOR:\n                    throw new RuntimeException(\n                            Integer.toString(subs.length)\n                            + \" positional values given, but property string \"\n                            + \"contains (\" + matcher.group() + \").\");\n                case EMPTYSTRING_BEHAVIOR:\n                    varValue = \"\";\n                case NOOP_BEHAVIOR:\n                    break;\n                default:\n                    throw new RuntimeException(\n                            \"Undefined value for behavior: \" + behavior);\n            }\n            sb.append(s.substring(previousEnd, matcher.start())\n                        + ((varValue == null) ? matcher.group() : varValue));\n            previousEnd = matcher.end();\n        }\n        return (previousEnd < 1) ? s\n                                 : (sb.toString() + s.substring(previousEnd));\n    }","func_code_tokens":["public","String","posSubst","(","String","s",",","String","[","]","subs",",","int","behavior",")","{","Matcher","matcher","=","posPattern",".","matcher","(","s",")",";","int","previousEnd","=","0",";","StringBuffer","sb","=","new","StringBuffer","(",")",";","String","varValue",";","int","varIndex",";","String","condlVal",";","\/\/ Conditional : value","while","(","matcher",".","find","(",")",")","{","varIndex","=","Integer",".","parseInt","(","matcher",".","group","(","1",")",")","-","1",";","condlVal","=","(","(","matcher",".","groupCount","(",")",">","1",")","?","matcher",".","group","(","2",")",":","null",")",";","varValue","=","(","(","varIndex","<","subs",".","length",")","?","subs","[","varIndex","]",":","null",")",";","if","(","condlVal","!=","null",")","{","\/\/ Replace varValue (the value to be substituted), with","\/\/ the post-:+ portion of the expression.","varValue","=","(","(","varValue","==","null",")","?","\"\"",":","condlVal",".","replaceAll","(","\"\\\\Q%\"","+","(","varIndex","+","1",")","+","\"\\\\E\\\\b\"",",","RefCapablePropertyResourceBundle",".","literalize","(","varValue",")",")",")",";","}","\/\/ System.err.println(\"Behavior: \" + behavior);","if","(","varValue","==","null",")","switch","(","behavior",")","{","case","THROW_BEHAVIOR",":","throw","new","RuntimeException","(","Integer",".","toString","(","subs",".","length",")","+","\" positional values given, but property string \"","+","\"contains (\"","+","matcher",".","group","(",")","+","\").\"",")",";","case","EMPTYSTRING_BEHAVIOR",":","varValue","=","\"\"",";","case","NOOP_BEHAVIOR",":","break",";","default",":","throw","new","RuntimeException","(","\"Undefined value for behavior: \"","+","behavior",")",";","}","sb",".","append","(","s",".","substring","(","previousEnd",",","matcher",".","start","(",")",")","+","(","(","varValue","==","null",")","?","matcher",".","group","(",")",":","varValue",")",")",";","previousEnd","=","matcher",".","end","(",")",";","}","return","(","previousEnd","<","1",")","?","s",":","(","sb",".","toString","(",")","+","s",".","substring","(","previousEnd",")",")",";","}"],"func_documentation_string":"Replaces positional substitution patterns of the form %{\\d} with\ncorresponding element of the given subs array.\nNote that %{\\d} numbers are 1-based, so we lok for subs[x-1].","func_documentation_tokens":["Replaces","positional","substitution","patterns","of","the","form","%","{","\\","d","}","with","corresponding","element","of","the","given","subs","array",".","Note","that","%","{","\\","d","}","numbers","are","1","-","based","so","we","lok","for","subs","[","x","-","1","]","."],"label":0,"text":"Replaces positional substitution patterns of the form %{\\d} with\ncorresponding element of the given subs array.\nNote that %{\\d} numbers are 1-based, so we lok for subs[x-1].[SEP]public String posSubst(String s, String[] subs, int behavior) {\n        Matcher matcher = posPattern.matcher(s);\n        int previousEnd = 0;\n        StringBuffer sb = new StringBuffer();\n        String varValue;\n        int varIndex;\n        String condlVal;  \/\/ Conditional : value\n        while (matcher.find()) {\n            varIndex = Integer.parseInt(matcher.group(1)) - 1;\n            condlVal = ((matcher.groupCount() > 1) ? matcher.group(2) : null);\n            varValue = ((varIndex < subs.length) ? subs[varIndex] : null);\n            if (condlVal != null) {\n                \/\/ Replace varValue (the value to be substituted), with\n                \/\/ the post-:+ portion of the expression.\n                varValue = ((varValue == null)\n                        ? \"\"\n                        : condlVal.replaceAll(\"\\\\Q%\" + (varIndex+1) + \"\\\\E\\\\b\",\n                                RefCapablePropertyResourceBundle.literalize(\n                                        varValue)));\n            }\n            \/\/ System.err.println(\"Behavior: \" + behavior);\n            if (varValue == null) switch (behavior) {\n                case THROW_BEHAVIOR:\n                    throw new RuntimeException(\n                            Integer.toString(subs.length)\n                            + \" positional values given, but property string \"\n                            + \"contains (\" + matcher.group() + \").\");\n                case EMPTYSTRING_BEHAVIOR:\n                    varValue = \"\";\n                case NOOP_BEHAVIOR:\n                    break;\n                default:\n                    throw new RuntimeException(\n                            \"Undefined value for behavior: \" + behavior);\n            }\n            sb.append(s.substring(previousEnd, matcher.start())\n                        + ((varValue == null) ? matcher.group() : varValue));\n            previousEnd = matcher.end();\n        }\n        return (previousEnd < 1) ? s\n                                 : (sb.toString() + s.substring(previousEnd));\n    }"}
{"func_code_string":"private BufferedImage to16Bit1ComponentGrayScale(int[][] decoded, int precision, int width, int height) {\n        BufferedImage image;\n        if (precision == 16) {\n            image = new BufferedImage(width, height, BufferedImage.TYPE_USHORT_GRAY);\n        }\n        else {\n            ColorModel colorModel = new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY), new int[] {precision}, false, false, Transparency.OPAQUE, DataBuffer.TYPE_USHORT);\n            image = new BufferedImage(colorModel, colorModel.createCompatibleWritableRaster(width, height), colorModel.isAlphaPremultiplied(), null);\n        }\n\n        short[] imageBuffer = ((DataBufferUShort) image.getRaster().getDataBuffer()).getData();\n\n        for (int i = 0; i < imageBuffer.length; i++) {\n            imageBuffer[i] = (short) decoded[0][i];\n        }\n\n        return image;\n    }","func_code_tokens":["private","BufferedImage","to16Bit1ComponentGrayScale","(","int","[","]","[","]","decoded",",","int","precision",",","int","width",",","int","height",")","{","BufferedImage","image",";","if","(","precision","==","16",")","{","image","=","new","BufferedImage","(","width",",","height",",","BufferedImage",".","TYPE_USHORT_GRAY",")",";","}","else","{","ColorModel","colorModel","=","new","ComponentColorModel","(","ColorSpace",".","getInstance","(","ColorSpace",".","CS_GRAY",")",",","new","int","[","]","{","precision","}",",","false",",","false",",","Transparency",".","OPAQUE",",","DataBuffer",".","TYPE_USHORT",")",";","image","=","new","BufferedImage","(","colorModel",",","colorModel",".","createCompatibleWritableRaster","(","width",",","height",")",",","colorModel",".","isAlphaPremultiplied","(",")",",","null",")",";","}","short","[","]","imageBuffer","=","(","(","DataBufferUShort",")","image",".","getRaster","(",")",".","getDataBuffer","(",")",")",".","getData","(",")",";","for","(","int","i","=","0",";","i","<","imageBuffer",".","length",";","i","++",")","{","imageBuffer","[","i","]","=","(","short",")","decoded","[","0","]","[","i","]",";","}","return","image",";","}"],"func_documentation_string":"Converts the decoded buffer into a BufferedImage.\nprecision: 16 bit, componentCount = 1\n\n@param decoded data buffer\n@param precision\n@param width   of the image\n@param height  of the image   @return a BufferedImage.TYPE_USHORT_GRAY","func_documentation_tokens":["Converts","the","decoded","buffer","into","a","BufferedImage",".","precision",":","16","bit","componentCount","=","1"],"label":0,"text":"Converts the decoded buffer into a BufferedImage.\nprecision: 16 bit, componentCount = 1\n\n@param decoded data buffer\n@param precision\n@param width   of the image\n@param height  of the image   @return a BufferedImage.TYPE_USHORT_GRAY[SEP]private BufferedImage to16Bit1ComponentGrayScale(int[][] decoded, int precision, int width, int height) {\n        BufferedImage image;\n        if (precision == 16) {\n            image = new BufferedImage(width, height, BufferedImage.TYPE_USHORT_GRAY);\n        }\n        else {\n            ColorModel colorModel = new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY), new int[] {precision}, false, false, Transparency.OPAQUE, DataBuffer.TYPE_USHORT);\n            image = new BufferedImage(colorModel, colorModel.createCompatibleWritableRaster(width, height), colorModel.isAlphaPremultiplied(), null);\n        }\n\n        short[] imageBuffer = ((DataBufferUShort) image.getRaster().getDataBuffer()).getData();\n\n        for (int i = 0; i < imageBuffer.length; i++) {\n            imageBuffer[i] = (short) decoded[0][i];\n        }\n\n        return image;\n    }"}
{"func_code_string":"private ByteBuffer recv(int attempt)\n          throws IOException, SocketException, SocketTimeoutException {\n    int timeout = UDP_BASE_TIMEOUT_SECONDS * (int) Math.pow(2, attempt);\n    logger.trace(\"Setting receive timeout to {}s for attempt {}...\",\n            timeout, attempt);\n    this.socket.setSoTimeout(timeout * 1000);\n\n    try {\n      DatagramPacket p = new DatagramPacket(\n              new byte[UDP_PACKET_LENGTH],\n              UDP_PACKET_LENGTH);\n      this.socket.receive(p);\n      return ByteBuffer.wrap(p.getData(), 0, p.getLength());\n    } catch (SocketTimeoutException ste) {\n      throw ste;\n    }\n  }","func_code_tokens":["private","ByteBuffer","recv","(","int","attempt",")","throws","IOException",",","SocketException",",","SocketTimeoutException","{","int","timeout","=","UDP_BASE_TIMEOUT_SECONDS","*","(","int",")","Math",".","pow","(","2",",","attempt",")",";","logger",".","trace","(","\"Setting receive timeout to {}s for attempt {}...\"",",","timeout",",","attempt",")",";","this",".","socket",".","setSoTimeout","(","timeout","*","1000",")",";","try","{","DatagramPacket","p","=","new","DatagramPacket","(","new","byte","[","UDP_PACKET_LENGTH","]",",","UDP_PACKET_LENGTH",")",";","this",".","socket",".","receive","(","p",")",";","return","ByteBuffer",".","wrap","(","p",".","getData","(",")",",","0",",","p",".","getLength","(",")",")",";","}","catch","(","SocketTimeoutException","ste",")","{","throw","ste",";","}","}"],"func_documentation_string":"Receive a UDP packet from the tracker.\n\n@param attempt The attempt number, used to calculate the timeout for the\nreceive operation.\n@retun Returns a {@link ByteBuffer} containing the packet data.","func_documentation_tokens":["Receive","a","UDP","packet","from","the","tracker","."],"label":1,"text":"Receive a UDP packet from the tracker.\n\n@param attempt The attempt number, used to calculate the timeout for the\nreceive operation.\n@retun Returns a {@link ByteBuffer} containing the packet data.[SEP]private ByteBuffer recv(int attempt)\n          throws IOException, SocketException, SocketTimeoutException {\n    int timeout = UDP_BASE_TIMEOUT_SECONDS * (int) Math.pow(2, attempt);\n    logger.trace(\"Setting receive timeout to {}s for attempt {}...\",\n            timeout, attempt);\n    this.socket.setSoTimeout(timeout * 1000);\n\n    try {\n      DatagramPacket p = new DatagramPacket(\n              new byte[UDP_PACKET_LENGTH],\n              UDP_PACKET_LENGTH);\n      this.socket.receive(p);\n      return ByteBuffer.wrap(p.getData(), 0, p.getLength());\n    } catch (SocketTimeoutException ste) {\n      throw ste;\n    }\n  }"}
{"func_code_string":"private byte[] recv(Socket socket, int flags)\n    {\n        Utils.checkArgument(socket != null, \"socket parameter must not be null\");\n        data = socket.recv(flags);\n        more = socket.hasReceiveMore();\n        return data;\n    }","func_code_tokens":["private","byte","[","]","recv","(","Socket","socket",",","int","flags",")","{","Utils",".","checkArgument","(","socket","!=","null",",","\"socket parameter must not be null\"",")",";","data","=","socket",".","recv","(","flags",")",";","more","=","socket",".","hasReceiveMore","(",")",";","return","data",";","}"],"func_documentation_string":"Internal method to call recv on the socket.\nDoes not trap any ZMQExceptions but expects caling routine to handle them.\n@param socket\n0MQ socket to read from\n@return\nbyte[] data","func_documentation_tokens":["Internal","method","to","call","recv","on","the","socket",".","Does","not","trap","any","ZMQExceptions","but","expects","caling","routine","to","handle","them","."],"label":1,"text":"Internal method to call recv on the socket.\nDoes not trap any ZMQExceptions but expects caling routine to handle them.\n@param socket\n0MQ socket to read from\n@return\nbyte[] data[SEP]private byte[] recv(Socket socket, int flags)\n    {\n        Utils.checkArgument(socket != null, \"socket parameter must not be null\");\n        data = socket.recv(flags);\n        more = socket.hasReceiveMore();\n        return data;\n    }"}
{"func_code_string":"public static <T> T median(List<? extends T> data, Comparator<? super T> comparator) {\n    return median(data, comparator, 0, data.size());\n  }","func_code_tokens":["public","static","<","T",">","T","median","(","List","<","?","extends","T",">","data",",","Comparator","<","?","super","T",">","comparator",")","{","return","median","(","data",",","comparator",",","0",",","data",".","size","(",")",")",";","}"],"func_documentation_string":"Compute the median of an array efficiently using the QuickSelect method.\n\nNote: the array is <b>modified<\/b> by this.\n\n@param <T> object type\n@param data Data to process\n@param comparator Comparator to use\n@return Median value","func_documentation_tokens":["Compute","the","median","of","an","array","efficiently","using","the","QuickSelect","method","."],"label":1,"text":"Compute the median of an array efficiently using the QuickSelect method.\n\nNote: the array is <b>modified<\/b> by this.\n\n@param <T> object type\n@param data Data to process\n@param comparator Comparator to use\n@return Median value[SEP]public static <T> T median(List<? extends T> data, Comparator<? super T> comparator) {\n    return median(data, comparator, 0, data.size());\n  }"}
{"func_code_string":"public static <V extends NumberVector> double logLikelihoodZhao(Relation<V> relation, Clustering<? extends MeanModel> clustering, NumberVectorDistanceFunction<? super V> distanceFunction) {\n    List<? extends Cluster<? extends MeanModel>> clusters = clustering.getAllClusters();\n    \/\/ number of clusters\n    final int m = clusters.size();\n\n    \/\/ number of objects in the clustering\n    int n = 0;\n    \/\/ cluster sizes\n    int[] n_i = new int[m];\n    \/\/ variances\n    double[] d_i = new double[m];\n\n    \/\/ Iterate over clusters:\n    Iterator<? extends Cluster<? extends MeanModel>> it = clusters.iterator();\n    for(int i = 0; it.hasNext(); ++i) {\n      Cluster<? extends MeanModel> cluster = it.next();\n      n += n_i[i] = cluster.size();\n      \/\/ Note: the paper used 1\/(n-m) but that is probably a typo\n      \/\/ as it will cause divisions by zero.\n      d_i[i] = varianceOfCluster(cluster, distanceFunction, relation) \/ (double) n_i[i];\n    }\n\n    final int dim = RelationUtil.dimensionality(relation);\n\n    \/\/ log likelihood of this clustering\n    double logLikelihood = 0.;\n    \/\/ Aggregate\n    for(int i = 0; i < m; i++) {\n      logLikelihood += n_i[i] * FastMath.log(n_i[i] \/ (double) n) \/\/ ni log ni\/n\n          - n_i[i] * dim * .5 * MathUtil.LOGTWOPI \/\/ ni*d\/2 log2pi\n          - n_i[i] * .5 * FastMath.log(d_i[i]) \/\/ ni\/2 log sigma_i\n          - (n_i[i] - m) * .5; \/\/ (ni-m)\/2\n    }\n    return logLikelihood;\n  }","func_code_tokens":["public","static","<","V","extends","NumberVector",">","double","logLikelihoodZhao","(","Relation","<","V",">","relation",",","Clustering","<","?","extends","MeanModel",">","clustering",",","NumberVectorDistanceFunction","<","?","super","V",">","distanceFunction",")","{","List","<","?","extends","Cluster","<","?","extends","MeanModel",">",">","clusters","=","clustering",".","getAllClusters","(",")",";","\/\/ number of clusters","final","int","m","=","clusters",".","size","(",")",";","\/\/ number of objects in the clustering","int","n","=","0",";","\/\/ cluster sizes","int","[","]","n_i","=","new","int","[","m","]",";","\/\/ variances","double","[","]","d_i","=","new","double","[","m","]",";","\/\/ Iterate over clusters:","Iterator","<","?","extends","Cluster","<","?","extends","MeanModel",">",">","it","=","clusters",".","iterator","(",")",";","for","(","int","i","=","0",";","it",".","hasNext","(",")",";","++","i",")","{","Cluster","<","?","extends","MeanModel",">","cluster","=","it",".","next","(",")",";","n","+=","n_i","[","i","]","=","cluster",".","size","(",")",";","\/\/ Note: the paper used 1\/(n-m) but that is probably a typo","\/\/ as it will cause divisions by zero.","d_i","[","i","]","=","varianceOfCluster","(","cluster",",","distanceFunction",",","relation",")","\/","(","double",")","n_i","[","i","]",";","}","final","int","dim","=","RelationUtil",".","dimensionality","(","relation",")",";","\/\/ log likelihood of this clustering","double","logLikelihood","=","0.",";","\/\/ Aggregate","for","(","int","i","=","0",";","i","<","m",";","i","++",")","{","logLikelihood","+=","n_i","[","i","]","*","FastMath",".","log","(","n_i","[","i","]","\/","(","double",")","n",")","\/\/ ni log ni\/n","-","n_i","[","i","]","*","dim","*",".5","*","MathUtil",".","LOGTWOPI","\/\/ ni*d\/2 log2pi","-","n_i","[","i","]","*",".5","*","FastMath",".","log","(","d_i","[","i","]",")","\/\/ ni\/2 log sigma_i","-","(","n_i","[","i","]","-","m",")","*",".5",";","\/\/ (ni-m)\/2","}","return","logLikelihood",";","}"],"func_documentation_string":"Computes log likelihood of an entire clustering.\n<p>\nVersion as used by Zhao et al.\n\n@param relation Data relation\n@param clustering Clustering\n@param distanceFunction Distance function\n@param <V> Vector type\n@return Log Likelihood.","func_documentation_tokens":["Computes","log","likelihood","of","an","entire","clustering",".","<p",">","Version","as","used","by","Zhao","et","al","."],"label":1,"text":"Computes log likelihood of an entire clustering.\n<p>\nVersion as used by Zhao et al.\n\n@param relation Data relation\n@param clustering Clustering\n@param distanceFunction Distance function\n@param <V> Vector type\n@return Log Likelihood.[SEP]public static <V extends NumberVector> double logLikelihoodZhao(Relation<V> relation, Clustering<? extends MeanModel> clustering, NumberVectorDistanceFunction<? super V> distanceFunction) {\n    List<? extends Cluster<? extends MeanModel>> clusters = clustering.getAllClusters();\n    \/\/ number of clusters\n    final int m = clusters.size();\n\n    \/\/ number of objects in the clustering\n    int n = 0;\n    \/\/ cluster sizes\n    int[] n_i = new int[m];\n    \/\/ variances\n    double[] d_i = new double[m];\n\n    \/\/ Iterate over clusters:\n    Iterator<? extends Cluster<? extends MeanModel>> it = clusters.iterator();\n    for(int i = 0; it.hasNext(); ++i) {\n      Cluster<? extends MeanModel> cluster = it.next();\n      n += n_i[i] = cluster.size();\n      \/\/ Note: the paper used 1\/(n-m) but that is probably a typo\n      \/\/ as it will cause divisions by zero.\n      d_i[i] = varianceOfCluster(cluster, distanceFunction, relation) \/ (double) n_i[i];\n    }\n\n    final int dim = RelationUtil.dimensionality(relation);\n\n    \/\/ log likelihood of this clustering\n    double logLikelihood = 0.;\n    \/\/ Aggregate\n    for(int i = 0; i < m; i++) {\n      logLikelihood += n_i[i] * FastMath.log(n_i[i] \/ (double) n) \/\/ ni log ni\/n\n          - n_i[i] * dim * .5 * MathUtil.LOGTWOPI \/\/ ni*d\/2 log2pi\n          - n_i[i] * .5 * FastMath.log(d_i[i]) \/\/ ni\/2 log sigma_i\n          - (n_i[i] - m) * .5; \/\/ (ni-m)\/2\n    }\n    return logLikelihood;\n  }"}
{"func_code_string":"@Override\n  public Clustering<MeanModel> run(Database database, Relation<V> relation) {\n    \/\/ Database objects to process\n    final DBIDs ids = relation.getDBIDs();\n    \/\/ Choose initial means\n    double[][] means = initializer.chooseInitialMeans(database, relation, k, getDistanceFunction());\n    \/\/ Setup cluster assignment store\n    List<ModifiableDBIDs> clusters = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n      clusters.add(DBIDUtil.newHashSet(relation.size() \/ k + 2));\n    }\n\n    \/\/ Meta data storage\n    final WritableDataStore<Meta> metas = initializeMeta(relation, means);\n    \/\/ Perform the initial assignment\n    ArrayModifiableDBIDs tids = initialAssignment(clusters, metas, ids);\n    \/\/ Recompute the means after the initial assignment\n    means = means(clusters, means, relation);\n    \/\/ Refine the result via k-means like iterations\n    means = refineResult(relation, means, clusters, metas, tids);\n\n    \/\/ Wrap result\n    Clustering<MeanModel> result = new Clustering<>(\"k-Means Samesize Clustering\", \"kmeans-samesize-clustering\");\n    for(int i = 0; i < clusters.size(); i++) {\n      result.addToplevelCluster(new Cluster<>(clusters.get(i), new MeanModel(means[i])));\n    }\n    return result;\n  }","func_code_tokens":["@","Override","public","Clustering","<","MeanModel",">","run","(","Database","database",",","Relation","<","V",">","relation",")","{","\/\/ Database objects to process","final","DBIDs","ids","=","relation",".","getDBIDs","(",")",";","\/\/ Choose initial means","double","[","]","[","]","means","=","initializer",".","chooseInitialMeans","(","database",",","relation",",","k",",","getDistanceFunction","(",")",")",";","\/\/ Setup cluster assignment store","List","<","ModifiableDBIDs",">","clusters","=","new","ArrayList","<>","(",")",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","clusters",".","add","(","DBIDUtil",".","newHashSet","(","relation",".","size","(",")","\/","k","+","2",")",")",";","}","\/\/ Meta data storage","final","WritableDataStore","<","Meta",">","metas","=","initializeMeta","(","relation",",","means",")",";","\/\/ Perform the initial assignment","ArrayModifiableDBIDs","tids","=","initialAssignment","(","clusters",",","metas",",","ids",")",";","\/\/ Recompute the means after the initial assignment","means","=","means","(","clusters",",","means",",","relation",")",";","\/\/ Refine the result via k-means like iterations","means","=","refineResult","(","relation",",","means",",","clusters",",","metas",",","tids",")",";","\/\/ Wrap result","Clustering","<","MeanModel",">","result","=","new","Clustering","<>","(","\"k-Means Samesize Clustering\"",",","\"kmeans-samesize-clustering\"",")",";","for","(","int","i","=","0",";","i","<","clusters",".","size","(",")",";","i","++",")","{","result",".","addToplevelCluster","(","new","Cluster","<>","(","clusters",".","get","(","i",")",",","new","MeanModel","(","means","[","i","]",")",")",")",";","}","return","result",";","}"],"func_documentation_string":"Run k-means with cluster size constraints.\n\n@param database Database\n@param relation relation to use\n@return result","func_documentation_tokens":["Run","k","-","means","with","cluster","size","constraints","."],"label":0,"text":"Run k-means with cluster size constraints.\n\n@param database Database\n@param relation relation to use\n@return result[SEP]@Override\n  public Clustering<MeanModel> run(Database database, Relation<V> relation) {\n    \/\/ Database objects to process\n    final DBIDs ids = relation.getDBIDs();\n    \/\/ Choose initial means\n    double[][] means = initializer.chooseInitialMeans(database, relation, k, getDistanceFunction());\n    \/\/ Setup cluster assignment store\n    List<ModifiableDBIDs> clusters = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n      clusters.add(DBIDUtil.newHashSet(relation.size() \/ k + 2));\n    }\n\n    \/\/ Meta data storage\n    final WritableDataStore<Meta> metas = initializeMeta(relation, means);\n    \/\/ Perform the initial assignment\n    ArrayModifiableDBIDs tids = initialAssignment(clusters, metas, ids);\n    \/\/ Recompute the means after the initial assignment\n    means = means(clusters, means, relation);\n    \/\/ Refine the result via k-means like iterations\n    means = refineResult(relation, means, clusters, metas, tids);\n\n    \/\/ Wrap result\n    Clustering<MeanModel> result = new Clustering<>(\"k-Means Samesize Clustering\", \"kmeans-samesize-clustering\");\n    for(int i = 0; i < clusters.size(); i++) {\n      result.addToplevelCluster(new Cluster<>(clusters.get(i), new MeanModel(means[i])));\n    }\n    return result;\n  }"}
{"func_code_string":"public double evaluateClustering(Database db, Relation<? extends NumberVector> rel, Clustering<?> c) {\n    List<? extends Cluster<?>> clusters = c.getAllClusters();\n    NumberVector[] centroids = new NumberVector[clusters.size()];\n    int ignorednoise = centroids(rel, clusters, centroids, noiseOption);\n\n    MeanVariance mssil = new MeanVariance();\n\n    Iterator<? extends Cluster<?>> ci = clusters.iterator();\n    for(int i = 0; ci.hasNext(); i++) {\n      Cluster<?> cluster = ci.next();\n      if(cluster.size() <= 1) {\n        \/\/ As suggested in Rousseeuw, we use 0 for singletons.\n        mssil.put(0., cluster.size());\n        continue;\n      }\n      if(cluster.isNoise()) {\n        switch(noiseOption){\n        case IGNORE_NOISE:\n          continue; \/\/ Ignore elements\n        case TREAT_NOISE_AS_SINGLETONS:\n          \/\/ As suggested in Rousseeuw, we use 0 for singletons.\n          mssil.put(0., cluster.size());\n          continue;\n        case MERGE_NOISE:\n          break; \/\/ Treat as cluster below\n        }\n      }\n\n      \/\/ Cluster center:\n      final NumberVector center = centroids[i];\n      assert (center != null);\n      for(DBIDIter it = cluster.getIDs().iter(); it.valid(); it.advance()) {\n        NumberVector obj = rel.get(it);\n        \/\/ a: Distance to own centroid\n        double a = distance.distance(center, obj);\n\n        \/\/ b: Distance to other clusters centroids:\n        double min = Double.POSITIVE_INFINITY;\n        Iterator<? extends Cluster<?>> cj = clusters.iterator();\n        for(int j = 0; cj.hasNext(); j++) {\n          Cluster<?> ocluster = cj.next();\n          if(i == j) {\n            continue;\n          }\n          NumberVector other = centroids[j];\n          if(other == null) { \/\/ Noise!\n            switch(noiseOption){\n            case IGNORE_NOISE:\n              continue;\n            case TREAT_NOISE_AS_SINGLETONS:\n              \/\/ Treat each object like a centroid!\n              for(DBIDIter it2 = ocluster.getIDs().iter(); it2.valid(); it2.advance()) {\n                double dist = distance.distance(rel.get(it2), obj);\n                min = dist < min ? dist : min;\n              }\n              continue;\n            case MERGE_NOISE:\n              break; \/\/ Treat as cluster below, but should not be reachable.\n            }\n          }\n          \/\/ Clusters: use centroid.\n          double dist = distance.distance(other, obj);\n          min = dist < min ? dist : min;\n        }\n\n        \/\/ One 'real' cluster only?\n        min = min < Double.POSITIVE_INFINITY ? min : a;\n        mssil.put((min - a) \/ (min > a ? min : a));\n      }\n    }\n\n    double penalty = 1.;\n    \/\/ Only if {@link NoiseHandling#IGNORE_NOISE}:\n    if(penalize && ignorednoise > 0) {\n      penalty = (rel.size() - ignorednoise) \/ (double) rel.size();\n    }\n    final double meanssil = penalty * mssil.getMean();\n    final double stdssil = penalty * mssil.getSampleStddev();\n    if(LOG.isStatistics()) {\n      LOG.statistics(new StringStatistic(key + \".simplified-silhouette.noise-handling\", noiseOption.toString()));\n      if(ignorednoise > 0) {\n        LOG.statistics(new LongStatistic(key + \".simplified-silhouette.ignored\", ignorednoise));\n      }\n      LOG.statistics(new DoubleStatistic(key + \".simplified-silhouette.mean\", meanssil));\n      LOG.statistics(new DoubleStatistic(key + \".simplified-silhouette.stddev\", stdssil));\n    }\n\n    EvaluationResult ev = EvaluationResult.findOrCreate(db.getHierarchy(), c, \"Internal Clustering Evaluation\", \"internal evaluation\");\n    MeasurementGroup g = ev.findOrCreateGroup(\"Distance-based Evaluation\");\n    g.addMeasure(\"Simp. Silhouette +-\" + FormatUtil.NF2.format(stdssil), meanssil, -1., 1., 0., false);\n    db.getHierarchy().resultChanged(ev);\n    return meanssil;\n  }","func_code_tokens":["public","double","evaluateClustering","(","Database","db",",","Relation","<","?","extends","NumberVector",">","rel",",","Clustering","<","?",">","c",")","{","List","<","?","extends","Cluster","<","?",">",">","clusters","=","c",".","getAllClusters","(",")",";","NumberVector","[","]","centroids","=","new","NumberVector","[","clusters",".","size","(",")","]",";","int","ignorednoise","=","centroids","(","rel",",","clusters",",","centroids",",","noiseOption",")",";","MeanVariance","mssil","=","new","MeanVariance","(",")",";","Iterator","<","?","extends","Cluster","<","?",">",">","ci","=","clusters",".","iterator","(",")",";","for","(","int","i","=","0",";","ci",".","hasNext","(",")",";","i","++",")","{","Cluster","<","?",">","cluster","=","ci",".","next","(",")",";","if","(","cluster",".","size","(",")","<=","1",")","{","\/\/ As suggested in Rousseeuw, we use 0 for singletons.","mssil",".","put","(","0.",",","cluster",".","size","(",")",")",";","continue",";","}","if","(","cluster",".","isNoise","(",")",")","{","switch","(","noiseOption",")","{","case","IGNORE_NOISE",":","continue",";","\/\/ Ignore elements","case","TREAT_NOISE_AS_SINGLETONS",":","\/\/ As suggested in Rousseeuw, we use 0 for singletons.","mssil",".","put","(","0.",",","cluster",".","size","(",")",")",";","continue",";","case","MERGE_NOISE",":","break",";","\/\/ Treat as cluster below","}","}","\/\/ Cluster center:","final","NumberVector","center","=","centroids","[","i","]",";","assert","(","center","!=","null",")",";","for","(","DBIDIter","it","=","cluster",".","getIDs","(",")",".","iter","(",")",";","it",".","valid","(",")",";","it",".","advance","(",")",")","{","NumberVector","obj","=","rel",".","get","(","it",")",";","\/\/ a: Distance to own centroid","double","a","=","distance",".","distance","(","center",",","obj",")",";","\/\/ b: Distance to other clusters centroids:","double","min","=","Double",".","POSITIVE_INFINITY",";","Iterator","<","?","extends","Cluster","<","?",">",">","cj","=","clusters",".","iterator","(",")",";","for","(","int","j","=","0",";","cj",".","hasNext","(",")",";","j","++",")","{","Cluster","<","?",">","ocluster","=","cj",".","next","(",")",";","if","(","i","==","j",")","{","continue",";","}","NumberVector","other","=","centroids","[","j","]",";","if","(","other","==","null",")","{","\/\/ Noise!","switch","(","noiseOption",")","{","case","IGNORE_NOISE",":","continue",";","case","TREAT_NOISE_AS_SINGLETONS",":","\/\/ Treat each object like a centroid!","for","(","DBIDIter","it2","=","ocluster",".","getIDs","(",")",".","iter","(",")",";","it2",".","valid","(",")",";","it2",".","advance","(",")",")","{","double","dist","=","distance",".","distance","(","rel",".","get","(","it2",")",",","obj",")",";","min","=","dist","<","min","?","dist",":","min",";","}","continue",";","case","MERGE_NOISE",":","break",";","\/\/ Treat as cluster below, but should not be reachable.","}","}","\/\/ Clusters: use centroid.","double","dist","=","distance",".","distance","(","other",",","obj",")",";","min","=","dist","<","min","?","dist",":","min",";","}","\/\/ One 'real' cluster only?","min","=","min","<","Double",".","POSITIVE_INFINITY","?","min",":","a",";","mssil",".","put","(","(","min","-","a",")","\/","(","min",">","a","?","min",":","a",")",")",";","}","}","double","penalty","=","1.",";","\/\/ Only if {@link NoiseHandling#IGNORE_NOISE}:","if","(","penalize","&&","ignorednoise",">","0",")","{","penalty","=","(","rel",".","size","(",")","-","ignorednoise",")","\/","(","double",")","rel",".","size","(",")",";","}","final","double","meanssil","=","penalty","*","mssil",".","getMean","(",")",";","final","double","stdssil","=","penalty","*","mssil",".","getSampleStddev","(",")",";","if","(","LOG",".","isStatistics","(",")",")","{","LOG",".","statistics","(","new","StringStatistic","(","key","+","\".simplified-silhouette.noise-handling\"",",","noiseOption",".","toString","(",")",")",")",";","if","(","ignorednoise",">","0",")","{","LOG",".","statistics","(","new","LongStatistic","(","key","+","\".simplified-silhouette.ignored\"",",","ignorednoise",")",")",";","}","LOG",".","statistics","(","new","DoubleStatistic","(","key","+","\".simplified-silhouette.mean\"",",","meanssil",")",")",";","LOG",".","statistics","(","new","DoubleStatistic","(","key","+","\".simplified-silhouette.stddev\"",",","stdssil",")",")",";","}","EvaluationResult","ev","=","EvaluationResult",".","findOrCreate","(","db",".","getHierarchy","(",")",",","c",",","\"Internal Clustering Evaluation\"",",","\"internal evaluation\"",")",";","MeasurementGroup","g","=","ev",".","findOrCreateGroup","(","\"Distance-based Evaluation\"",")",";","g",".","addMeasure","(","\"Simp. Silhouette +-\"","+","FormatUtil",".","NF2",".","format","(","stdssil",")",",","meanssil",",","-","1.",",","1.",",","0.",",","false",")",";","db",".","getHierarchy","(",")",".","resultChanged","(","ev",")",";","return","meanssil",";","}"],"func_documentation_string":"Evaluate a single clustering.\n\n@param db Database\n@param rel Data relation\n@param c Clustering\n@return Mean simplified silhouette","func_documentation_tokens":["Evaluate","a","single","clustering","."],"label":0,"text":"Evaluate a single clustering.\n\n@param db Database\n@param rel Data relation\n@param c Clustering\n@return Mean simplified silhouette[SEP]public double evaluateClustering(Database db, Relation<? extends NumberVector> rel, Clustering<?> c) {\n    List<? extends Cluster<?>> clusters = c.getAllClusters();\n    NumberVector[] centroids = new NumberVector[clusters.size()];\n    int ignorednoise = centroids(rel, clusters, centroids, noiseOption);\n\n    MeanVariance mssil = new MeanVariance();\n\n    Iterator<? extends Cluster<?>> ci = clusters.iterator();\n    for(int i = 0; ci.hasNext(); i++) {\n      Cluster<?> cluster = ci.next();\n      if(cluster.size() <= 1) {\n        \/\/ As suggested in Rousseeuw, we use 0 for singletons.\n        mssil.put(0., cluster.size());\n        continue;\n      }\n      if(cluster.isNoise()) {\n        switch(noiseOption){\n        case IGNORE_NOISE:\n          continue; \/\/ Ignore elements\n        case TREAT_NOISE_AS_SINGLETONS:\n          \/\/ As suggested in Rousseeuw, we use 0 for singletons.\n          mssil.put(0., cluster.size());\n          continue;\n        case MERGE_NOISE:\n          break; \/\/ Treat as cluster below\n        }\n      }\n\n      \/\/ Cluster center:\n      final NumberVector center = centroids[i];\n      assert (center != null);\n      for(DBIDIter it = cluster.getIDs().iter(); it.valid(); it.advance()) {\n        NumberVector obj = rel.get(it);\n        \/\/ a: Distance to own centroid\n        double a = distance.distance(center, obj);\n\n        \/\/ b: Distance to other clusters centroids:\n        double min = Double.POSITIVE_INFINITY;\n        Iterator<? extends Cluster<?>> cj = clusters.iterator();\n        for(int j = 0; cj.hasNext(); j++) {\n          Cluster<?> ocluster = cj.next();\n          if(i == j) {\n            continue;\n          }\n          NumberVector other = centroids[j];\n          if(other == null) { \/\/ Noise!\n            switch(noiseOption){\n            case IGNORE_NOISE:\n              continue;\n            case TREAT_NOISE_AS_SINGLETONS:\n              \/\/ Treat each object like a centroid!\n              for(DBIDIter it2 = ocluster.getIDs().iter(); it2.valid(); it2.advance()) {\n                double dist = distance.distance(rel.get(it2), obj);\n                min = dist < min ? dist : min;\n              }\n              continue;\n            case MERGE_NOISE:\n              break; \/\/ Treat as cluster below, but should not be reachable.\n            }\n          }\n          \/\/ Clusters: use centroid.\n          double dist = distance.distance(other, obj);\n          min = dist < min ? dist : min;\n        }\n\n        \/\/ One 'real' cluster only?\n        min = min < Double.POSITIVE_INFINITY ? min : a;\n        mssil.put((min - a) \/ (min > a ? min : a));\n      }\n    }\n\n    double penalty = 1.;\n    \/\/ Only if {@link NoiseHandling#IGNORE_NOISE}:\n    if(penalize && ignorednoise > 0) {\n      penalty = (rel.size() - ignorednoise) \/ (double) rel.size();\n    }\n    final double meanssil = penalty * mssil.getMean();\n    final double stdssil = penalty * mssil.getSampleStddev();\n    if(LOG.isStatistics()) {\n      LOG.statistics(new StringStatistic(key + \".simplified-silhouette.noise-handling\", noiseOption.toString()));\n      if(ignorednoise > 0) {\n        LOG.statistics(new LongStatistic(key + \".simplified-silhouette.ignored\", ignorednoise));\n      }\n      LOG.statistics(new DoubleStatistic(key + \".simplified-silhouette.mean\", meanssil));\n      LOG.statistics(new DoubleStatistic(key + \".simplified-silhouette.stddev\", stdssil));\n    }\n\n    EvaluationResult ev = EvaluationResult.findOrCreate(db.getHierarchy(), c, \"Internal Clustering Evaluation\", \"internal evaluation\");\n    MeasurementGroup g = ev.findOrCreateGroup(\"Distance-based Evaluation\");\n    g.addMeasure(\"Simp. Silhouette +-\" + FormatUtil.NF2.format(stdssil), meanssil, -1., 1., 0., false);\n    db.getHierarchy().resultChanged(ev);\n    return meanssil;\n  }"}
{"func_code_string":"public static double cdf(double x, double mu, double sigma) {\n    if(x <= 0.) {\n      return 0.;\n    }\n    return .5 * (1 + NormalDistribution.erf((FastMath.log(x) - mu) \/ (MathUtil.SQRT2 * sigma)));\n  }","func_code_tokens":["public","static","double","cdf","(","double","x",",","double","mu",",","double","sigma",")","{","if","(","x","<=","0.",")","{","return","0.",";","}","return",".5","*","(","1","+","NormalDistribution",".","erf","(","(","FastMath",".","log","(","x",")","-","mu",")","\/","(","MathUtil",".","SQRT2","*","sigma",")",")",")",";","}"],"func_documentation_string":"Cumulative probability density function (CDF) of a normal distribution.\n\n@param x value to evaluate CDF at\n@param mu Mean value\n@param sigma Standard deviation.\n@return The CDF of the given normal distribution at x.","func_documentation_tokens":["Cumulative","probability","density","function","(","CDF",")","of","a","normal","distribution","."],"label":1,"text":"Cumulative probability density function (CDF) of a normal distribution.\n\n@param x value to evaluate CDF at\n@param mu Mean value\n@param sigma Standard deviation.\n@return The CDF of the given normal distribution at x.[SEP]public static double cdf(double x, double mu, double sigma) {\n    if(x <= 0.) {\n      return 0.;\n    }\n    return .5 * (1 + NormalDistribution.erf((FastMath.log(x) - mu) \/ (MathUtil.SQRT2 * sigma)));\n  }"}
{"func_code_string":"public static double quantile(double x, double mu, double sigma) {\n    return FastMath.exp(mu + sigma * NormalDistribution.standardNormalQuantile(x));\n  }","func_code_tokens":["public","static","double","quantile","(","double","x",",","double","mu",",","double","sigma",")","{","return","FastMath",".","exp","(","mu","+","sigma","*","NormalDistribution",".","standardNormalQuantile","(","x",")",")",";","}"],"func_documentation_string":"Inverse cumulative probability density function (probit) of a normal\ndistribution.\n\n@param x value to evaluate probit function at\n@param mu Mean value\n@param sigma Standard deviation.\n@return The probit of the given normal distribution at x.","func_documentation_tokens":["Inverse","cumulative","probability","density","function","(","probit",")","of","a","normal","distribution","."],"label":1,"text":"Inverse cumulative probability density function (probit) of a normal\ndistribution.\n\n@param x value to evaluate probit function at\n@param mu Mean value\n@param sigma Standard deviation.\n@return The probit of the given normal distribution at x.[SEP]public static double quantile(double x, double mu, double sigma) {\n    return FastMath.exp(mu + sigma * NormalDistribution.standardNormalQuantile(x));\n  }"}
{"func_code_string":"private void mapMouseToPlane(Simple1DOFCamera camera, Point point2d, double[] vec) {\n    \/\/ Far plane\n    camera.unproject(point2d.x, point2d.y, -100., far);\n    \/\/ Near plane\n    camera.unproject(point2d.x, point2d.y, 1., near);\n    \/\/ Delta vector: far -= near.\n    VMath.minusEquals(far, near);\n    \/\/ Intersection with z=0 plane:\n    \/\/ far.z - a * near.z = 0 -> a = far.z \/ near.z\n    if (near[2] < 0 || near[2] > 0) {\n      double a = far[2] \/ near[2];\n      vec[0] = far[0] - a * near[0];\n      vec[1] = far[1] - a * near[1];\n      vec[2] = 0;\n    }\n  }","func_code_tokens":["private","void","mapMouseToPlane","(","Simple1DOFCamera","camera",",","Point","point2d",",","double","[","]","vec",")","{","\/\/ Far plane","camera",".","unproject","(","point2d",".","x",",","point2d",".","y",",","-","100.",",","far",")",";","\/\/ Near plane","camera",".","unproject","(","point2d",".","x",",","point2d",".","y",",","1.",",","near",")",";","\/\/ Delta vector: far -= near.","VMath",".","minusEquals","(","far",",","near",")",";","\/\/ Intersection with z=0 plane:","\/\/ far.z - a * near.z = 0 -> a = far.z \/ near.z","if","(","near","[","2","]","<","0","||","near","[","2","]",">","0",")","{","double","a","=","far","[","2","]","\/","near","[","2","]",";","vec","[","0","]","=","far","[","0","]","-","a","*","near","[","0","]",";","vec","[","1","]","=","far","[","1","]","-","a","*","near","[","1","]",";","vec","[","2","]","=","0",";","}","}"],"func_documentation_string":"Map the coordinates. Note: vec will be overwritten!\n\n@param camera Camera\n@param point2d Input point\n@param vec Output vector","func_documentation_tokens":["Map","the","coordinates",".","Note",":","vec","will","be","overwritten!"],"label":0,"text":"Map the coordinates. Note: vec will be overwritten!\n\n@param camera Camera\n@param point2d Input point\n@param vec Output vector[SEP]private void mapMouseToPlane(Simple1DOFCamera camera, Point point2d, double[] vec) {\n    \/\/ Far plane\n    camera.unproject(point2d.x, point2d.y, -100., far);\n    \/\/ Near plane\n    camera.unproject(point2d.x, point2d.y, 1., near);\n    \/\/ Delta vector: far -= near.\n    VMath.minusEquals(far, near);\n    \/\/ Intersection with z=0 plane:\n    \/\/ far.z - a * near.z = 0 -> a = far.z \/ near.z\n    if (near[2] < 0 || near[2] > 0) {\n      double a = far[2] \/ near[2];\n      vec[0] = far[0] - a * near[0];\n      vec[1] = far[1] - a * near[1];\n      vec[2] = 0;\n    }\n  }"}
{"func_code_string":"public Object processSecurityPreInvokeException(SecurityViolationException sve, RequestProcessor requestProcessor, HttpServletRequest request,\n            HttpServletResponse response, WebAppDispatcherContext dispatchContext, WebApp context, String name) throws ServletErrorReport {\n\n        Object secObject = null;\n\n        \/\/ begin pq56177\n\n        secObject = sve.getWebSecurityContext();\n        int sc = sve.getStatusCode(); \/\/ access status code directly. Is\n                                      \/\/ SC_FORBIDDEN the default?\n        \/\/ if (sc==null){\n        \/\/ if\n        \/\/ (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable\n        \/\/ (Level.FINE) == true)\n        \/\/ {\n        \/\/ logger.logp(Level.FINE,\n        \/\/ CLASS_NAME,\"processSecurityPreInvokeException\",\n        \/\/ \"webReply is null, default to 403 status code\");\n        \/\/ }\n        \/\/ sc = HttpServletResponse.SC_FORBIDDEN;\n        \/\/ }\n        Throwable cause = sve.getCause();\n\n        if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n            logger.entering(CLASS_NAME, \"processSecurityPreInvokeException\");\n            logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\",\n                    \"SecurityCollaboratorHelper.processPreInvokeException():  WebSecurityException thrown (\" + sve.toString()\n                            + \").  HTTP status code: \" + sc + \"resource : \" + name);\n\n        } \/\/ end if\n\n        if (sc == HttpServletResponse.SC_FORBIDDEN) {\n            \/\/ If the user has defined a custom error page for\n            \/\/ SC_FORBIDDEN (HTTP status code 403) then send\n            \/\/ it to the client ...\n            if (context.isErrorPageDefined(sc) == true) {\n                if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n                    logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\", \"Using user defined error page for HTTP status code \"\n                            + sc);\n                }\n\n                WebAppErrorReport wErrorReport = new WebAppErrorReport(cause);\n                wErrorReport.setErrorCode(sc);\n                context.sendError(request, response, wErrorReport);\n            } else {\n                \/\/ ... otherwise, use the one provided by the\n                \/\/ SecurityCollaborator\n                if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n                    logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\",\n                            \"Using default security error page for HTTP status code \" + sc);\n                }\n\n                try {\n                    securityCollaborator.handleException(request, response, cause);\n                } catch (Exception ex) {\n                    if (requestProcessor != null) {\n                        throw WebAppErrorReport.constructErrorReport(ex, requestProcessor);\n                    } else {\n                        throw WebAppErrorReport.constructErrorReport(ex, name);\n                    }\n                }\n                \/\/ reply.sendError(wResp);\n            } \/\/ end if-else\n        } else if (sc == HttpServletResponse.SC_UNAUTHORIZED) {\n            \/\/ Invoking handleException will add the necessary headers\n            \/\/ to the response ...\n            try {\n                securityCollaborator.handleException(request, response, cause);\n            } catch (Exception ex) {\n                if (requestProcessor != null) {\n                    throw WebAppErrorReport.constructErrorReport(ex, requestProcessor);\n                } else {\n                    throw WebAppErrorReport.constructErrorReport(ex, name);\n                }\n            }\n\n            \/\/ ... if the user has defined a custom error page for\n            \/\/ SC_UNAUTHORIZED (HTTP status code 401) then\n            \/\/ send it to the client\n            if (context.isErrorPageDefined(sc) == true) {\n            \t\n            \tWebContainerRequestState reqState = com.ibm.wsspi.webcontainer.WebContainerRequestState.getInstance(false);\n    \t\t\tboolean errorPageAlreadySent = false;\n    \t\t\tif (reqState!=null) {\n    \t\t\t\tString spnegoErrorPageAlreadySent = (String)reqState.getAttribute(\"spnego.error.page\");\n    \t\t\t\treqState.removeAttribute(\"spnego.error.page\");\n    \t\t\t\tif (spnegoErrorPageAlreadySent != null && spnegoErrorPageAlreadySent.equalsIgnoreCase(\"true\")) {  \t\t\t\t\t    \t\t\n    \t\t\t\t\terrorPageAlreadySent = true; \n    \t\t\t\t    if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable (Level.FINE) == true) {\n    \t\t\t\t         logger.logp(Level.FINE, CLASS_NAME,\"processSecurityPreInvokeException\", \"skip error page - already created by spego code\");\n    \t\t\t\t    }\t\n    \t\t\t\t}    \n    \t\t\t} \n\n    \t\t\tif (!errorPageAlreadySent) {\n\n    \t\t\t\tif (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n    \t\t\t\t\tlogger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\", \"Using user defined error page for HTTP status code \"\n    \t\t\t\t\t\t\t+ sc);\n    \t\t\t\t}\n\n    \t\t\t\tWebAppErrorReport wErrorReport = new WebAppErrorReport(cause);\n    \t\t\t\twErrorReport.setErrorCode(sc);\n    \t\t\t\tcontext.sendError(request, response, wErrorReport);\n    \t\t\t\t\n    \t\t\t}\t\n            } else {\n                if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n                    logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\",\n                            \"Using default security error page for HTTP status code \" + sc);\n                }\n                \/\/ reply.sendError(wResp); comment-out 140967\n            }\n\n        } else {\n            \/\/ Unexpected status code ... not SC_UNAUTHORIZED or SC_FORBIDDEN\n            if ((logger.isLoggable(Level.FINE) == true)) {\n                logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\", \"HTTP status code: \" + sc);\n            }\n            try {\n                securityCollaborator.handleException(request, response, cause);\n            } catch (Exception ex) {\n                if (requestProcessor != null) {\n                    throw WebAppErrorReport.constructErrorReport(ex, requestProcessor);\n                } else {\n                    throw WebAppErrorReport.constructErrorReport(ex, name);\n                }\n            }\n        }\n        if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n            logger.exiting(CLASS_NAME, \"processSecurityPreInvokeException\");\n        }\n        return secObject;\n    }","func_code_tokens":["public","Object","processSecurityPreInvokeException","(","SecurityViolationException","sve",",","RequestProcessor","requestProcessor",",","HttpServletRequest","request",",","HttpServletResponse","response",",","WebAppDispatcherContext","dispatchContext",",","WebApp","context",",","String","name",")","throws","ServletErrorReport","{","Object","secObject","=","null",";","\/\/ begin pq56177","secObject","=","sve",".","getWebSecurityContext","(",")",";","int","sc","=","sve",".","getStatusCode","(",")",";","\/\/ access status code directly. Is","\/\/ SC_FORBIDDEN the default?","\/\/ if (sc==null){","\/\/ if","\/\/ (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable","\/\/ (Level.FINE) == true)","\/\/ {","\/\/ logger.logp(Level.FINE,","\/\/ CLASS_NAME,\"processSecurityPreInvokeException\",","\/\/ \"webReply is null, default to 403 status code\");","\/\/ }","\/\/ sc = HttpServletResponse.SC_FORBIDDEN;","\/\/ }","Throwable","cause","=","sve",".","getCause","(",")",";","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","entering","(","CLASS_NAME",",","\"processSecurityPreInvokeException\"",")",";","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"SecurityCollaboratorHelper.processPreInvokeException():  WebSecurityException thrown (\"","+","sve",".","toString","(",")","+","\").  HTTP status code: \"","+","sc","+","\"resource : \"","+","name",")",";","}","\/\/ end if","if","(","sc","==","HttpServletResponse",".","SC_FORBIDDEN",")","{","\/\/ If the user has defined a custom error page for","\/\/ SC_FORBIDDEN (HTTP status code 403) then send","\/\/ it to the client ...","if","(","context",".","isErrorPageDefined","(","sc",")","==","true",")","{","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"Using user defined error page for HTTP status code \"","+","sc",")",";","}","WebAppErrorReport","wErrorReport","=","new","WebAppErrorReport","(","cause",")",";","wErrorReport",".","setErrorCode","(","sc",")",";","context",".","sendError","(","request",",","response",",","wErrorReport",")",";","}","else","{","\/\/ ... otherwise, use the one provided by the","\/\/ SecurityCollaborator","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"Using default security error page for HTTP status code \"","+","sc",")",";","}","try","{","securityCollaborator",".","handleException","(","request",",","response",",","cause",")",";","}","catch","(","Exception","ex",")","{","if","(","requestProcessor","!=","null",")","{","throw","WebAppErrorReport",".","constructErrorReport","(","ex",",","requestProcessor",")",";","}","else","{","throw","WebAppErrorReport",".","constructErrorReport","(","ex",",","name",")",";","}","}","\/\/ reply.sendError(wResp);","}","\/\/ end if-else","}","else","if","(","sc","==","HttpServletResponse",".","SC_UNAUTHORIZED",")","{","\/\/ Invoking handleException will add the necessary headers","\/\/ to the response ...","try","{","securityCollaborator",".","handleException","(","request",",","response",",","cause",")",";","}","catch","(","Exception","ex",")","{","if","(","requestProcessor","!=","null",")","{","throw","WebAppErrorReport",".","constructErrorReport","(","ex",",","requestProcessor",")",";","}","else","{","throw","WebAppErrorReport",".","constructErrorReport","(","ex",",","name",")",";","}","}","\/\/ ... if the user has defined a custom error page for","\/\/ SC_UNAUTHORIZED (HTTP status code 401) then","\/\/ send it to the client","if","(","context",".","isErrorPageDefined","(","sc",")","==","true",")","{","WebContainerRequestState","reqState","=","com",".","ibm",".","wsspi",".","webcontainer",".","WebContainerRequestState",".","getInstance","(","false",")",";","boolean","errorPageAlreadySent","=","false",";","if","(","reqState","!=","null",")","{","String","spnegoErrorPageAlreadySent","=","(","String",")","reqState",".","getAttribute","(","\"spnego.error.page\"",")",";","reqState",".","removeAttribute","(","\"spnego.error.page\"",")",";","if","(","spnegoErrorPageAlreadySent","!=","null","&&","spnegoErrorPageAlreadySent",".","equalsIgnoreCase","(","\"true\"",")",")","{","errorPageAlreadySent","=","true",";","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"skip error page - already created by spego code\"",")",";","}","}","}","if","(","!","errorPageAlreadySent",")","{","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"Using user defined error page for HTTP status code \"","+","sc",")",";","}","WebAppErrorReport","wErrorReport","=","new","WebAppErrorReport","(","cause",")",";","wErrorReport",".","setErrorCode","(","sc",")",";","context",".","sendError","(","request",",","response",",","wErrorReport",")",";","}","}","else","{","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"Using default security error page for HTTP status code \"","+","sc",")",";","}","\/\/ reply.sendError(wResp); comment-out 140967","}","}","else","{","\/\/ Unexpected status code ... not SC_UNAUTHORIZED or SC_FORBIDDEN","if","(","(","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")",")","{","logger",".","logp","(","Level",".","FINE",",","CLASS_NAME",",","\"processSecurityPreInvokeException\"",",","\"HTTP status code: \"","+","sc",")",";","}","try","{","securityCollaborator",".","handleException","(","request",",","response",",","cause",")",";","}","catch","(","Exception","ex",")","{","if","(","requestProcessor","!=","null",")","{","throw","WebAppErrorReport",".","constructErrorReport","(","ex",",","requestProcessor",")",";","}","else","{","throw","WebAppErrorReport",".","constructErrorReport","(","ex",",","name",")",";","}","}","}","if","(","com",".","ibm",".","ejs",".","ras",".","TraceComponent",".","isAnyTracingEnabled","(",")","&&","logger",".","isLoggable","(","Level",".","FINE",")","==","true",")","{","logger",".","exiting","(","CLASS_NAME",",","\"processSecurityPreInvokeException\"",")",";","}","return","secObject",";","}"],"func_documentation_string":"\/*\n(non-Javadoc)\n\n@seecom.ibm.wsspi.webcontainer.collaborator.ICollaboratorHelper#\nprocessSecurityPreInvokeException\n(com.ibm.wsspi.webcontainer.security.SecurityViolationException,\ncom.ibm.wsspi.webcontainer.RequestProcessor,\njavax.servlet.http.HttpServletRequest,\njavax.servlet.http.HttpServletResponse,\ncom.ibm.ws.webcontainer.webapp.WebAppDispatcherContext,\ncom.ibm.ws.webcontainer.webapp.WebApp, java.lang.String)","func_documentation_tokens":["\/","*","(","non","-","Javadoc",")"],"label":0,"text":"\/*\n(non-Javadoc)\n\n@seecom.ibm.wsspi.webcontainer.collaborator.ICollaboratorHelper#\nprocessSecurityPreInvokeException\n(com.ibm.wsspi.webcontainer.security.SecurityViolationException,\ncom.ibm.wsspi.webcontainer.RequestProcessor,\njavax.servlet.http.HttpServletRequest,\njavax.servlet.http.HttpServletResponse,\ncom.ibm.ws.webcontainer.webapp.WebAppDispatcherContext,\ncom.ibm.ws.webcontainer.webapp.WebApp, java.lang.String)[SEP]public Object processSecurityPreInvokeException(SecurityViolationException sve, RequestProcessor requestProcessor, HttpServletRequest request,\n            HttpServletResponse response, WebAppDispatcherContext dispatchContext, WebApp context, String name) throws ServletErrorReport {\n\n        Object secObject = null;\n\n        \/\/ begin pq56177\n\n        secObject = sve.getWebSecurityContext();\n        int sc = sve.getStatusCode(); \/\/ access status code directly. Is\n                                      \/\/ SC_FORBIDDEN the default?\n        \/\/ if (sc==null){\n        \/\/ if\n        \/\/ (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable\n        \/\/ (Level.FINE) == true)\n        \/\/ {\n        \/\/ logger.logp(Level.FINE,\n        \/\/ CLASS_NAME,\"processSecurityPreInvokeException\",\n        \/\/ \"webReply is null, default to 403 status code\");\n        \/\/ }\n        \/\/ sc = HttpServletResponse.SC_FORBIDDEN;\n        \/\/ }\n        Throwable cause = sve.getCause();\n\n        if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n            logger.entering(CLASS_NAME, \"processSecurityPreInvokeException\");\n            logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\",\n                    \"SecurityCollaboratorHelper.processPreInvokeException():  WebSecurityException thrown (\" + sve.toString()\n                            + \").  HTTP status code: \" + sc + \"resource : \" + name);\n\n        } \/\/ end if\n\n        if (sc == HttpServletResponse.SC_FORBIDDEN) {\n            \/\/ If the user has defined a custom error page for\n            \/\/ SC_FORBIDDEN (HTTP status code 403) then send\n            \/\/ it to the client ...\n            if (context.isErrorPageDefined(sc) == true) {\n                if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n                    logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\", \"Using user defined error page for HTTP status code \"\n                            + sc);\n                }\n\n                WebAppErrorReport wErrorReport = new WebAppErrorReport(cause);\n                wErrorReport.setErrorCode(sc);\n                context.sendError(request, response, wErrorReport);\n            } else {\n                \/\/ ... otherwise, use the one provided by the\n                \/\/ SecurityCollaborator\n                if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n                    logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\",\n                            \"Using default security error page for HTTP status code \" + sc);\n                }\n\n                try {\n                    securityCollaborator.handleException(request, response, cause);\n                } catch (Exception ex) {\n                    if (requestProcessor != null) {\n                        throw WebAppErrorReport.constructErrorReport(ex, requestProcessor);\n                    } else {\n                        throw WebAppErrorReport.constructErrorReport(ex, name);\n                    }\n                }\n                \/\/ reply.sendError(wResp);\n            } \/\/ end if-else\n        } else if (sc == HttpServletResponse.SC_UNAUTHORIZED) {\n            \/\/ Invoking handleException will add the necessary headers\n            \/\/ to the response ...\n            try {\n                securityCollaborator.handleException(request, response, cause);\n            } catch (Exception ex) {\n                if (requestProcessor != null) {\n                    throw WebAppErrorReport.constructErrorReport(ex, requestProcessor);\n                } else {\n                    throw WebAppErrorReport.constructErrorReport(ex, name);\n                }\n            }\n\n            \/\/ ... if the user has defined a custom error page for\n            \/\/ SC_UNAUTHORIZED (HTTP status code 401) then\n            \/\/ send it to the client\n            if (context.isErrorPageDefined(sc) == true) {\n            \t\n            \tWebContainerRequestState reqState = com.ibm.wsspi.webcontainer.WebContainerRequestState.getInstance(false);\n    \t\t\tboolean errorPageAlreadySent = false;\n    \t\t\tif (reqState!=null) {\n    \t\t\t\tString spnegoErrorPageAlreadySent = (String)reqState.getAttribute(\"spnego.error.page\");\n    \t\t\t\treqState.removeAttribute(\"spnego.error.page\");\n    \t\t\t\tif (spnegoErrorPageAlreadySent != null && spnegoErrorPageAlreadySent.equalsIgnoreCase(\"true\")) {  \t\t\t\t\t    \t\t\n    \t\t\t\t\terrorPageAlreadySent = true; \n    \t\t\t\t    if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable (Level.FINE) == true) {\n    \t\t\t\t         logger.logp(Level.FINE, CLASS_NAME,\"processSecurityPreInvokeException\", \"skip error page - already created by spego code\");\n    \t\t\t\t    }\t\n    \t\t\t\t}    \n    \t\t\t} \n\n    \t\t\tif (!errorPageAlreadySent) {\n\n    \t\t\t\tif (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n    \t\t\t\t\tlogger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\", \"Using user defined error page for HTTP status code \"\n    \t\t\t\t\t\t\t+ sc);\n    \t\t\t\t}\n\n    \t\t\t\tWebAppErrorReport wErrorReport = new WebAppErrorReport(cause);\n    \t\t\t\twErrorReport.setErrorCode(sc);\n    \t\t\t\tcontext.sendError(request, response, wErrorReport);\n    \t\t\t\t\n    \t\t\t}\t\n            } else {\n                if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n                    logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\",\n                            \"Using default security error page for HTTP status code \" + sc);\n                }\n                \/\/ reply.sendError(wResp); comment-out 140967\n            }\n\n        } else {\n            \/\/ Unexpected status code ... not SC_UNAUTHORIZED or SC_FORBIDDEN\n            if ((logger.isLoggable(Level.FINE) == true)) {\n                logger.logp(Level.FINE, CLASS_NAME, \"processSecurityPreInvokeException\", \"HTTP status code: \" + sc);\n            }\n            try {\n                securityCollaborator.handleException(request, response, cause);\n            } catch (Exception ex) {\n                if (requestProcessor != null) {\n                    throw WebAppErrorReport.constructErrorReport(ex, requestProcessor);\n                } else {\n                    throw WebAppErrorReport.constructErrorReport(ex, name);\n                }\n            }\n        }\n        if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE) == true) {\n            logger.exiting(CLASS_NAME, \"processSecurityPreInvokeException\");\n        }\n        return secObject;\n    }"}
{"func_code_string":"public static Cookie createCookie(String cookieName, @Sensitive String cookieValue, HttpServletRequest req) {\n        return createCookie(cookieName, cookieValue, -1, req);\n    }","func_code_tokens":["public","static","Cookie","createCookie","(","String","cookieName",",","@","Sensitive","String","cookieValue",",","HttpServletRequest","req",")","{","return","createCookie","(","cookieName",",","cookieValue",",","-","1",",","req",")",";","}"],"func_documentation_string":"\/*\nIn case, the ReferrerURLCookieHandler is dynamic in every request, then we will need to make this into\nOidcClientRequest. And do not do static.","func_documentation_tokens":["\/","*","In","case","the","ReferrerURLCookieHandler","is","dynamic","in","every","request","then","we","will","need","to","make","this","into","OidcClientRequest",".","And","do","not","do","static","."],"label":1,"text":"\/*\nIn case, the ReferrerURLCookieHandler is dynamic in every request, then we will need to make this into\nOidcClientRequest. And do not do static.[SEP]public static Cookie createCookie(String cookieName, @Sensitive String cookieValue, HttpServletRequest req) {\n        return createCookie(cookieName, cookieValue, -1, req);\n    }"}
{"func_code_string":"private void postGetConnectionHandling(Connection conn) throws SQLException {\n        helper.doConnectionSetup(conn);\n\n        String[] sqlCommands = dsConfig.get().onConnect;\n        if (sqlCommands != null && sqlCommands.length > 0)\n            onConnect(conn, sqlCommands);\n\n        \/\/ Log the database and driver versions on first getConnection.\n        if (!wasUsedToGetAConnection) {\n            \/\/ Wait until after the connection succeeds to set the indicator.\n            \/\/ This accounts for the scenario where the first connection attempt is bad.\n            \/\/ The information needs to be read again on the second attempt.\n            helper.gatherAndDisplayMetaDataInfo(conn, this);\n            wasUsedToGetAConnection = true;\n        }\n    }","func_code_tokens":["private","void","postGetConnectionHandling","(","Connection","conn",")","throws","SQLException","{","helper",".","doConnectionSetup","(","conn",")",";","String","[","]","sqlCommands","=","dsConfig",".","get","(",")",".","onConnect",";","if","(","sqlCommands","!=","null","&&","sqlCommands",".","length",">","0",")","onConnect","(","conn",",","sqlCommands",")",";","\/\/ Log the database and driver versions on first getConnection.","if","(","!","wasUsedToGetAConnection",")","{","\/\/ Wait until after the connection succeeds to set the indicator.","\/\/ This accounts for the scenario where the first connection attempt is bad.","\/\/ The information needs to be read again on the second attempt.","helper",".","gatherAndDisplayMetaDataInfo","(","conn",",","this",")",";","wasUsedToGetAConnection","=","true",";","}","}"],"func_documentation_string":"utility used to gather metadata info and issue doConnectionSetup.","func_documentation_tokens":["utility","used","to","gather","metadata","info","and","issue","doConnectionSetup","."],"label":1,"text":"utility used to gather metadata info and issue doConnectionSetup.[SEP]private void postGetConnectionHandling(Connection conn) throws SQLException {\n        helper.doConnectionSetup(conn);\n\n        String[] sqlCommands = dsConfig.get().onConnect;\n        if (sqlCommands != null && sqlCommands.length > 0)\n            onConnect(conn, sqlCommands);\n\n        \/\/ Log the database and driver versions on first getConnection.\n        if (!wasUsedToGetAConnection) {\n            \/\/ Wait until after the connection succeeds to set the indicator.\n            \/\/ This accounts for the scenario where the first connection attempt is bad.\n            \/\/ The information needs to be read again on the second attempt.\n            helper.gatherAndDisplayMetaDataInfo(conn, this);\n            wasUsedToGetAConnection = true;\n        }\n    }"}
{"func_code_string":"public boolean replaceStringsInFile(String filePath, Map<String, String> replaceValues) {\n        return replaceStringsInFile(filePath, replaceValues, null);\n    }","func_code_tokens":["public","boolean","replaceStringsInFile","(","String","filePath",",","Map","<","String",",","String",">","replaceValues",")","{","return","replaceStringsInFile","(","filePath",",","replaceValues",",","null",")",";","}"],"func_documentation_string":"Replaces all occurrences of the strings included in {@code replaceValues} within the file specified by {@code filePath}.\nIf {@code outputFilePath} is null or empty, the resulting text will be output to the same path as {@code filePath}.\n\n@param filePath\nFile in which the string will be replaced.\n@param replaceValues\nMap of strings to be replaced.\n@param outputFilePath\nFile to which results will be written if a change was made. If null or empty, this is set to the\nvalue of {@code filePath}.\n@return","func_documentation_tokens":["Replaces","all","occurrences","of","the","strings","included","in","{","@code","replaceValues","}","within","the","file","specified","by","{","@code","filePath","}",".","If","{","@code","outputFilePath","}","is","null","or","empty","the","resulting","text","will","be","output","to","the","same","path","as","{","@code","filePath","}","."],"label":1,"text":"Replaces all occurrences of the strings included in {@code replaceValues} within the file specified by {@code filePath}.\nIf {@code outputFilePath} is null or empty, the resulting text will be output to the same path as {@code filePath}.\n\n@param filePath\nFile in which the string will be replaced.\n@param replaceValues\nMap of strings to be replaced.\n@param outputFilePath\nFile to which results will be written if a change was made. If null or empty, this is set to the\nvalue of {@code filePath}.\n@return[SEP]public boolean replaceStringsInFile(String filePath, Map<String, String> replaceValues) {\n        return replaceStringsInFile(filePath, replaceValues, null);\n    }"}
{"func_code_string":"public void sendOneWay(MessageOut message, int id, InetAddress to)\n    {\n        if (logger.isTraceEnabled())\n            logger.trace(FBUtilities.getBroadcastAddress() + \" sending \" + message.verb + \" to \" + id + \"@\" + to);\n\n        if (to.equals(FBUtilities.getBroadcastAddress()))\n            logger.trace(\"Message-to-self {} going over MessagingService\", message);\n\n        \/\/ message sinks are a testing hook\n        MessageOut processedMessage = SinkManager.processOutboundMessage(message, id, to);\n        if (processedMessage == null)\n        {\n            return;\n        }\n\n        \/\/ get pooled connection (really, connection queue)\n        OutboundTcpConnection connection = getConnection(to, processedMessage);\n\n        \/\/ write it\n        connection.enqueue(processedMessage, id);\n    }","func_code_tokens":["public","void","sendOneWay","(","MessageOut","message",",","int","id",",","InetAddress","to",")","{","if","(","logger",".","isTraceEnabled","(",")",")","logger",".","trace","(","FBUtilities",".","getBroadcastAddress","(",")","+","\" sending \"","+","message",".","verb","+","\" to \"","+","id","+","\"@\"","+","to",")",";","if","(","to",".","equals","(","FBUtilities",".","getBroadcastAddress","(",")",")",")","logger",".","trace","(","\"Message-to-self {} going over MessagingService\"",",","message",")",";","\/\/ message sinks are a testing hook","MessageOut","processedMessage","=","SinkManager",".","processOutboundMessage","(","message",",","id",",","to",")",";","if","(","processedMessage","==","null",")","{","return",";","}","\/\/ get pooled connection (really, connection queue)","OutboundTcpConnection","connection","=","getConnection","(","to",",","processedMessage",")",";","\/\/ write it","connection",".","enqueue","(","processedMessage",",","id",")",";","}"],"func_documentation_string":"Send a message to a given endpoint. This method adheres to the fire and forget\nstyle messaging.\n\n@param message messages to be sent.\n@param to      endpoint to which the message needs to be sent","func_documentation_tokens":["Send","a","message","to","a","given","endpoint",".","This","method","adheres","to","the","fire","and","forget","style","messaging","."],"label":0,"text":"Send a message to a given endpoint. This method adheres to the fire and forget\nstyle messaging.\n\n@param message messages to be sent.\n@param to      endpoint to which the message needs to be sent[SEP]public void sendOneWay(MessageOut message, int id, InetAddress to)\n    {\n        if (logger.isTraceEnabled())\n            logger.trace(FBUtilities.getBroadcastAddress() + \" sending \" + message.verb + \" to \" + id + \"@\" + to);\n\n        if (to.equals(FBUtilities.getBroadcastAddress()))\n            logger.trace(\"Message-to-self {} going over MessagingService\", message);\n\n        \/\/ message sinks are a testing hook\n        MessageOut processedMessage = SinkManager.processOutboundMessage(message, id, to);\n        if (processedMessage == null)\n        {\n            return;\n        }\n\n        \/\/ get pooled connection (really, connection queue)\n        OutboundTcpConnection connection = getConnection(to, processedMessage);\n\n        \/\/ write it\n        connection.enqueue(processedMessage, id);\n    }"}
{"func_code_string":"public String fixPropertyName(String name) {\n    if (\"float\".equalsIgnoreCase(name)) {\n      return \"cssFloat\";\n    } else if (\"for\".equalsIgnoreCase(name)) {\n      return \"htmlFor\";\n    }\n    return JsUtils.camelize(name);\n  }","func_code_tokens":["public","String","fixPropertyName","(","String","name",")","{","if","(","\"float\"",".","equalsIgnoreCase","(","name",")",")","{","return","\"cssFloat\"",";","}","else","if","(","\"for\"",".","equalsIgnoreCase","(","name",")",")","{","return","\"htmlFor\"",";","}","return","JsUtils",".","camelize","(","name",")",";","}"],"func_documentation_string":"Fix style property names.","func_documentation_tokens":["Fix","style","property","names","."],"label":0,"text":"Fix style property names.[SEP]public String fixPropertyName(String name) {\n    if (\"float\".equalsIgnoreCase(name)) {\n      return \"cssFloat\";\n    } else if (\"for\".equalsIgnoreCase(name)) {\n      return \"htmlFor\";\n    }\n    return JsUtils.camelize(name);\n  }"}
{"func_code_string":"private void updateCoordinates() {\n    \/\/ Top-left of heat map.\n    int x = margin + axisThickness + yAxisLabelSize.height;\n    x += (yValuesHorizontal ? yAxisValuesWidthMax : yAxisValuesHeight);\n    int y = titleSize.height + margin;\n    heatMapTL = new Point(x, y);\n\n    \/\/ Top-right of heat map.\n    x = heatMapTL.x + heatMapSize.width;\n    y = heatMapTL.y + heatMapSize.height;\n    heatMapBR = new Point(x, y);\n\n    \/\/ Centre of heat map.\n    x = heatMapTL.x + (heatMapSize.width \/ 2);\n    y = heatMapTL.y + (heatMapSize.height \/ 2);\n    heatMapC = new Point(x, y);\n  }","func_code_tokens":["private","void","updateCoordinates","(",")","{","\/\/ Top-left of heat map.","int","x","=","margin","+","axisThickness","+","yAxisLabelSize",".","height",";","x","+=","(","yValuesHorizontal","?","yAxisValuesWidthMax",":","yAxisValuesHeight",")",";","int","y","=","titleSize",".","height","+","margin",";","heatMapTL","=","new","Point","(","x",",","y",")",";","\/\/ Top-right of heat map.","x","=","heatMapTL",".","x","+","heatMapSize",".","width",";","y","=","heatMapTL",".","y","+","heatMapSize",".","height",";","heatMapBR","=","new","Point","(","x",",","y",")",";","\/\/ Centre of heat map.","x","=","heatMapTL",".","x","+","(","heatMapSize",".","width","\/","2",")",";","y","=","heatMapTL",".","y","+","(","heatMapSize",".","height","\/","2",")",";","heatMapC","=","new","Point","(","x",",","y",")",";","}"],"func_documentation_string":"\/*\nCalculates the co-ordinates of some key positions.","func_documentation_tokens":["\/","*","Calculates","the","co","-","ordinates","of","some","key","positions","."],"label":1,"text":"\/*\nCalculates the co-ordinates of some key positions.[SEP]private void updateCoordinates() {\n    \/\/ Top-left of heat map.\n    int x = margin + axisThickness + yAxisLabelSize.height;\n    x += (yValuesHorizontal ? yAxisValuesWidthMax : yAxisValuesHeight);\n    int y = titleSize.height + margin;\n    heatMapTL = new Point(x, y);\n\n    \/\/ Top-right of heat map.\n    x = heatMapTL.x + heatMapSize.width;\n    y = heatMapTL.y + heatMapSize.height;\n    heatMapBR = new Point(x, y);\n\n    \/\/ Centre of heat map.\n    x = heatMapTL.x + (heatMapSize.width \/ 2);\n    y = heatMapTL.y + (heatMapSize.height \/ 2);\n    heatMapC = new Point(x, y);\n  }"}
{"func_code_string":"public static String readTextFile(File file) throws IOException\n    {\n        \/\/create reader to file (with default encoding)\n        InputStream inputStream=new FileInputStream(file);\n        Reader reader=IOHelper.createReader(inputStream,null);\n\n        \/\/read text\n        String text=IOHelper.readTextStream(reader);\n        \n        return text;\n    }","func_code_tokens":["public","static","String","readTextFile","(","File","file",")","throws","IOException","{","\/\/create reader to file (with default encoding)","InputStream","inputStream","=","new","FileInputStream","(","file",")",";","Reader","reader","=","IOHelper",".","createReader","(","inputStream",",","null",")",";","\/\/read text","String","text","=","IOHelper",".","readTextStream","(","reader",")",";","return","text",";","}"],"func_documentation_string":"Reads the text from the file.\n\n@param   file\nThe text file\n@return  The text read from the provided file\n@throws  IOException\nAny IO exception","func_documentation_tokens":["Reads","the","text","from","the","file","."],"label":1,"text":"Reads the text from the file.\n\n@param   file\nThe text file\n@return  The text read from the provided file\n@throws  IOException\nAny IO exception[SEP]public static String readTextFile(File file) throws IOException\n    {\n        \/\/create reader to file (with default encoding)\n        InputStream inputStream=new FileInputStream(file);\n        Reader reader=IOHelper.createReader(inputStream,null);\n\n        \/\/read text\n        String text=IOHelper.readTextStream(reader);\n        \n        return text;\n    }"}
{"func_code_string":"private static boolean detectNameWordInSentenceByPosition(final List<Token> _text, final int _pos) {\n        boolean isFirstWord = false;\n        boolean nextWordIsName = false;\n        if (_pos == 0 || !isLetterOrDigit((_text.get(_pos - 1).text.charAt(0)))) {\n            isFirstWord = true;\n            \/\/noinspection SimplifiableIfStatement\n            if (_text.size() > _pos + 1) {\n                final String plus1 = _text.get(_pos + 1).text;\n                nextWordIsName = (\"of\".equalsIgnoreCase(plus1) || \"'s\".equalsIgnoreCase(plus1))\n                                 ? ((_text.size() > (_pos + 2)) && isName(_text.get(_pos + 2).text, false, false))\n                                 : isName(plus1, false, false);\n            }\n            else nextWordIsName = false;\n        }\n        \/\/noinspection UnnecessaryLocalVariable\n        final boolean isName = isName(_text.get(_pos).text, isFirstWord, nextWordIsName);\n\n        \/*\n        String wordType = dict.checkup(Strings.toEngLowerCase(_text.get(_pos));\n        if (isFirstWord && !isName && wordType != null && wordType.startsWith(\"JJ\")) {\n            \/\/ if the first word is determined not to be a name but it is an adj.,\n            \/\/ and if the second word is a name, we consider the first word to be a name as well.\n            if (isName(_text.get(_pos + 1), false))\n                return true;\n        }\n        *\/\n\n        return isName;\n    }","func_code_tokens":["private","static","boolean","detectNameWordInSentenceByPosition","(","final","List","<","Token",">","_text",",","final","int","_pos",")","{","boolean","isFirstWord","=","false",";","boolean","nextWordIsName","=","false",";","if","(","_pos","==","0","||","!","isLetterOrDigit","(","(","_text",".","get","(","_pos","-","1",")",".","text",".","charAt","(","0",")",")",")",")","{","isFirstWord","=","true",";","\/\/noinspection SimplifiableIfStatement","if","(","_text",".","size","(",")",">","_pos","+","1",")","{","final","String","plus1","=","_text",".","get","(","_pos","+","1",")",".","text",";","nextWordIsName","=","(","\"of\"",".","equalsIgnoreCase","(","plus1",")","||","\"'s\"",".","equalsIgnoreCase","(","plus1",")",")","?","(","(","_text",".","size","(",")",">","(","_pos","+","2",")",")","&&","isName","(","_text",".","get","(","_pos","+","2",")",".","text",",","false",",","false",")",")",":","isName","(","plus1",",","false",",","false",")",";","}","else","nextWordIsName","=","false",";","}","\/\/noinspection UnnecessaryLocalVariable","final","boolean","isName","=","isName","(","_text",".","get","(","_pos",")",".","text",",","isFirstWord",",","nextWordIsName",")",";","\/*\n        String wordType = dict.checkup(Strings.toEngLowerCase(_text.get(_pos));\n        if (isFirstWord && !isName && wordType != null && wordType.startsWith(\"JJ\")) {\n            \/\/ if the first word is determined not to be a name but it is an adj.,\n            \/\/ and if the second word is a name, we consider the first word to be a name as well.\n            if (isName(_text.get(_pos + 1), false))\n                return true;\n        }\n        *\/","return","isName",";","}"],"func_documentation_string":"Detects if a particular word in a sentence is a name.","func_documentation_tokens":["Detects","if","a","particular","word","in","a","sentence","is","a","name","."],"label":0,"text":"Detects if a particular word in a sentence is a name.[SEP]private static boolean detectNameWordInSentenceByPosition(final List<Token> _text, final int _pos) {\n        boolean isFirstWord = false;\n        boolean nextWordIsName = false;\n        if (_pos == 0 || !isLetterOrDigit((_text.get(_pos - 1).text.charAt(0)))) {\n            isFirstWord = true;\n            \/\/noinspection SimplifiableIfStatement\n            if (_text.size() > _pos + 1) {\n                final String plus1 = _text.get(_pos + 1).text;\n                nextWordIsName = (\"of\".equalsIgnoreCase(plus1) || \"'s\".equalsIgnoreCase(plus1))\n                                 ? ((_text.size() > (_pos + 2)) && isName(_text.get(_pos + 2).text, false, false))\n                                 : isName(plus1, false, false);\n            }\n            else nextWordIsName = false;\n        }\n        \/\/noinspection UnnecessaryLocalVariable\n        final boolean isName = isName(_text.get(_pos).text, isFirstWord, nextWordIsName);\n\n        \/*\n        String wordType = dict.checkup(Strings.toEngLowerCase(_text.get(_pos));\n        if (isFirstWord && !isName && wordType != null && wordType.startsWith(\"JJ\")) {\n            \/\/ if the first word is determined not to be a name but it is an adj.,\n            \/\/ and if the second word is a name, we consider the first word to be a name as well.\n            if (isName(_text.get(_pos + 1), false))\n                return true;\n        }\n        *\/\n\n        return isName;\n    }"}
{"func_code_string":"public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }","func_code_tokens":["public","static","int","toInteger","(","final","Boolean","bool",",","final","int","trueValue",",","final","int","falseValue",",","final","int","nullValue",")","{","if","(","bool","==","null",")","{","return","nullValue",";","}","return","bool",".","booleanValue","(",")","?","trueValue",":","falseValue",";","}"],"func_documentation_string":"<p>Converts a Boolean to an int specifying the conversion values.<\/p>\n\n<pre>\nBooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1\nBooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0\nBooleanUtils.toInteger(null, 1, 0, 2)          = 2\n<\/pre>\n\n@param bool  the Boolean to convert\n@param trueValue  the value to return if {@code true}\n@param falseValue  the value to return if {@code false}\n@param nullValue  the value to return if {@code null}\n@return the appropriate value","func_documentation_tokens":["<p",">","Converts","a","Boolean","to","an","int","specifying","the","conversion","values",".","<","\/","p",">"],"label":0,"text":"<p>Converts a Boolean to an int specifying the conversion values.<\/p>\n\n<pre>\nBooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1\nBooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0\nBooleanUtils.toInteger(null, 1, 0, 2)          = 2\n<\/pre>\n\n@param bool  the Boolean to convert\n@param trueValue  the value to return if {@code true}\n@param falseValue  the value to return if {@code false}\n@param nullValue  the value to return if {@code null}\n@return the appropriate value[SEP]public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }"}
{"func_code_string":"public static String reverse(final String str) {\n        if (str == null) {\n            return null;\n        }\n        return new StringBuilder(str).reverse().toString();\n    }","func_code_tokens":["public","static","String","reverse","(","final","String","str",")","{","if","(","str","==","null",")","{","return","null",";","}","return","new","StringBuilder","(","str",")",".","reverse","(",")",".","toString","(",")",";","}"],"func_documentation_string":"<p>Reverses a String as per {@link StringBuilder#reverse()}.<\/p>\n\n<p>A {@code null} String returns {@code null}.<\/p>\n\n<pre>\nStringUtils.reverse(null)  = null\nStringUtils.reverse(\"\")    = \"\"\nStringUtils.reverse(\"bat\") = \"tab\"\n<\/pre>\n\n@param str  the String to reverse, may be null\n@return the reversed String, {@code null} if null String input","func_documentation_tokens":["<p",">","Reverses","a","String","as","per","{","@link","StringBuilder#reverse","()","}",".","<","\/","p",">"],"label":1,"text":"<p>Reverses a String as per {@link StringBuilder#reverse()}.<\/p>\n\n<p>A {@code null} String returns {@code null}.<\/p>\n\n<pre>\nStringUtils.reverse(null)  = null\nStringUtils.reverse(\"\")    = \"\"\nStringUtils.reverse(\"bat\") = \"tab\"\n<\/pre>\n\n@param str  the String to reverse, may be null\n@return the reversed String, {@code null} if null String input[SEP]public static String reverse(final String str) {\n        if (str == null) {\n            return null;\n        }\n        return new StringBuilder(str).reverse().toString();\n    }"}
{"func_code_string":"public static void unzip(File file, File destDir) throws IOException {\n        if (!destDir.exists()) {\n            destDir.mkdir();\n        }\n        ZipInputStream zipIn = new ZipInputStream(new FileInputStream(file));\n        ZipEntry entry = zipIn.getNextEntry();\n        \/\/ iterates over entries in the zip file\n        while (entry != null) {\n            File entryFile = new File(destDir, entry.getName());\n            if (!entry.isDirectory()) {\n                \/\/ if the entry is a file, extracts it\n                extractFile(zipIn, entryFile);\n            } else {\n                \/\/ if the entry is a directory, make the directory\n                entryFile.mkdir();\n            }\n            zipIn.closeEntry();\n            entry = zipIn.getNextEntry();\n        }\n        zipIn.close();\n    }","func_code_tokens":["public","static","void","unzip","(","File","file",",","File","destDir",")","throws","IOException","{","if","(","!","destDir",".","exists","(",")",")","{","destDir",".","mkdir","(",")",";","}","ZipInputStream","zipIn","=","new","ZipInputStream","(","new","FileInputStream","(","file",")",")",";","ZipEntry","entry","=","zipIn",".","getNextEntry","(",")",";","\/\/ iterates over entries in the zip file","while","(","entry","!=","null",")","{","File","entryFile","=","new","File","(","destDir",",","entry",".","getName","(",")",")",";","if","(","!","entry",".","isDirectory","(",")",")","{","\/\/ if the entry is a file, extracts it","extractFile","(","zipIn",",","entryFile",")",";","}","else","{","\/\/ if the entry is a directory, make the directory","entryFile",".","mkdir","(",")",";","}","zipIn",".","closeEntry","(",")",";","entry","=","zipIn",".","getNextEntry","(",")",";","}","zipIn",".","close","(",")",";","}"],"func_documentation_string":"Extracts a zip file specified by the zipFilePath to a directory specified by\ndestDirectory (will be created if does not exists)","func_documentation_tokens":["Extracts","a","zip","file","specified","by","the","zipFilePath","to","a","directory","specified","by","destDirectory","(","will","be","created","if","does","not","exists",")"],"label":1,"text":"Extracts a zip file specified by the zipFilePath to a directory specified by\ndestDirectory (will be created if does not exists)[SEP]public static void unzip(File file, File destDir) throws IOException {\n        if (!destDir.exists()) {\n            destDir.mkdir();\n        }\n        ZipInputStream zipIn = new ZipInputStream(new FileInputStream(file));\n        ZipEntry entry = zipIn.getNextEntry();\n        \/\/ iterates over entries in the zip file\n        while (entry != null) {\n            File entryFile = new File(destDir, entry.getName());\n            if (!entry.isDirectory()) {\n                \/\/ if the entry is a file, extracts it\n                extractFile(zipIn, entryFile);\n            } else {\n                \/\/ if the entry is a directory, make the directory\n                entryFile.mkdir();\n            }\n            zipIn.closeEntry();\n            entry = zipIn.getNextEntry();\n        }\n        zipIn.close();\n    }"}
{"func_code_string":"public static <T> T pickRandom (List<T> values, T skip, Random r)\n    {\n        int size = values.size();\n        if (size < 2) {\n            throw new IllegalArgumentException(\n                \"Must have at least two elements [size=\" + size + \"]\");\n        }\n\n        int pick = r.nextInt(size - 1);\n        for (int ii = 0; ii < size; ii++) {\n            T val = values.get(ii);\n            if ((val != skip) && (pick-- == 0)) {\n                return val;\n            }\n        }\n        return null;\n    }","func_code_tokens":["public","static","<","T",">","T","pickRandom","(","List","<","T",">","values",",","T","skip",",","Random","r",")","{","int","size","=","values",".","size","(",")",";","if","(","size","<","2",")","{","throw","new","IllegalArgumentException","(","\"Must have at least two elements [size=\"","+","size","+","\"]\"",")",";","}","int","pick","=","r",".","nextInt","(","size","-","1",")",";","for","(","int","ii","=","0",";","ii","<","size",";","ii","++",")","{","T","val","=","values",".","get","(","ii",")",";","if","(","(","val","!=","skip",")","&&","(","pick","--","==","0",")",")","{","return","val",";","}","}","return","null",";","}"],"func_documentation_string":"Picks a random object from the supplied List. The specified skip object will be skipped when\nselecting a random value. The skipped object must exist exactly once in the List.\n\n@param r the random number generator to use.\n\n@return a randomly selected item.","func_documentation_tokens":["Picks","a","random","object","from","the","supplied","List",".","The","specified","skip","object","will","be","skipped","when","selecting","a","random","value",".","The","skipped","object","must","exist","exactly","once","in","the","List","."],"label":1,"text":"Picks a random object from the supplied List. The specified skip object will be skipped when\nselecting a random value. The skipped object must exist exactly once in the List.\n\n@param r the random number generator to use.\n\n@return a randomly selected item.[SEP]public static <T> T pickRandom (List<T> values, T skip, Random r)\n    {\n        int size = values.size();\n        if (size < 2) {\n            throw new IllegalArgumentException(\n                \"Must have at least two elements [size=\" + size + \"]\");\n        }\n\n        int pick = r.nextInt(size - 1);\n        for (int ii = 0; ii < size; ii++) {\n            T val = values.get(ii);\n            if ((val != skip) && (pick-- == 0)) {\n                return val;\n            }\n        }\n        return null;\n    }"}
{"func_code_string":"public static Properties readPropertiesFromFile(File file)\n      throws IOException {\n    try (FileInputStream fis = new FileInputStream(file)) {\n      Properties prop = new Properties();\n      prop.load(fis);\n      return prop;\n    }\n  }","func_code_tokens":["public","static","Properties","readPropertiesFromFile","(","File","file",")","throws","IOException","{","try","(","FileInputStream","fis","=","new","FileInputStream","(","file",")",")","{","Properties","prop","=","new","Properties","(",")",";","prop",".","load","(","fis",")",";","return","prop",";","}","}"],"func_documentation_string":"Reads the Properties from a file that was created by the\n{@link #writePropertiesToFile(Properties, File) writePropertiesToFile}\nmethod.\n\n@param file file to read the Properties object from.\n@return the Properties object in the file\n@throws IOException if an I\/O error occurs.","func_documentation_tokens":["Reads","the","Properties","from","a","file","that","was","created","by","the","{","@link","#writePropertiesToFile","(","Properties","File",")","writePropertiesToFile","}","method","."],"label":1,"text":"Reads the Properties from a file that was created by the\n{@link #writePropertiesToFile(Properties, File) writePropertiesToFile}\nmethod.\n\n@param file file to read the Properties object from.\n@return the Properties object in the file\n@throws IOException if an I\/O error occurs.[SEP]public static Properties readPropertiesFromFile(File file)\n      throws IOException {\n    try (FileInputStream fis = new FileInputStream(file)) {\n      Properties prop = new Properties();\n      prop.load(fis);\n      return prop;\n    }\n  }"}
{"func_code_string":"public static String replace(final String string, final String find, final String replacement) {\n\t\tint pos = string.indexOf(find);\n\t\t\/\/System.out.println(string+\": \"+find+\" at \"+pos);\n\t\tif (pos == -1) return string;\n\t\tStringBuilder SB = new StringBuilder();\n\t\tint lastpos = 0;\n\t\tfinal int findLen = find.length();\n\t\tdo {\n\t\t\tSB.append(string, lastpos, pos).append(replacement);\n\t\t\tlastpos = pos + findLen;\n\t\t\tpos = string.indexOf(find, lastpos);\n\t\t} while (pos != -1);\n\t\tint len = string.length();\n\t\tif(lastpos<len) SB.append(string, lastpos, len);\n\t\treturn SB.toString();\n\t}","func_code_tokens":["public","static","String","replace","(","final","String","string",",","final","String","find",",","final","String","replacement",")","{","int","pos","=","string",".","indexOf","(","find",")",";","\/\/System.out.println(string+\": \"+find+\" at \"+pos);","if","(","pos","==","-","1",")","return","string",";","StringBuilder","SB","=","new","StringBuilder","(",")",";","int","lastpos","=","0",";","final","int","findLen","=","find",".","length","(",")",";","do","{","SB",".","append","(","string",",","lastpos",",","pos",")",".","append","(","replacement",")",";","lastpos","=","pos","+","findLen",";","pos","=","string",".","indexOf","(","find",",","lastpos",")",";","}","while","(","pos","!=","-","1",")",";","int","len","=","string",".","length","(",")",";","if","(","lastpos","<","len",")","SB",".","append","(","string",",","lastpos",",","len",")",";","return","SB",".","toString","(",")",";","}"],"func_documentation_string":"Replaces all occurrences of a String with a String\nPlease consider the variant with the Appendable for higher performance.","func_documentation_tokens":["Replaces","all","occurrences","of","a","String","with","a","String","Please","consider","the","variant","with","the","Appendable","for","higher","performance","."],"label":0,"text":"Replaces all occurrences of a String with a String\nPlease consider the variant with the Appendable for higher performance.[SEP]public static String replace(final String string, final String find, final String replacement) {\n\t\tint pos = string.indexOf(find);\n\t\t\/\/System.out.println(string+\": \"+find+\" at \"+pos);\n\t\tif (pos == -1) return string;\n\t\tStringBuilder SB = new StringBuilder();\n\t\tint lastpos = 0;\n\t\tfinal int findLen = find.length();\n\t\tdo {\n\t\t\tSB.append(string, lastpos, pos).append(replacement);\n\t\t\tlastpos = pos + findLen;\n\t\t\tpos = string.indexOf(find, lastpos);\n\t\t} while (pos != -1);\n\t\tint len = string.length();\n\t\tif(lastpos<len) SB.append(string, lastpos, len);\n\t\treturn SB.toString();\n\t}"}
{"func_code_string":"public byte[] getHardwareAddress()\n  {\n    if (CurrentTime.isTest() || System.getProperty(\"test.mac\") != null) {\n      return new byte[] { 10, 0, 0, 0, 0, 10 };\n    }\n    \n    for (NetworkInterfaceBase nic : getNetworkInterfaces()) {\n      if (! nic.isLoopback()) {\n        return nic.getHardwareAddress();\n      }\n    }\n    \n    try {\n      InetAddress localHost = InetAddress.getLocalHost();\n      \n      return localHost.getAddress();\n    } catch (Exception e) {\n      log.log(Level.FINER, e.toString(), e);\n    }\n    \n    return new byte[0];\n  }","func_code_tokens":["public","byte","[","]","getHardwareAddress","(",")","{","if","(","CurrentTime",".","isTest","(",")","||","System",".","getProperty","(","\"test.mac\"",")","!=","null",")","{","return","new","byte","[","]","{","10",",","0",",","0",",","0",",","0",",","10","}",";","}","for","(","NetworkInterfaceBase","nic",":","getNetworkInterfaces","(",")",")","{","if","(","!","nic",".","isLoopback","(",")",")","{","return","nic",".","getHardwareAddress","(",")",";","}","}","try","{","InetAddress","localHost","=","InetAddress",".","getLocalHost","(",")",";","return","localHost",".","getAddress","(",")",";","}","catch","(","Exception","e",")","{","log",".","log","(","Level",".","FINER",",","e",".","toString","(",")",",","e",")",";","}","return","new","byte","[","0","]",";","}"],"func_documentation_string":"Returns a unique identifying byte array for the server, generally\nthe mac address.","func_documentation_tokens":["Returns","a","unique","identifying","byte","array","for","the","server","generally","the","mac","address","."],"label":1,"text":"Returns a unique identifying byte array for the server, generally\nthe mac address.[SEP]public byte[] getHardwareAddress()\n  {\n    if (CurrentTime.isTest() || System.getProperty(\"test.mac\") != null) {\n      return new byte[] { 10, 0, 0, 0, 0, 10 };\n    }\n    \n    for (NetworkInterfaceBase nic : getNetworkInterfaces()) {\n      if (! nic.isLoopback()) {\n        return nic.getHardwareAddress();\n      }\n    }\n    \n    try {\n      InetAddress localHost = InetAddress.getLocalHost();\n      \n      return localHost.getAddress();\n    } catch (Exception e) {\n      log.log(Level.FINER, e.toString(), e);\n    }\n    \n    return new byte[0];\n  }"}
{"func_code_string":"public void setUnacceptable(E element) {\r\n\r\n    Ranking ranking = this.map.get(element);\r\n    if (ranking == null) {\r\n      ranking = new Ranking();\r\n      this.map.put(element, ranking);\r\n    }\r\n    ranking.setUnacceptable();\r\n  }","func_code_tokens":["public","void","setUnacceptable","(","E","element",")","{","Ranking","ranking","=","this",".","map",".","get","(","element",")",";","if","(","ranking","==","null",")","{","ranking","=","new","Ranking","(",")",";","this",".","map",".","put","(","element",",","ranking",")",";","}","ranking",".","setUnacceptable","(",")",";","}"],"func_documentation_string":"This method ranks the given {@code element} as {@link #RANK_UNACCEPTABLE unacceptable}. After the call of this\nmethod the {@link #getRank(Object) rank} of the given {@code element} is set to {@link #RANK_UNACCEPTABLE} and can\nNOT be changed again.\n\n@param element is the unacceptable element.","func_documentation_tokens":["This","method","ranks","the","given","{","@code","element","}","as","{","@link","#RANK_UNACCEPTABLE","unacceptable","}",".","After","the","call","of","this","method","the","{","@link","#getRank","(","Object",")","rank","}","of","the","given","{","@code","element","}","is","set","to","{","@link","#RANK_UNACCEPTABLE","}","and","can","NOT","be","changed","again","."],"label":0,"text":"This method ranks the given {@code element} as {@link #RANK_UNACCEPTABLE unacceptable}. After the call of this\nmethod the {@link #getRank(Object) rank} of the given {@code element} is set to {@link #RANK_UNACCEPTABLE} and can\nNOT be changed again.\n\n@param element is the unacceptable element.[SEP]public void setUnacceptable(E element) {\r\n\r\n    Ranking ranking = this.map.get(element);\r\n    if (ranking == null) {\r\n      ranking = new Ranking();\r\n      this.map.put(element, ranking);\r\n    }\r\n    ranking.setUnacceptable();\r\n  }"}
{"func_code_string":"public List<E> getBetterOrEqual(int threshold) {\r\n\r\n    List<E> bests = new ArrayList<>();\r\n    for (E element : this.map.keySet()) {\r\n      Ranking ranking = this.map.get(element);\r\n      if ((ranking != null) && (ranking.rank >= threshold)) {\r\n        bests.add(element);\r\n      }\r\n    }\r\n    return bests;\r\n  }","func_code_tokens":["public","List","<","E",">","getBetterOrEqual","(","int","threshold",")","{","List","<","E",">","bests","=","new","ArrayList","<>","(",")",";","for","(","E","element",":","this",".","map",".","keySet","(",")",")","{","Ranking","ranking","=","this",".","map",".","get","(","element",")",";","if","(","(","ranking","!=","null",")","&&","(","ranking",".","rank",">=","threshold",")",")","{","bests",".","add","(","element",")",";","}","}","return","bests",";","}"],"func_documentation_string":"This method gets all elements with a {@link #getRank(Object) rank} greater or equal to the given {@code threshold}.\n\n@param threshold is the minimum accepted {@link #getRank(Object) rank}.\n@return the list with all elements better or equal to the given {@code threshold}.","func_documentation_tokens":["This","method","gets","all","elements","with","a","{","@link","#getRank","(","Object",")","rank","}","greater","or","equal","to","the","given","{","@code","threshold","}","."],"label":0,"text":"This method gets all elements with a {@link #getRank(Object) rank} greater or equal to the given {@code threshold}.\n\n@param threshold is the minimum accepted {@link #getRank(Object) rank}.\n@return the list with all elements better or equal to the given {@code threshold}.[SEP]public List<E> getBetterOrEqual(int threshold) {\r\n\r\n    List<E> bests = new ArrayList<>();\r\n    for (E element : this.map.keySet()) {\r\n      Ranking ranking = this.map.get(element);\r\n      if ((ranking != null) && (ranking.rank >= threshold)) {\r\n        bests.add(element);\r\n      }\r\n    }\r\n    return bests;\r\n  }"}
{"func_code_string":"public static void copyToClipboard(String text) {\r\n\t\tfinal StringSelection stringSelection = new StringSelection(text);\r\n\t\tfinal Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\r\n\t\tclipboard.setContents(stringSelection, stringSelection);\r\n\t}","func_code_tokens":["public","static","void","copyToClipboard","(","String","text",")","{","final","StringSelection","stringSelection","=","new","StringSelection","(","text",")",";","final","Clipboard","clipboard","=","Toolkit",".","getDefaultToolkit","(",")",".","getSystemClipboard","(",")",";","clipboard",".","setContents","(","stringSelection",",","stringSelection",")",";","}"],"func_documentation_string":"Copy to clipboard.\n\n@param text the text","func_documentation_tokens":["Copy","to","clipboard","."],"label":1,"text":"Copy to clipboard.\n\n@param text the text[SEP]public static void copyToClipboard(String text) {\r\n\t\tfinal StringSelection stringSelection = new StringSelection(text);\r\n\t\tfinal Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\r\n\t\tclipboard.setContents(stringSelection, stringSelection);\r\n\t}"}
{"func_code_string":"private boolean readCMAP(FontFileReader in) throws IOException {\n\n        unicodeMapping = new java.util.ArrayList();\n\n        \/\/Read CMAP table and correct mtxTab.index\n        int mtxPtr = 0;\n\n        seekTab(in, \"cmap\", 2);\n        int numCMap = in.readTTFUShort();    \/\/ Number of cmap subtables\n        long cmapUniOffset = 0;\n\n        log.info(numCMap + \" cmap tables\");\n\n        \/\/Read offset for all tables. We are only interested in the unicode table\n        for (int i = 0; i < numCMap; i++) {\n            int cmapPID = in.readTTFUShort();\n            int cmapEID = in.readTTFUShort();\n            long cmapOffset = in.readTTFULong();\n\n            log.debug(\"Platform ID: \" + cmapPID + \" Encoding: \" + cmapEID);\n\n            if (cmapPID == 3 && cmapEID == 1) {\n                cmapUniOffset = cmapOffset;\n            }\n        }\n\n        if (cmapUniOffset <= 0) {\n            log.fatal(\"Unicode cmap table not present\");\n            log.fatal(\"Unsupported format: Aborting\");\n            return false;\n        }\n\n        \/\/ Read unicode cmap\n        seekTab(in, \"cmap\", cmapUniOffset);\n        int cmapFormat = in.readTTFUShort();\n        \/*int cmap_length =*\/ in.readTTFUShort(); \/\/skip cmap length\n\n        log.info(\"CMAP format: \" + cmapFormat);\n\n        if (cmapFormat == 4) {\n            in.skip(2);    \/\/ Skip version number\n            int cmapSegCountX2 = in.readTTFUShort();\n            int cmapSearchRange = in.readTTFUShort();\n            int cmapEntrySelector = in.readTTFUShort();\n            int cmapRangeShift = in.readTTFUShort();\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"segCountX2   : \" + cmapSegCountX2);\n                log.debug(\"searchRange  : \" + cmapSearchRange);\n                log.debug(\"entrySelector: \" + cmapEntrySelector);\n                log.debug(\"rangeShift   : \" + cmapRangeShift);\n            }\n\n\n            int[] cmapEndCounts = new int[cmapSegCountX2 \/ 2];\n            int[] cmapStartCounts = new int[cmapSegCountX2 \/ 2];\n            int[] cmapDeltas = new int[cmapSegCountX2 \/ 2];\n            int[] cmapRangeOffsets = new int[cmapSegCountX2 \/ 2];\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapEndCounts[i] = in.readTTFUShort();\n            }\n\n            in.skip(2);    \/\/ Skip reservedPad\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapStartCounts[i] = in.readTTFUShort();\n            }\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapDeltas[i] = in.readTTFShort();\n            }\n\n            \/\/int startRangeOffset = in.getCurrentPos();\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapRangeOffsets[i] = in.readTTFUShort();\n            }\n\n            int glyphIdArrayOffset = in.getCurrentPos();\n\n            \/\/ Insert the unicode id for the glyphs in mtxTab\n            \/\/ and fill in the cmaps ArrayList\n\n            for (int i = 0; i < cmapStartCounts.length; i++) {\n\n                if (log.isTraceEnabled()) {\n                    log.trace(i + \": \" + cmapStartCounts[i]\n                                                         + \" - \" + cmapEndCounts[i]);\n                }\n\n                for (int j = cmapStartCounts[i]; j <= cmapEndCounts[i]; j++) {\n\n                    \/\/ Update lastChar\n                    if (j < 256 && j > lastChar) {\n                        lastChar = (short)j;\n                    }\n\n                    if (mtxPtr < mtxTab.length) {\n                        int glyphIdx;\n                        \/\/ the last character 65535 = .notdef\n                        \/\/ may have a range offset\n                        if (cmapRangeOffsets[i] != 0 && j != 65535) {\n                            int glyphOffset = glyphIdArrayOffset\n                                + ((cmapRangeOffsets[i] \/ 2)\n                                    + (j - cmapStartCounts[i])\n                                    + (i)\n                                    - cmapSegCountX2 \/ 2) * 2;\n                            in.seekSet(glyphOffset);\n                            glyphIdx = (in.readTTFUShort() + cmapDeltas[i])\n                                       & 0xffff;\n\n                            unicodeMapping.add(new UnicodeMapping(glyphIdx, j));\n                            mtxTab[glyphIdx].getUnicodeIndex().add(new Integer(j));\n\n\n                            \/\/ Also add winAnsiWidth\n                            List v = (List)ansiIndex.get(new Integer(j));\n                            if (v != null) {\n                                Iterator e = v.listIterator();\n                                while (e.hasNext()) {\n                                    Integer aIdx = (Integer)e.next();\n                                    ansiWidth[aIdx.intValue()] \n                                        = mtxTab[glyphIdx].getWx();\n\n                                    if (log.isTraceEnabled()) {\n                                        log.trace(\"Added width \"\n                                                + mtxTab[glyphIdx].getWx()\n                                                + \" uni: \" + j\n                                                + \" ansi: \" + aIdx.intValue());\n                                    }\n                                }\n                            }\n\n                            if (log.isTraceEnabled()) {\n                                log.trace(\"Idx: \"\n                                        + glyphIdx\n                                        + \" Delta: \" + cmapDeltas[i]\n                                        + \" Unicode: \" + j\n                                        + \" name: \" + mtxTab[glyphIdx].getName());\n                            }\n                        } else {\n                            glyphIdx = (j + cmapDeltas[i]) & 0xffff;\n\n                            if (glyphIdx < mtxTab.length) {\n                                mtxTab[glyphIdx].getUnicodeIndex().add(new Integer(j));\n                            } else {\n                                log.debug(\"Glyph \" + glyphIdx\n                                                   + \" out of range: \"\n                                                   + mtxTab.length);\n                            }\n\n                            unicodeMapping.add(new UnicodeMapping(glyphIdx, j));\n                            if (glyphIdx < mtxTab.length) {\n                                mtxTab[glyphIdx].getUnicodeIndex().add(new Integer(j));\n                            } else {\n                                log.debug(\"Glyph \" + glyphIdx\n                                                   + \" out of range: \"\n                                                   + mtxTab.length);\n                            }\n\n                            \/\/ Also add winAnsiWidth\n                            List v = (List)ansiIndex.get(new Integer(j));\n                            if (v != null) {\n                                Iterator e = v.listIterator();\n                                while (e.hasNext()) {\n                                    Integer aIdx = (Integer)e.next();\n                                    ansiWidth[aIdx.intValue()] = mtxTab[glyphIdx].getWx();\n                                }\n                            }\n\n                            \/\/getLogger().debug(\"IIdx: \" +\n                            \/\/    mtxPtr +\n                            \/\/    \" Delta: \" + cmap_deltas[i] +\n                            \/\/    \" Unicode: \" + j +\n                            \/\/    \" name: \" +\n                            \/\/    mtxTab[(j+cmap_deltas[i]) & 0xffff].name);\n\n                        }\n                        if (glyphIdx < mtxTab.length) {\n                            if (mtxTab[glyphIdx].getUnicodeIndex().size() < 2) {\n                                mtxPtr++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }","func_code_tokens":["private","boolean","readCMAP","(","FontFileReader","in",")","throws","IOException","{","unicodeMapping","=","new","java",".","util",".","ArrayList","(",")",";","\/\/Read CMAP table and correct mtxTab.index","int","mtxPtr","=","0",";","seekTab","(","in",",","\"cmap\"",",","2",")",";","int","numCMap","=","in",".","readTTFUShort","(",")",";","\/\/ Number of cmap subtables","long","cmapUniOffset","=","0",";","log",".","info","(","numCMap","+","\" cmap tables\"",")",";","\/\/Read offset for all tables. We are only interested in the unicode table","for","(","int","i","=","0",";","i","<","numCMap",";","i","++",")","{","int","cmapPID","=","in",".","readTTFUShort","(",")",";","int","cmapEID","=","in",".","readTTFUShort","(",")",";","long","cmapOffset","=","in",".","readTTFULong","(",")",";","log",".","debug","(","\"Platform ID: \"","+","cmapPID","+","\" Encoding: \"","+","cmapEID",")",";","if","(","cmapPID","==","3","&&","cmapEID","==","1",")","{","cmapUniOffset","=","cmapOffset",";","}","}","if","(","cmapUniOffset","<=","0",")","{","log",".","fatal","(","\"Unicode cmap table not present\"",")",";","log",".","fatal","(","\"Unsupported format: Aborting\"",")",";","return","false",";","}","\/\/ Read unicode cmap","seekTab","(","in",",","\"cmap\"",",","cmapUniOffset",")",";","int","cmapFormat","=","in",".","readTTFUShort","(",")",";","\/*int cmap_length =*\/","in",".","readTTFUShort","(",")",";","\/\/skip cmap length","log",".","info","(","\"CMAP format: \"","+","cmapFormat",")",";","if","(","cmapFormat","==","4",")","{","in",".","skip","(","2",")",";","\/\/ Skip version number","int","cmapSegCountX2","=","in",".","readTTFUShort","(",")",";","int","cmapSearchRange","=","in",".","readTTFUShort","(",")",";","int","cmapEntrySelector","=","in",".","readTTFUShort","(",")",";","int","cmapRangeShift","=","in",".","readTTFUShort","(",")",";","if","(","log",".","isDebugEnabled","(",")",")","{","log",".","debug","(","\"segCountX2   : \"","+","cmapSegCountX2",")",";","log",".","debug","(","\"searchRange  : \"","+","cmapSearchRange",")",";","log",".","debug","(","\"entrySelector: \"","+","cmapEntrySelector",")",";","log",".","debug","(","\"rangeShift   : \"","+","cmapRangeShift",")",";","}","int","[","]","cmapEndCounts","=","new","int","[","cmapSegCountX2","\/","2","]",";","int","[","]","cmapStartCounts","=","new","int","[","cmapSegCountX2","\/","2","]",";","int","[","]","cmapDeltas","=","new","int","[","cmapSegCountX2","\/","2","]",";","int","[","]","cmapRangeOffsets","=","new","int","[","cmapSegCountX2","\/","2","]",";","for","(","int","i","=","0",";","i","<","(","cmapSegCountX2","\/","2",")",";","i","++",")","{","cmapEndCounts","[","i","]","=","in",".","readTTFUShort","(",")",";","}","in",".","skip","(","2",")",";","\/\/ Skip reservedPad","for","(","int","i","=","0",";","i","<","(","cmapSegCountX2","\/","2",")",";","i","++",")","{","cmapStartCounts","[","i","]","=","in",".","readTTFUShort","(",")",";","}","for","(","int","i","=","0",";","i","<","(","cmapSegCountX2","\/","2",")",";","i","++",")","{","cmapDeltas","[","i","]","=","in",".","readTTFShort","(",")",";","}","\/\/int startRangeOffset = in.getCurrentPos();","for","(","int","i","=","0",";","i","<","(","cmapSegCountX2","\/","2",")",";","i","++",")","{","cmapRangeOffsets","[","i","]","=","in",".","readTTFUShort","(",")",";","}","int","glyphIdArrayOffset","=","in",".","getCurrentPos","(",")",";","\/\/ Insert the unicode id for the glyphs in mtxTab","\/\/ and fill in the cmaps ArrayList","for","(","int","i","=","0",";","i","<","cmapStartCounts",".","length",";","i","++",")","{","if","(","log",".","isTraceEnabled","(",")",")","{","log",".","trace","(","i","+","\": \"","+","cmapStartCounts","[","i","]","+","\" - \"","+","cmapEndCounts","[","i","]",")",";","}","for","(","int","j","=","cmapStartCounts","[","i","]",";","j","<=","cmapEndCounts","[","i","]",";","j","++",")","{","\/\/ Update lastChar","if","(","j","<","256","&&","j",">","lastChar",")","{","lastChar","=","(","short",")","j",";","}","if","(","mtxPtr","<","mtxTab",".","length",")","{","int","glyphIdx",";","\/\/ the last character 65535 = .notdef","\/\/ may have a range offset","if","(","cmapRangeOffsets","[","i","]","!=","0","&&","j","!=","65535",")","{","int","glyphOffset","=","glyphIdArrayOffset","+","(","(","cmapRangeOffsets","[","i","]","\/","2",")","+","(","j","-","cmapStartCounts","[","i","]",")","+","(","i",")","-","cmapSegCountX2","\/","2",")","*","2",";","in",".","seekSet","(","glyphOffset",")",";","glyphIdx","=","(","in",".","readTTFUShort","(",")","+","cmapDeltas","[","i","]",")","&","0xffff",";","unicodeMapping",".","add","(","new","UnicodeMapping","(","glyphIdx",",","j",")",")",";","mtxTab","[","glyphIdx","]",".","getUnicodeIndex","(",")",".","add","(","new","Integer","(","j",")",")",";","\/\/ Also add winAnsiWidth","List","v","=","(","List",")","ansiIndex",".","get","(","new","Integer","(","j",")",")",";","if","(","v","!=","null",")","{","Iterator","e","=","v",".","listIterator","(",")",";","while","(","e",".","hasNext","(",")",")","{","Integer","aIdx","=","(","Integer",")","e",".","next","(",")",";","ansiWidth","[","aIdx",".","intValue","(",")","]","=","mtxTab","[","glyphIdx","]",".","getWx","(",")",";","if","(","log",".","isTraceEnabled","(",")",")","{","log",".","trace","(","\"Added width \"","+","mtxTab","[","glyphIdx","]",".","getWx","(",")","+","\" uni: \"","+","j","+","\" ansi: \"","+","aIdx",".","intValue","(",")",")",";","}","}","}","if","(","log",".","isTraceEnabled","(",")",")","{","log",".","trace","(","\"Idx: \"","+","glyphIdx","+","\" Delta: \"","+","cmapDeltas","[","i","]","+","\" Unicode: \"","+","j","+","\" name: \"","+","mtxTab","[","glyphIdx","]",".","getName","(",")",")",";","}","}","else","{","glyphIdx","=","(","j","+","cmapDeltas","[","i","]",")","&","0xffff",";","if","(","glyphIdx","<","mtxTab",".","length",")","{","mtxTab","[","glyphIdx","]",".","getUnicodeIndex","(",")",".","add","(","new","Integer","(","j",")",")",";","}","else","{","log",".","debug","(","\"Glyph \"","+","glyphIdx","+","\" out of range: \"","+","mtxTab",".","length",")",";","}","unicodeMapping",".","add","(","new","UnicodeMapping","(","glyphIdx",",","j",")",")",";","if","(","glyphIdx","<","mtxTab",".","length",")","{","mtxTab","[","glyphIdx","]",".","getUnicodeIndex","(",")",".","add","(","new","Integer","(","j",")",")",";","}","else","{","log",".","debug","(","\"Glyph \"","+","glyphIdx","+","\" out of range: \"","+","mtxTab",".","length",")",";","}","\/\/ Also add winAnsiWidth","List","v","=","(","List",")","ansiIndex",".","get","(","new","Integer","(","j",")",")",";","if","(","v","!=","null",")","{","Iterator","e","=","v",".","listIterator","(",")",";","while","(","e",".","hasNext","(",")",")","{","Integer","aIdx","=","(","Integer",")","e",".","next","(",")",";","ansiWidth","[","aIdx",".","intValue","(",")","]","=","mtxTab","[","glyphIdx","]",".","getWx","(",")",";","}","}","\/\/getLogger().debug(\"IIdx: \" +","\/\/    mtxPtr +","\/\/    \" Delta: \" + cmap_deltas[i] +","\/\/    \" Unicode: \" + j +","\/\/    \" name: \" +","\/\/    mtxTab[(j+cmap_deltas[i]) & 0xffff].name);","}","if","(","glyphIdx","<","mtxTab",".","length",")","{","if","(","mtxTab","[","glyphIdx","]",".","getUnicodeIndex","(",")",".","size","(",")","<","2",")","{","mtxPtr","++",";","}","}","}","}","}","}","return","true",";","}"],"func_documentation_string":"Read the cmap table,\nreturn false if the table is not present or only unsupported\ntables are present. Currently only unicode cmaps are supported.\nSet the unicodeIndex in the TTFMtxEntries and fills in the\ncmaps vector.\n\n@param in The reader to get the table from\n@return True if the table has been read\n@throws IOException Indicates a failure to read the table","func_documentation_tokens":["Read","the","cmap","table","return","false","if","the","table","is","not","present","or","only","unsupported","tables","are","present",".","Currently","only","unicode","cmaps","are","supported",".","Set","the","unicodeIndex","in","the","TTFMtxEntries","and","fills","in","the","cmaps","vector","."],"label":0,"text":"Read the cmap table,\nreturn false if the table is not present or only unsupported\ntables are present. Currently only unicode cmaps are supported.\nSet the unicodeIndex in the TTFMtxEntries and fills in the\ncmaps vector.\n\n@param in The reader to get the table from\n@return True if the table has been read\n@throws IOException Indicates a failure to read the table[SEP]private boolean readCMAP(FontFileReader in) throws IOException {\n\n        unicodeMapping = new java.util.ArrayList();\n\n        \/\/Read CMAP table and correct mtxTab.index\n        int mtxPtr = 0;\n\n        seekTab(in, \"cmap\", 2);\n        int numCMap = in.readTTFUShort();    \/\/ Number of cmap subtables\n        long cmapUniOffset = 0;\n\n        log.info(numCMap + \" cmap tables\");\n\n        \/\/Read offset for all tables. We are only interested in the unicode table\n        for (int i = 0; i < numCMap; i++) {\n            int cmapPID = in.readTTFUShort();\n            int cmapEID = in.readTTFUShort();\n            long cmapOffset = in.readTTFULong();\n\n            log.debug(\"Platform ID: \" + cmapPID + \" Encoding: \" + cmapEID);\n\n            if (cmapPID == 3 && cmapEID == 1) {\n                cmapUniOffset = cmapOffset;\n            }\n        }\n\n        if (cmapUniOffset <= 0) {\n            log.fatal(\"Unicode cmap table not present\");\n            log.fatal(\"Unsupported format: Aborting\");\n            return false;\n        }\n\n        \/\/ Read unicode cmap\n        seekTab(in, \"cmap\", cmapUniOffset);\n        int cmapFormat = in.readTTFUShort();\n        \/*int cmap_length =*\/ in.readTTFUShort(); \/\/skip cmap length\n\n        log.info(\"CMAP format: \" + cmapFormat);\n\n        if (cmapFormat == 4) {\n            in.skip(2);    \/\/ Skip version number\n            int cmapSegCountX2 = in.readTTFUShort();\n            int cmapSearchRange = in.readTTFUShort();\n            int cmapEntrySelector = in.readTTFUShort();\n            int cmapRangeShift = in.readTTFUShort();\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"segCountX2   : \" + cmapSegCountX2);\n                log.debug(\"searchRange  : \" + cmapSearchRange);\n                log.debug(\"entrySelector: \" + cmapEntrySelector);\n                log.debug(\"rangeShift   : \" + cmapRangeShift);\n            }\n\n\n            int[] cmapEndCounts = new int[cmapSegCountX2 \/ 2];\n            int[] cmapStartCounts = new int[cmapSegCountX2 \/ 2];\n            int[] cmapDeltas = new int[cmapSegCountX2 \/ 2];\n            int[] cmapRangeOffsets = new int[cmapSegCountX2 \/ 2];\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapEndCounts[i] = in.readTTFUShort();\n            }\n\n            in.skip(2);    \/\/ Skip reservedPad\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapStartCounts[i] = in.readTTFUShort();\n            }\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapDeltas[i] = in.readTTFShort();\n            }\n\n            \/\/int startRangeOffset = in.getCurrentPos();\n\n            for (int i = 0; i < (cmapSegCountX2 \/ 2); i++) {\n                cmapRangeOffsets[i] = in.readTTFUShort();\n            }\n\n            int glyphIdArrayOffset = in.getCurrentPos();\n\n            \/\/ Insert the unicode id for the glyphs in mtxTab\n            \/\/ and fill in the cmaps ArrayList\n\n            for (int i = 0; i < cmapStartCounts.length; i++) {\n\n                if (log.isTraceEnabled()) {\n                    log.trace(i + \": \" + cmapStartCounts[i]\n                                                         + \" - \" + cmapEndCounts[i]);\n                }\n\n                for (int j = cmapStartCounts[i]; j <= cmapEndCounts[i]; j++) {\n\n                    \/\/ Update lastChar\n                    if (j < 256 && j > lastChar) {\n                        lastChar = (short)j;\n                    }\n\n                    if (mtxPtr < mtxTab.length) {\n                        int glyphIdx;\n                        \/\/ the last character 65535 = .notdef\n                        \/\/ may have a range offset\n                        if (cmapRangeOffsets[i] != 0 && j != 65535) {\n                            int glyphOffset = glyphIdArrayOffset\n                                + ((cmapRangeOffsets[i] \/ 2)\n                                    + (j - cmapStartCounts[i])\n                                    + (i)\n                                    - cmapSegCountX2 \/ 2) * 2;\n                            in.seekSet(glyphOffset);\n                            glyphIdx = (in.readTTFUShort() + cmapDeltas[i])\n                                       & 0xffff;\n\n                            unicodeMapping.add(new UnicodeMapping(glyphIdx, j));\n                            mtxTab[glyphIdx].getUnicodeIndex().add(new Integer(j));\n\n\n                            \/\/ Also add winAnsiWidth\n                            List v = (List)ansiIndex.get(new Integer(j));\n                            if (v != null) {\n                                Iterator e = v.listIterator();\n                                while (e.hasNext()) {\n                                    Integer aIdx = (Integer)e.next();\n                                    ansiWidth[aIdx.intValue()] \n                                        = mtxTab[glyphIdx].getWx();\n\n                                    if (log.isTraceEnabled()) {\n                                        log.trace(\"Added width \"\n                                                + mtxTab[glyphIdx].getWx()\n                                                + \" uni: \" + j\n                                                + \" ansi: \" + aIdx.intValue());\n                                    }\n                                }\n                            }\n\n                            if (log.isTraceEnabled()) {\n                                log.trace(\"Idx: \"\n                                        + glyphIdx\n                                        + \" Delta: \" + cmapDeltas[i]\n                                        + \" Unicode: \" + j\n                                        + \" name: \" + mtxTab[glyphIdx].getName());\n                            }\n                        } else {\n                            glyphIdx = (j + cmapDeltas[i]) & 0xffff;\n\n                            if (glyphIdx < mtxTab.length) {\n                                mtxTab[glyphIdx].getUnicodeIndex().add(new Integer(j));\n                            } else {\n                                log.debug(\"Glyph \" + glyphIdx\n                                                   + \" out of range: \"\n                                                   + mtxTab.length);\n                            }\n\n                            unicodeMapping.add(new UnicodeMapping(glyphIdx, j));\n                            if (glyphIdx < mtxTab.length) {\n                                mtxTab[glyphIdx].getUnicodeIndex().add(new Integer(j));\n                            } else {\n                                log.debug(\"Glyph \" + glyphIdx\n                                                   + \" out of range: \"\n                                                   + mtxTab.length);\n                            }\n\n                            \/\/ Also add winAnsiWidth\n                            List v = (List)ansiIndex.get(new Integer(j));\n                            if (v != null) {\n                                Iterator e = v.listIterator();\n                                while (e.hasNext()) {\n                                    Integer aIdx = (Integer)e.next();\n                                    ansiWidth[aIdx.intValue()] = mtxTab[glyphIdx].getWx();\n                                }\n                            }\n\n                            \/\/getLogger().debug(\"IIdx: \" +\n                            \/\/    mtxPtr +\n                            \/\/    \" Delta: \" + cmap_deltas[i] +\n                            \/\/    \" Unicode: \" + j +\n                            \/\/    \" name: \" +\n                            \/\/    mtxTab[(j+cmap_deltas[i]) & 0xffff].name);\n\n                        }\n                        if (glyphIdx < mtxTab.length) {\n                            if (mtxTab[glyphIdx].getUnicodeIndex().size() < 2) {\n                                mtxPtr++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }"}
{"func_code_string":"private void linkToEmitter(String name, LinearInterpolator interpol) {\r\n\t\t\/\/ put to value map\r\n\t\tvalueMap.put(name, interpol);\r\n\r\n\t\t\/\/ now update the checkbox to represent the state of the given\r\n\t\t\/\/ interpolator\r\n\t\tboolean checked = interpol.isActive();\r\n\t\tJCheckBox enableControl = (JCheckBox) valueNameToControl.get(name);\r\n\t\tenableControl.setSelected(false);\r\n\t\tif (checked)\r\n\t\t\tenableControl.setSelected(checked);\r\n\t}","func_code_tokens":["private","void","linkToEmitter","(","String","name",",","LinearInterpolator","interpol",")","{","\/\/ put to value map\r","valueMap",".","put","(","name",",","interpol",")",";","\/\/ now update the checkbox to represent the state of the given\r","\/\/ interpolator\r","boolean","checked","=","interpol",".","isActive","(",")",";","JCheckBox","enableControl","=","(","JCheckBox",")","valueNameToControl",".","get","(","name",")",";","enableControl",".","setSelected","(","false",")",";","if","(","checked",")","enableControl",".","setSelected","(","checked",")",";","}"],"func_documentation_string":"Link this set of controls to a linear interpolater within the particle emitter\n\n@param name The name of the article emitter being linked\n@param interpol The interpolator being configured","func_documentation_tokens":["Link","this","set","of","controls","to","a","linear","interpolater","within","the","particle","emitter"],"label":1,"text":"Link this set of controls to a linear interpolater within the particle emitter\n\n@param name The name of the article emitter being linked\n@param interpol The interpolator being configured[SEP]private void linkToEmitter(String name, LinearInterpolator interpol) {\r\n\t\t\/\/ put to value map\r\n\t\tvalueMap.put(name, interpol);\r\n\r\n\t\t\/\/ now update the checkbox to represent the state of the given\r\n\t\t\/\/ interpolator\r\n\t\tboolean checked = interpol.isActive();\r\n\t\tJCheckBox enableControl = (JCheckBox) valueNameToControl.get(name);\r\n\t\tenableControl.setSelected(false);\r\n\t\tif (checked)\r\n\t\t\tenableControl.setSelected(checked);\r\n\t}"}
{"func_code_string":"public UniqueModel unique() {\n\t\tcheckReadOnly();\n\t\tUniqueModel unique = new UniqueModel();\n\t\tunique.setTableModel(this);\n\t\tgetUniqueConsts().add(unique);\n\t\treturn unique;\n\t}","func_code_tokens":["public","UniqueModel","unique","(",")","{","checkReadOnly","(",")",";","UniqueModel","unique","=","new","UniqueModel","(",")",";","unique",".","setTableModel","(","this",")",";","getUniqueConsts","(",")",".","add","(","unique",")",";","return","unique",";","}"],"func_documentation_string":"Start add a unique constraint in DDL, detail usage see demo","func_documentation_tokens":["Start","add","a","unique","constraint","in","DDL","detail","usage","see","demo"],"label":1,"text":"Start add a unique constraint in DDL, detail usage see demo[SEP]public UniqueModel unique() {\n\t\tcheckReadOnly();\n\t\tUniqueModel unique = new UniqueModel();\n\t\tunique.setTableModel(this);\n\t\tgetUniqueConsts().add(unique);\n\t\treturn unique;\n\t}"}
{"func_code_string":"public StringBuffer append(Reader source, StringBuffer buffer) throws IOException\n\t{\n\t\tBufferedReader _bufferedReader = new BufferedReader(source);\n\t\tchar[] _buffer = new char[getBufferSize()]; \/\/ load by chunk of 4 ko\n\t\ttry\n\t\t{\n\t\t\tfor (int _countReadChars = 0; _countReadChars >= 0;)\n\t\t\t{\n\t\t\t\tbuffer.append(_buffer, 0, _countReadChars);\n\t\t\t\t_countReadChars = _bufferedReader.read(_buffer);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t_bufferedReader.close();\n\t\t}\n\t\treturn buffer;\n\t}","func_code_tokens":["public","StringBuffer","append","(","Reader","source",",","StringBuffer","buffer",")","throws","IOException","{","BufferedReader","_bufferedReader","=","new","BufferedReader","(","source",")",";","char","[","]","_buffer","=","new","char","[","getBufferSize","(",")","]",";","\/\/ load by chunk of 4 ko","try","{","for","(","int","_countReadChars","=","0",";","_countReadChars",">=","0",";",")","{","buffer",".","append","(","_buffer",",","0",",","_countReadChars",")",";","_countReadChars","=","_bufferedReader",".","read","(","_buffer",")",";","}","}","finally","{","_bufferedReader",".","close","(",")",";","}","return","buffer",";","}"],"func_documentation_string":"Load a text from the specified reader and put it in the provided StringBuffer.\n\n@param source source reader.\n@param buffer buffer to load text into.\n@return the buffer\n@throws IOException if there is a problem to deal with.","func_documentation_tokens":["Load","a","text","from","the","specified","reader","and","put","it","in","the","provided","StringBuffer","."],"label":1,"text":"Load a text from the specified reader and put it in the provided StringBuffer.\n\n@param source source reader.\n@param buffer buffer to load text into.\n@return the buffer\n@throws IOException if there is a problem to deal with.[SEP]public StringBuffer append(Reader source, StringBuffer buffer) throws IOException\n\t{\n\t\tBufferedReader _bufferedReader = new BufferedReader(source);\n\t\tchar[] _buffer = new char[getBufferSize()]; \/\/ load by chunk of 4 ko\n\t\ttry\n\t\t{\n\t\t\tfor (int _countReadChars = 0; _countReadChars >= 0;)\n\t\t\t{\n\t\t\t\tbuffer.append(_buffer, 0, _countReadChars);\n\t\t\t\t_countReadChars = _bufferedReader.read(_buffer);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t_bufferedReader.close();\n\t\t}\n\t\treturn buffer;\n\t}"}
{"func_code_string":"public S animate(Timer timer)\n\t{\n\t\tlong elapsed = timer.elapsedTime() - Timer.tickToTime(delay);\n\t\tstarted = elapsed > transform.getDelay();\n\t\tfinished = elapsed > transform.totalDuration() && transform.getLoops() != -1;\n\n\t\tif (!started && !renderBefore)\n\t\t\treturn null;\n\t\tif (finished && !renderAfter)\n\t\t\treturn null;\n\n\t\ttransform.transform(transformable, elapsed);\n\t\treturn transformable;\n\t}","func_code_tokens":["public","S","animate","(","Timer","timer",")","{","long","elapsed","=","timer",".","elapsedTime","(",")","-","Timer",".","tickToTime","(","delay",")",";","started","=","elapsed",">","transform",".","getDelay","(",")",";","finished","=","elapsed",">","transform",".","totalDuration","(",")","&&","transform",".","getLoops","(",")","!=","-","1",";","if","(","!","started","&&","!","renderBefore",")","return","null",";","if","(","finished","&&","!","renderAfter",")","return","null",";","transform",".","transform","(","transformable",",","elapsed",")",";","return","transformable",";","}"],"func_documentation_string":"Animates this {@link Animation}.<br>\nSets the {@link #started} and {@link #finished} status.\n\n@param timer the timer\n@return the s","func_documentation_tokens":["Animates","this","{","@link","Animation","}",".","<br",">","Sets","the","{","@link","#started","}","and","{","@link","#finished","}","status","."],"label":1,"text":"Animates this {@link Animation}.<br>\nSets the {@link #started} and {@link #finished} status.\n\n@param timer the timer\n@return the s[SEP]public S animate(Timer timer)\n\t{\n\t\tlong elapsed = timer.elapsedTime() - Timer.tickToTime(delay);\n\t\tstarted = elapsed > transform.getDelay();\n\t\tfinished = elapsed > transform.totalDuration() && transform.getLoops() != -1;\n\n\t\tif (!started && !renderBefore)\n\t\t\treturn null;\n\t\tif (finished && !renderAfter)\n\t\t\treturn null;\n\n\t\ttransform.transform(transformable, elapsed);\n\t\treturn transformable;\n\t}"}
{"func_code_string":"public <T> Observable<T> getAndObserve(String key, Class<T> classOfT, T defaultValue) {\n    return getAndObserve(key, TypeToken.fromClass(classOfT), defaultValue);\n  }","func_code_tokens":["public","<","T",">","Observable","<","T",">","getAndObserve","(","String","key",",","Class","<","T",">","classOfT",",","T","defaultValue",")","{","return","getAndObserve","(","key",",","TypeToken",".","fromClass","(","classOfT",")",",","defaultValue",")",";","}"],"func_documentation_string":"Gets value from SharedPreferences with a given key and type\nas a RxJava Observable, which can be subscribed.\nIf value is not found, we can return defaultValue.\nEmit preference as first element of the stream even if preferences wasn't changed.\n\n@param key key of the preference\n@param classOfT class of T (e.g. String.class)\n@param defaultValue default value of the preference (e.g. \"\" or \"undefined\")\n@param <T> return type of the preference (e.g. String)\n@return Observable value from SharedPreferences associated with given key or default value","func_documentation_tokens":["Gets","value","from","SharedPreferences","with","a","given","key","and","type","as","a","RxJava","Observable","which","can","be","subscribed",".","If","value","is","not","found","we","can","return","defaultValue",".","Emit","preference","as","first","element","of","the","stream","even","if","preferences","wasn","t","changed","."],"label":0,"text":"Gets value from SharedPreferences with a given key and type\nas a RxJava Observable, which can be subscribed.\nIf value is not found, we can return defaultValue.\nEmit preference as first element of the stream even if preferences wasn't changed.\n\n@param key key of the preference\n@param classOfT class of T (e.g. String.class)\n@param defaultValue default value of the preference (e.g. \"\" or \"undefined\")\n@param <T> return type of the preference (e.g. String)\n@return Observable value from SharedPreferences associated with given key or default value[SEP]public <T> Observable<T> getAndObserve(String key, Class<T> classOfT, T defaultValue) {\n    return getAndObserve(key, TypeToken.fromClass(classOfT), defaultValue);\n  }"}
{"func_code_string":"public T deserialize( JsonReader reader, JsonDeserializationContext ctx ) throws JsonDeserializationException {\n        return deserialize( reader, ctx, JsonDeserializerParameters.DEFAULT );\n    }","func_code_tokens":["public","T","deserialize","(","JsonReader","reader",",","JsonDeserializationContext","ctx",")","throws","JsonDeserializationException","{","return","deserialize","(","reader",",","ctx",",","JsonDeserializerParameters",".","DEFAULT",")",";","}"],"func_documentation_string":"Deserializes a JSON input into an object.\n\n@param reader {@link JsonReader} used to read the JSON input\n@param ctx Context for the full deserialization process\n@return the deserialized object\n@throws com.github.nmorel.gwtjackson.client.exception.JsonDeserializationException if an error occurs during the deserialization","func_documentation_tokens":["Deserializes","a","JSON","input","into","an","object","."],"label":1,"text":"Deserializes a JSON input into an object.\n\n@param reader {@link JsonReader} used to read the JSON input\n@param ctx Context for the full deserialization process\n@return the deserialized object\n@throws com.github.nmorel.gwtjackson.client.exception.JsonDeserializationException if an error occurs during the deserialization[SEP]public T deserialize( JsonReader reader, JsonDeserializationContext ctx ) throws JsonDeserializationException {\n        return deserialize( reader, ctx, JsonDeserializerParameters.DEFAULT );\n    }"}
{"func_code_string":"private byte[] doEncryptionOrDecryption(byte[] crypt, Key key, int mode) {\n        Cipher rsaCipher;\n        try {\n            rsaCipher = Cipher.getInstance(CIPHER);\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n            throw SeedException.wrap(e, CryptoErrorCode.UNABLE_TO_GET_CIPHER)\n                    .put(\"alias\", alias)\n                    .put(\"cipher\", CIPHER);\n        }\n        try {\n            rsaCipher.init(mode, key);\n        } catch (InvalidKeyException e) {\n            throw SeedException.wrap(e, CryptoErrorCode.INVALID_KEY)\n                    .put(\"alias\", alias);\n        }\n        try {\n            return rsaCipher.doFinal(crypt);\n        } catch (IllegalBlockSizeException | BadPaddingException e) {\n            throw SeedException.wrap(e, CryptoErrorCode.UNEXPECTED_EXCEPTION);\n        }\n    }","func_code_tokens":["private","byte","[","]","doEncryptionOrDecryption","(","byte","[","]","crypt",",","Key","key",",","int","mode",")","{","Cipher","rsaCipher",";","try","{","rsaCipher","=","Cipher",".","getInstance","(","CIPHER",")",";","}","catch","(","NoSuchAlgorithmException","|","NoSuchPaddingException","e",")","{","throw","SeedException",".","wrap","(","e",",","CryptoErrorCode",".","UNABLE_TO_GET_CIPHER",")",".","put","(","\"alias\"",",","alias",")",".","put","(","\"cipher\"",",","CIPHER",")",";","}","try","{","rsaCipher",".","init","(","mode",",","key",")",";","}","catch","(","InvalidKeyException","e",")","{","throw","SeedException",".","wrap","(","e",",","CryptoErrorCode",".","INVALID_KEY",")",".","put","(","\"alias\"",",","alias",")",";","}","try","{","return","rsaCipher",".","doFinal","(","crypt",")",";","}","catch","(","IllegalBlockSizeException","|","BadPaddingException","e",")","{","throw","SeedException",".","wrap","(","e",",","CryptoErrorCode",".","UNEXPECTED_EXCEPTION",")",";","}","}"],"func_documentation_string":"Encrypts or decrypts a byte[].\n\n@param crypt byte[] to encrypt or decrypt\n@param key   key to use\n@param mode  {@link Cipher#DECRYPT_MODE} to decrypt or {@link Cipher#ENCRYPT_MODE} to encrypt\n@return byte[] encrypted or decrypted","func_documentation_tokens":["Encrypts","or","decrypts","a","byte","[]","."],"label":0,"text":"Encrypts or decrypts a byte[].\n\n@param crypt byte[] to encrypt or decrypt\n@param key   key to use\n@param mode  {@link Cipher#DECRYPT_MODE} to decrypt or {@link Cipher#ENCRYPT_MODE} to encrypt\n@return byte[] encrypted or decrypted[SEP]private byte[] doEncryptionOrDecryption(byte[] crypt, Key key, int mode) {\n        Cipher rsaCipher;\n        try {\n            rsaCipher = Cipher.getInstance(CIPHER);\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n            throw SeedException.wrap(e, CryptoErrorCode.UNABLE_TO_GET_CIPHER)\n                    .put(\"alias\", alias)\n                    .put(\"cipher\", CIPHER);\n        }\n        try {\n            rsaCipher.init(mode, key);\n        } catch (InvalidKeyException e) {\n            throw SeedException.wrap(e, CryptoErrorCode.INVALID_KEY)\n                    .put(\"alias\", alias);\n        }\n        try {\n            return rsaCipher.doFinal(crypt);\n        } catch (IllegalBlockSizeException | BadPaddingException e) {\n            throw SeedException.wrap(e, CryptoErrorCode.UNEXPECTED_EXCEPTION);\n        }\n    }"}
{"func_code_string":"public static <T> List<T> randomListFrom(Iterable<T> elements, Range<Integer> size) {\n    checkArgument(!isEmpty(elements), \"Elements to populate from must not be empty\");\n    return randomListFrom(() -> IterableUtils.randomFrom(elements), size);\n  }","func_code_tokens":["public","static","<","T",">","List","<","T",">","randomListFrom","(","Iterable","<","T",">","elements",",","Range","<","Integer",">","size",")","{","checkArgument","(","!","isEmpty","(","elements",")",",","\"Elements to populate from must not be empty\"",")",";","return","randomListFrom","(","(",")","->","IterableUtils",".","randomFrom","(","elements",")",",","size",")",";","}"],"func_documentation_string":"Returns a list filled randomly from the given elements.\n\n@param elements elements to randomly fill list from\n@param size range that the size of the list will be randomly chosen from\n@param <T> the type of elements in the given iterable\n@return list filled randomly from the given elements\n@throws IllegalArgumentException if the elements to fill list from is empty or if the size\nrange contains negative integers","func_documentation_tokens":["Returns","a","list","filled","randomly","from","the","given","elements","."],"label":0,"text":"Returns a list filled randomly from the given elements.\n\n@param elements elements to randomly fill list from\n@param size range that the size of the list will be randomly chosen from\n@param <T> the type of elements in the given iterable\n@return list filled randomly from the given elements\n@throws IllegalArgumentException if the elements to fill list from is empty or if the size\nrange contains negative integers[SEP]public static <T> List<T> randomListFrom(Iterable<T> elements, Range<Integer> size) {\n    checkArgument(!isEmpty(elements), \"Elements to populate from must not be empty\");\n    return randomListFrom(() -> IterableUtils.randomFrom(elements), size);\n  }"}
{"func_code_string":"public static int indexOfIgnoreCase(String text, String str, int startIndex) {\n        Matcher m = Pattern.compile(Pattern.quote(str), Pattern.CASE_INSENSITIVE).matcher(text);\n        return m.find(startIndex) ? m.start() : -1;\n    }","func_code_tokens":["public","static","int","indexOfIgnoreCase","(","String","text",",","String","str",",","int","startIndex",")","{","Matcher","m","=","Pattern",".","compile","(","Pattern",".","quote","(","str",")",",","Pattern",".","CASE_INSENSITIVE",")",".","matcher","(","text",")",";","return","m",".","find","(","startIndex",")","?","m",".","start","(",")",":","-","1",";","}"],"func_documentation_string":"Case insensitive version of {@link String#indexOf(java.lang.String, int)}. Equivalent to\n{@code text.indexOf(str, startIndex)}, except the matching is case insensitive.","func_documentation_tokens":["Case","insensitive","version","of","{"],"label":1,"text":"Case insensitive version of {@link String#indexOf(java.lang.String, int)}. Equivalent to\n{@code text.indexOf(str, startIndex)}, except the matching is case insensitive.[SEP]public static int indexOfIgnoreCase(String text, String str, int startIndex) {\n        Matcher m = Pattern.compile(Pattern.quote(str), Pattern.CASE_INSENSITIVE).matcher(text);\n        return m.find(startIndex) ? m.start() : -1;\n    }"}
{"func_code_string":"public ExtractResult extract(String content, String selector, int amount) {\n\n\t\tList<Element> extracted = extractElements(content, selector, amount);\n\n\t\tif (extracted.size() > 1) {\n\n\t\t\t\/\/ first element is the remaining body, the rest are extracted\n\t\t\tElement body = extracted.get(0);\n\t\t\tList<Element> elements = extracted.subList(1, extracted.size());\n\n\t\t\t\/\/ convert to HTML\n\t\t\tList<String> elementStr = new ArrayList<String>();\n\t\t\tfor (Element el : elements) {\n\t\t\t\telementStr.add(el.outerHtml());\n\t\t\t}\n\n\t\t\treturn new DefaultExtractResult(elementStr, body.html());\n\t\t} else {\n\t\t\t\/\/ nothing to extract\n\t\t\treturn new DefaultExtractResult(Collections.<String> emptyList(), content);\n\t\t}\n\t}","func_code_tokens":["public","ExtractResult","extract","(","String","content",",","String","selector",",","int","amount",")","{","List","<","Element",">","extracted","=","extractElements","(","content",",","selector",",","amount",")",";","if","(","extracted",".","size","(",")",">","1",")","{","\/\/ first element is the remaining body, the rest are extracted","Element","body","=","extracted",".","get","(","0",")",";","List","<","Element",">","elements","=","extracted",".","subList","(","1",",","extracted",".","size","(",")",")",";","\/\/ convert to HTML","List","<","String",">","elementStr","=","new","ArrayList","<","String",">","(",")",";","for","(","Element","el",":","elements",")","{","elementStr",".","add","(","el",".","outerHtml","(",")",")",";","}","return","new","DefaultExtractResult","(","elementStr",",","body",".","html","(",")",")",";","}","else","{","\/\/ nothing to extract","return","new","DefaultExtractResult","(","Collections",".","<","String",">","emptyList","(",")",",","content",")",";","}","}"],"func_documentation_string":"Extracts HTML elements from the main HTML content. The result consists of the extracted HTML\nelements and the remainder of HTML content, with these elements removed. Can be limited to a\ncertain amount, e.g. to extract just the first of selected elements.\n\n@param content\nHTML content to extract elements from\n@param selector\nCSS selector for elements to extract\n@param amount\nMaximum number of elements to extract\n@return HTML content of the extracted elements together with the remainder of the original\ncontent. If no elements are found, the remainder contains the original content.\n@since 1.0","func_documentation_tokens":["Extracts","HTML","elements","from","the","main","HTML","content",".","The","result","consists","of","the","extracted","HTML","elements","and","the","remainder","of","HTML","content","with","these","elements","removed",".","Can","be","limited","to","a","certain","amount","e",".","g",".","to","extract","just","the","first","of","selected","elements","."],"label":1,"text":"Extracts HTML elements from the main HTML content. The result consists of the extracted HTML\nelements and the remainder of HTML content, with these elements removed. Can be limited to a\ncertain amount, e.g. to extract just the first of selected elements.\n\n@param content\nHTML content to extract elements from\n@param selector\nCSS selector for elements to extract\n@param amount\nMaximum number of elements to extract\n@return HTML content of the extracted elements together with the remainder of the original\ncontent. If no elements are found, the remainder contains the original content.\n@since 1.0[SEP]public ExtractResult extract(String content, String selector, int amount) {\n\n\t\tList<Element> extracted = extractElements(content, selector, amount);\n\n\t\tif (extracted.size() > 1) {\n\n\t\t\t\/\/ first element is the remaining body, the rest are extracted\n\t\t\tElement body = extracted.get(0);\n\t\t\tList<Element> elements = extracted.subList(1, extracted.size());\n\n\t\t\t\/\/ convert to HTML\n\t\t\tList<String> elementStr = new ArrayList<String>();\n\t\t\tfor (Element el : elements) {\n\t\t\t\telementStr.add(el.outerHtml());\n\t\t\t}\n\n\t\t\treturn new DefaultExtractResult(elementStr, body.html());\n\t\t} else {\n\t\t\t\/\/ nothing to extract\n\t\t\treturn new DefaultExtractResult(Collections.<String> emptyList(), content);\n\t\t}\n\t}"}
{"func_code_string":"public LoadBalancerFilter descriptionContains(String... subStrings) {\n        allItemsNotNull(subStrings, \"Load balancer description subStrings\");\n\n        predicate = predicate.and(combine(\n                LoadBalancerMetadata::getDescription, in(asList(subStrings), Predicates::containsIgnoreCase)\n        ));\n\n        return this;\n    }","func_code_tokens":["public","LoadBalancerFilter","descriptionContains","(","String","...","subStrings",")","{","allItemsNotNull","(","subStrings",",","\"Load balancer description subStrings\"",")",";","predicate","=","predicate",".","and","(","combine","(","LoadBalancerMetadata","::","getDescription",",","in","(","asList","(","subStrings",")",",","Predicates","::","containsIgnoreCase",")",")",")",";","return","this",";","}"],"func_documentation_string":"Method allow to find load balancers that contains {@code substring} in description\nFiltering is case insensitive.\n\n@param subStrings is a set of descriptions\n@return {@link LoadBalancerFilter}","func_documentation_tokens":["Method","allow","to","find","load","balancers","that","contains","{","@code","substring","}","in","description","Filtering","is","case","insensitive","."],"label":0,"text":"Method allow to find load balancers that contains {@code substring} in description\nFiltering is case insensitive.\n\n@param subStrings is a set of descriptions\n@return {@link LoadBalancerFilter}[SEP]public LoadBalancerFilter descriptionContains(String... subStrings) {\n        allItemsNotNull(subStrings, \"Load balancer description subStrings\");\n\n        predicate = predicate.and(combine(\n                LoadBalancerMetadata::getDescription, in(asList(subStrings), Predicates::containsIgnoreCase)\n        ));\n\n        return this;\n    }"}
{"func_code_string":"public TemplateFilter descriptionContains(String... substrings) {\n        allItemsNotNull(substrings, \"Template description substrings\");\n\n        predicate = predicate.and(combine(\n            TemplateMetadata::getDescription, in(asList(substrings), Predicates::containsIgnoreCase)\n        ));\n\n        return this;\n    }","func_code_tokens":["public","TemplateFilter","descriptionContains","(","String","...","substrings",")","{","allItemsNotNull","(","substrings",",","\"Template description substrings\"",")",";","predicate","=","predicate",".","and","(","combine","(","TemplateMetadata","::","getDescription",",","in","(","asList","(","substrings",")",",","Predicates","::","containsIgnoreCase",")",")",")",";","return","this",";","}"],"func_documentation_string":"Method allow to find templates that contains {@code substring} in description\nFiltering is case insensitive.\n\n@param substrings is a set of descriptions\n@return {@link TemplateFilter}","func_documentation_tokens":["Method","allow","to","find","templates","that","contains","{","@code","substring","}","in","description","Filtering","is","case","insensitive","."],"label":0,"text":"Method allow to find templates that contains {@code substring} in description\nFiltering is case insensitive.\n\n@param substrings is a set of descriptions\n@return {@link TemplateFilter}[SEP]public TemplateFilter descriptionContains(String... substrings) {\n        allItemsNotNull(substrings, \"Template description substrings\");\n\n        predicate = predicate.and(combine(\n            TemplateMetadata::getDescription, in(asList(substrings), Predicates::containsIgnoreCase)\n        ));\n\n        return this;\n    }"}
{"func_code_string":"public static ConfusionMatrix createCumulativeMatrix(ConfusionMatrix... matrices)\n    {\n        ConfusionMatrix result = new ConfusionMatrix();\n\n        for (ConfusionMatrix matrix : matrices) {\n            for (Map.Entry<String, Map<String, Integer>> gold : matrix.map.entrySet()) {\n                for (Map.Entry<String, Integer> actual : gold.getValue().entrySet()) {\n                    result.increaseValue(gold.getKey(), actual.getKey(), actual.getValue());\n                }\n            }\n        }\n\n        return result;\n    }","func_code_tokens":["public","static","ConfusionMatrix","createCumulativeMatrix","(","ConfusionMatrix","...","matrices",")","{","ConfusionMatrix","result","=","new","ConfusionMatrix","(",")",";","for","(","ConfusionMatrix","matrix",":","matrices",")","{","for","(","Map",".","Entry","<","String",",","Map","<","String",",","Integer",">",">","gold",":","matrix",".","map",".","entrySet","(",")",")","{","for","(","Map",".","Entry","<","String",",","Integer",">","actual",":","gold",".","getValue","(",")",".","entrySet","(",")",")","{","result",".","increaseValue","(","gold",".","getKey","(",")",",","actual",".","getKey","(",")",",","actual",".","getValue","(",")",")",";","}","}","}","return","result",";","}"],"func_documentation_string":"Sums up all matrices into a new one\n\n@param matrices confusion matrices\n@return confusion matrix","func_documentation_tokens":["Sums","up","all","matrices","into","a","new","one"],"label":1,"text":"Sums up all matrices into a new one\n\n@param matrices confusion matrices\n@return confusion matrix[SEP]public static ConfusionMatrix createCumulativeMatrix(ConfusionMatrix... matrices)\n    {\n        ConfusionMatrix result = new ConfusionMatrix();\n\n        for (ConfusionMatrix matrix : matrices) {\n            for (Map.Entry<String, Map<String, Integer>> gold : matrix.map.entrySet()) {\n                for (Map.Entry<String, Integer> actual : gold.getValue().entrySet()) {\n                    result.increaseValue(gold.getKey(), actual.getKey(), actual.getValue());\n                }\n            }\n        }\n\n        return result;\n    }"}
{"func_code_string":"public ConfusionMatrix getTransposedMatrix()\n    {\n        ConfusionMatrix result = new ConfusionMatrix();\n\n        for (Map.Entry<String, Map<String, Integer>> gold : this.map.entrySet()) {\n            for (Map.Entry<String, Integer> predicted : gold.getValue().entrySet()) {\n                int value = predicted.getValue();\n\n                \/\/ add reverted values\n                result.increaseValue(predicted.getKey(), gold.getKey(), value);\n            }\n        }\n\n        return result;\n    }","func_code_tokens":["public","ConfusionMatrix","getTransposedMatrix","(",")","{","ConfusionMatrix","result","=","new","ConfusionMatrix","(",")",";","for","(","Map",".","Entry","<","String",",","Map","<","String",",","Integer",">",">","gold",":","this",".","map",".","entrySet","(",")",")","{","for","(","Map",".","Entry","<","String",",","Integer",">","predicted",":","gold",".","getValue","(",")",".","entrySet","(",")",")","{","int","value","=","predicted",".","getValue","(",")",";","\/\/ add reverted values","result",".","increaseValue","(","predicted",".","getKey","(",")",",","gold",".","getKey","(",")",",","value",")",";","}","}","return","result",";","}"],"func_documentation_string":"Returns transposed confusion matrix (gold and predicted are switched)\n\n@return new instance","func_documentation_tokens":["Returns","transposed","confusion","matrix","(","gold","and","predicted","are","switched",")"],"label":0,"text":"Returns transposed confusion matrix (gold and predicted are switched)\n\n@return new instance[SEP]public ConfusionMatrix getTransposedMatrix()\n    {\n        ConfusionMatrix result = new ConfusionMatrix();\n\n        for (Map.Entry<String, Map<String, Integer>> gold : this.map.entrySet()) {\n            for (Map.Entry<String, Integer> predicted : gold.getValue().entrySet()) {\n                int value = predicted.getValue();\n\n                \/\/ add reverted values\n                result.increaseValue(predicted.getKey(), gold.getKey(), value);\n            }\n        }\n\n        return result;\n    }"}
{"func_code_string":"public static String getHttpStatusCodeText(int sc) {\n        HttpStatusCode sCode = HttpStatusCode.fromNumStatusCode(sc);\n        if (sCode == null) {\n            return sc + \" <unknown status code>\";\n        } else {\n            return sCode.toString();\n        }\n    }","func_code_tokens":["public","static","String","getHttpStatusCodeText","(","int","sc",")","{","HttpStatusCode","sCode","=","HttpStatusCode",".","fromNumStatusCode","(","sc",")",";","if","(","sCode","==","null",")","{","return","sc","+","\" <unknown status code>\"",";","}","else","{","return","sCode",".","toString","(",")",";","}","}"],"func_documentation_string":"Gets the numerical HTTP status code concatenated with the\ntext representing that status code, for example {@code \"403 Forbidden\"}.\n\n<p>If the status code is unknown then the text will be\n{@code \"<Unknown status code>\"}.\n@param sc numerical HTTP status code\n@return","func_documentation_tokens":["Gets","the","numerical","HTTP","status","code","concatenated","with","the","text","representing","that","status","code","for","example","{","@code","403","Forbidden","}","."],"label":1,"text":"Gets the numerical HTTP status code concatenated with the\ntext representing that status code, for example {@code \"403 Forbidden\"}.\n\n<p>If the status code is unknown then the text will be\n{@code \"<Unknown status code>\"}.\n@param sc numerical HTTP status code\n@return[SEP]public static String getHttpStatusCodeText(int sc) {\n        HttpStatusCode sCode = HttpStatusCode.fromNumStatusCode(sc);\n        if (sCode == null) {\n            return sc + \" <unknown status code>\";\n        } else {\n            return sCode.toString();\n        }\n    }"}
{"func_code_string":"private void readPropertiesFiles() {\r\n\r\n        if (this.messageFileWildcard.isEmpty() || !CoreParameters.LOG_RESOLUTION.get()) {\r\n            \/\/ Skip configuration loading\r\n            LOGGER.info(JRebirthMarkers.MESSAGE, \"Messages Loading is skipped\");\r\n\r\n        } else {\r\n            \/\/ Assemble the regex pattern\r\n            final Pattern filePattern = Pattern.compile(this.messageFileWildcard + \"\\\\.properties\");\r\n\r\n            \/\/ Retrieve all resources from default classpath\r\n            final Collection<String> list = ClasspathUtility.getClasspathResources(filePattern);\r\n\r\n            LOGGER.info(JRebirthMarkers.MESSAGE, \"{} Messages file{} found.\", list.size(), list.size() > 1 ? \"s\" : \"\");\r\n\r\n            for (final String rbFilename : list) {\r\n                readPropertiesFile(rbFilename);\r\n            }\r\n        }\r\n    }","func_code_tokens":["private","void","readPropertiesFiles","(",")","{","if","(","this",".","messageFileWildcard",".","isEmpty","(",")","||","!","CoreParameters",".","LOG_RESOLUTION",".","get","(",")",")","{","\/\/ Skip configuration loading\r","LOGGER",".","info","(","JRebirthMarkers",".","MESSAGE",",","\"Messages Loading is skipped\"",")",";","}","else","{","\/\/ Assemble the regex pattern\r","final","Pattern","filePattern","=","Pattern",".","compile","(","this",".","messageFileWildcard","+","\"\\\\.properties\"",")",";","\/\/ Retrieve all resources from default classpath\r","final","Collection","<","String",">","list","=","ClasspathUtility",".","getClasspathResources","(","filePattern",")",";","LOGGER",".","info","(","JRebirthMarkers",".","MESSAGE",",","\"{} Messages file{} found.\"",",","list",".","size","(",")",",","list",".","size","(",")",">","1","?","\"s\"",":","\"\"",")",";","for","(","final","String","rbFilename",":","list",")","{","readPropertiesFile","(","rbFilename",")",";","}","}","}"],"func_documentation_string":"Read all configuration files available into the application classpath.","func_documentation_tokens":["Read","all","configuration","files","available","into","the","application","classpath","."],"label":1,"text":"Read all configuration files available into the application classpath.[SEP]private void readPropertiesFiles() {\r\n\r\n        if (this.messageFileWildcard.isEmpty() || !CoreParameters.LOG_RESOLUTION.get()) {\r\n            \/\/ Skip configuration loading\r\n            LOGGER.info(JRebirthMarkers.MESSAGE, \"Messages Loading is skipped\");\r\n\r\n        } else {\r\n            \/\/ Assemble the regex pattern\r\n            final Pattern filePattern = Pattern.compile(this.messageFileWildcard + \"\\\\.properties\");\r\n\r\n            \/\/ Retrieve all resources from default classpath\r\n            final Collection<String> list = ClasspathUtility.getClasspathResources(filePattern);\r\n\r\n            LOGGER.info(JRebirthMarkers.MESSAGE, \"{} Messages file{} found.\", list.size(), list.size() > 1 ? \"s\" : \"\");\r\n\r\n            for (final String rbFilename : list) {\r\n                readPropertiesFile(rbFilename);\r\n            }\r\n        }\r\n    }"}
{"func_code_string":"@Override\n\tpublic final void setPriority(int priority) throws JMSException\n    {\n        if (priority < 0 || priority > 9)\n            throw new FFMQException(\"Invalid priority value : \"+priority,\"INVALID_PRIORITY\");\n        \n        this.defaultPriority = priority;\n    }","func_code_tokens":["@","Override","public","final","void","setPriority","(","int","priority",")","throws","JMSException","{","if","(","priority","<","0","||","priority",">","9",")","throw","new","FFMQException","(","\"Invalid priority value : \"","+","priority",",","\"INVALID_PRIORITY\"",")",";","this",".","defaultPriority","=","priority",";","}"],"func_documentation_string":"\/* (non-Javadoc)\n@see javax.jms.MessageProducer#setPriority(int)","func_documentation_tokens":["\/","*","(","non","-","Javadoc",")"],"label":0,"text":"\/* (non-Javadoc)\n@see javax.jms.MessageProducer#setPriority(int)[SEP]@Override\n\tpublic final void setPriority(int priority) throws JMSException\n    {\n        if (priority < 0 || priority > 9)\n            throw new FFMQException(\"Invalid priority value : \"+priority,\"INVALID_PRIORITY\");\n        \n        this.defaultPriority = priority;\n    }"}
{"func_code_string":"private static JSONObject doPostRequest(HttpPost httpPost, HashMap<String, String> params) throws JSONException {\n    \tJSONObject json = null;\n        HttpClient postClient = HttpClientBuilder.create().build();\n        HttpResponse response;\n        \n        try {\n            response = postClient.execute(httpPost);\n            \n            if(response.getStatusLine().getStatusCode() == 200) {\n                HttpEntity entity = response.getEntity();\n                \n                if (entity != null) {\n                    InputStream instream = entity.getContent();  \n                    String result = convertStreamToString(instream);\n                    instream.close();\n                    \n                    json = new JSONObject(result);\n                }\n            } else {\n            \tjson = UpworkRestClient.genError(response);\n            }\n        } catch (ClientProtocolException e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: ClientProtocolException\");\n        } catch (IOException e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: IOException\");\n        } catch (JSONException e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: JSONException\");  \n        } catch (Exception e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: Exception \" + e.toString());\n        } finally {\n            httpPost.abort();\n        }\n        \n        return json;\n    }","func_code_tokens":["private","static","JSONObject","doPostRequest","(","HttpPost","httpPost",",","HashMap","<","String",",","String",">","params",")","throws","JSONException","{","JSONObject","json","=","null",";","HttpClient","postClient","=","HttpClientBuilder",".","create","(",")",".","build","(",")",";","HttpResponse","response",";","try","{","response","=","postClient",".","execute","(","httpPost",")",";","if","(","response",".","getStatusLine","(",")",".","getStatusCode","(",")","==","200",")","{","HttpEntity","entity","=","response",".","getEntity","(",")",";","if","(","entity","!=","null",")","{","InputStream","instream","=","entity",".","getContent","(",")",";","String","result","=","convertStreamToString","(","instream",")",";","instream",".","close","(",")",";","json","=","new","JSONObject","(","result",")",";","}","}","else","{","json","=","UpworkRestClient",".","genError","(","response",")",";","}","}","catch","(","ClientProtocolException","e",")","{","json","=","UpworkRestClient",".","genError","(","HTTP_RESPONSE_503",",","\"Exception: ClientProtocolException\"",")",";","}","catch","(","IOException","e",")","{","json","=","UpworkRestClient",".","genError","(","HTTP_RESPONSE_503",",","\"Exception: IOException\"",")",";","}","catch","(","JSONException","e",")","{","json","=","UpworkRestClient",".","genError","(","HTTP_RESPONSE_503",",","\"Exception: JSONException\"",")",";","}","catch","(","Exception","e",")","{","json","=","UpworkRestClient",".","genError","(","HTTP_RESPONSE_503",",","\"Exception: Exception \"","+","e",".","toString","(",")",")",";","}","finally","{","httpPost",".","abort","(",")",";","}","return","json",";","}"],"func_documentation_string":"Execute POST request\n\n@param   url Request object for POST\n@param   method HTTP method\n@param   params POST parameters\n@throws  JSONException\n@return  {@link JSONObject}","func_documentation_tokens":["Execute","POST","request"],"label":1,"text":"Execute POST request\n\n@param   url Request object for POST\n@param   method HTTP method\n@param   params POST parameters\n@throws  JSONException\n@return  {@link JSONObject}[SEP]private static JSONObject doPostRequest(HttpPost httpPost, HashMap<String, String> params) throws JSONException {\n    \tJSONObject json = null;\n        HttpClient postClient = HttpClientBuilder.create().build();\n        HttpResponse response;\n        \n        try {\n            response = postClient.execute(httpPost);\n            \n            if(response.getStatusLine().getStatusCode() == 200) {\n                HttpEntity entity = response.getEntity();\n                \n                if (entity != null) {\n                    InputStream instream = entity.getContent();  \n                    String result = convertStreamToString(instream);\n                    instream.close();\n                    \n                    json = new JSONObject(result);\n                }\n            } else {\n            \tjson = UpworkRestClient.genError(response);\n            }\n        } catch (ClientProtocolException e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: ClientProtocolException\");\n        } catch (IOException e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: IOException\");\n        } catch (JSONException e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: JSONException\");  \n        } catch (Exception e) {\n            json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: Exception \" + e.toString());\n        } finally {\n            httpPost.abort();\n        }\n        \n        return json;\n    }"}
{"func_code_string":"public static String createUniqueName(XNameAccess _xElementContainer, String _sElementName) {\n        boolean bElementexists = true;\n        int i = 1;\n        String sIncSuffix = \"\";\n        String BaseName = _sElementName;\n        while (bElementexists) {\n            bElementexists = _xElementContainer.hasByName(_sElementName);\n            if (bElementexists) {\n                i += 1;\n                _sElementName = BaseName + Integer.toString(i);\n            }\n        }\n        return _sElementName;\n    }","func_code_tokens":["public","static","String","createUniqueName","(","XNameAccess","_xElementContainer",",","String","_sElementName",")","{","boolean","bElementexists","=","true",";","int","i","=","1",";","String","sIncSuffix","=","\"\"",";","String","BaseName","=","_sElementName",";","while","(","bElementexists",")","{","bElementexists","=","_xElementContainer",".","hasByName","(","_sElementName",")",";","if","(","bElementexists",")","{","i","+=","1",";","_sElementName","=","BaseName","+","Integer",".","toString","(","i",")",";","}","}","return","_sElementName",";","}"],"func_documentation_string":"makes a String unique by appending a numerical suffix\n@param _xElementContainer the com.sun.star.container.XNameAccess container\nthat the new Element is going to be inserted to\n@param _sElementName the StemName of the Element","func_documentation_tokens":["makes","a","String","unique","by","appending","a","numerical","suffix"],"label":0,"text":"makes a String unique by appending a numerical suffix\n@param _xElementContainer the com.sun.star.container.XNameAccess container\nthat the new Element is going to be inserted to\n@param _sElementName the StemName of the Element[SEP]public static String createUniqueName(XNameAccess _xElementContainer, String _sElementName) {\n        boolean bElementexists = true;\n        int i = 1;\n        String sIncSuffix = \"\";\n        String BaseName = _sElementName;\n        while (bElementexists) {\n            bElementexists = _xElementContainer.hasByName(_sElementName);\n            if (bElementexists) {\n                i += 1;\n                _sElementName = BaseName + Integer.toString(i);\n            }\n        }\n        return _sElementName;\n    }"}
{"func_code_string":"public static String encode(String str)\n    {\n        String encodedValue = str;\n\n        try\n        {\n            encodedValue = URLEncoder.encode(encodedValue, \"UTF-8\");\n\n            \/\/ Spaces in NRQL queries expected to be encoded as \"%20\" instead of \"+\".\n            encodedValue = encodedValue.replace(\"+\", \"%20\");\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            logger.severe(\"Failed to encode value: \"+str);\n        }\n\n        return encodedValue;\n    }","func_code_tokens":["public","static","String","encode","(","String","str",")","{","String","encodedValue","=","str",";","try","{","encodedValue","=","URLEncoder",".","encode","(","encodedValue",",","\"UTF-8\"",")",";","\/\/ Spaces in NRQL queries expected to be encoded as \"%20\" instead of \"+\".","encodedValue","=","encodedValue",".","replace","(","\"+\"",",","\"%20\"",")",";","}","catch","(","UnsupportedEncodingException","e",")","{","logger",".","severe","(","\"Failed to encode value: \"","+","str",")",";","}","return","encodedValue",";","}"],"func_documentation_string":"Encode special character in query string to the URL encoded representation.\n@param str The input string\n@return The encoded String","func_documentation_tokens":["Encode","special","character","in","query","string","to","the","URL","encoded","representation","."],"label":0,"text":"Encode special character in query string to the URL encoded representation.\n@param str The input string\n@return The encoded String[SEP]public static String encode(String str)\n    {\n        String encodedValue = str;\n\n        try\n        {\n            encodedValue = URLEncoder.encode(encodedValue, \"UTF-8\");\n\n            \/\/ Spaces in NRQL queries expected to be encoded as \"%20\" instead of \"+\".\n            encodedValue = encodedValue.replace(\"+\", \"%20\");\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            logger.severe(\"Failed to encode value: \"+str);\n        }\n\n        return encodedValue;\n    }"}
{"func_code_string":"protected RefProperty registerErrorModel(Swagger swagger) {\n        String ref = Error.class.getSimpleName();\n        if (swagger.getDefinitions() != null && swagger.getDefinitions().containsKey(ref)) {\n            \/\/ model already registered\n            return new RefProperty(ref);\n        }\n\n        ModelImpl model = new ModelImpl();\n        swagger.addDefinition(ref, model);\n\n        model.setDescription(\"an error message\");\n\n        model.addProperty(\"statusCode\", new IntegerProperty().readOnly().description(\"http status code\"));\n        model.addProperty(\"statusMessage\", new StringProperty().readOnly().description(\"description of the http status code\"));\n        model.addProperty(\"requestMethod\", new StringProperty().readOnly().description(\"http request method\"));\n        model.addProperty(\"requestUri\", new StringProperty().readOnly().description(\"http request path\"));\n        model.addProperty(\"message\", new StringProperty().readOnly().description(\"application message\"));\n\n        if (settings.isDev()) {\n            \/\/ in DEV mode the stacktrace is returned in the error message\n            model.addProperty(\"stacktrace\", new StringProperty().readOnly().description(\"application stacktrace\"));\n        }\n\n        return new RefProperty(ref);\n    }","func_code_tokens":["protected","RefProperty","registerErrorModel","(","Swagger","swagger",")","{","String","ref","=","Error",".","class",".","getSimpleName","(",")",";","if","(","swagger",".","getDefinitions","(",")","!=","null","&&","swagger",".","getDefinitions","(",")",".","containsKey","(","ref",")",")","{","\/\/ model already registered","return","new","RefProperty","(","ref",")",";","}","ModelImpl","model","=","new","ModelImpl","(",")",";","swagger",".","addDefinition","(","ref",",","model",")",";","model",".","setDescription","(","\"an error message\"",")",";","model",".","addProperty","(","\"statusCode\"",",","new","IntegerProperty","(",")",".","readOnly","(",")",".","description","(","\"http status code\"",")",")",";","model",".","addProperty","(","\"statusMessage\"",",","new","StringProperty","(",")",".","readOnly","(",")",".","description","(","\"description of the http status code\"",")",")",";","model",".","addProperty","(","\"requestMethod\"",",","new","StringProperty","(",")",".","readOnly","(",")",".","description","(","\"http request method\"",")",")",";","model",".","addProperty","(","\"requestUri\"",",","new","StringProperty","(",")",".","readOnly","(",")",".","description","(","\"http request path\"",")",")",";","model",".","addProperty","(","\"message\"",",","new","StringProperty","(",")",".","readOnly","(",")",".","description","(","\"application message\"",")",")",";","if","(","settings",".","isDev","(",")",")","{","\/\/ in DEV mode the stacktrace is returned in the error message","model",".","addProperty","(","\"stacktrace\"",",","new","StringProperty","(",")",".","readOnly","(",")",".","description","(","\"application stacktrace\"",")",")",";","}","return","new","RefProperty","(","ref",")",";","}"],"func_documentation_string":"Manually register the Pippo Error class as  Swagger model.\n\n@param swagger\n@return a ref for the Error model","func_documentation_tokens":["Manually","register","the","Pippo","Error","class","as","Swagger","model","."],"label":0,"text":"Manually register the Pippo Error class as  Swagger model.\n\n@param swagger\n@return a ref for the Error model[SEP]protected RefProperty registerErrorModel(Swagger swagger) {\n        String ref = Error.class.getSimpleName();\n        if (swagger.getDefinitions() != null && swagger.getDefinitions().containsKey(ref)) {\n            \/\/ model already registered\n            return new RefProperty(ref);\n        }\n\n        ModelImpl model = new ModelImpl();\n        swagger.addDefinition(ref, model);\n\n        model.setDescription(\"an error message\");\n\n        model.addProperty(\"statusCode\", new IntegerProperty().readOnly().description(\"http status code\"));\n        model.addProperty(\"statusMessage\", new StringProperty().readOnly().description(\"description of the http status code\"));\n        model.addProperty(\"requestMethod\", new StringProperty().readOnly().description(\"http request method\"));\n        model.addProperty(\"requestUri\", new StringProperty().readOnly().description(\"http request path\"));\n        model.addProperty(\"message\", new StringProperty().readOnly().description(\"application message\"));\n\n        if (settings.isDev()) {\n            \/\/ in DEV mode the stacktrace is returned in the error message\n            model.addProperty(\"stacktrace\", new StringProperty().readOnly().description(\"application stacktrace\"));\n        }\n\n        return new RefProperty(ref);\n    }"}
{"func_code_string":"public void replaceStringChildren(List<String> strings) {\n\t\tArrayList<StringEntity> entities = new ArrayList<>();\n\t\tfor (String string : strings) {\n\t\t\tStringEntity entity = new StringEntity();\n\t\t\tentity.setValue(string);\n\t\t\tentities.add(entity);\n\t\t}\n\t\treplaceAll(entities);\n\t}","func_code_tokens":["public","void","replaceStringChildren","(","List","<","String",">","strings",")","{","ArrayList","<","StringEntity",">","entities","=","new","ArrayList","<>","(",")",";","for","(","String","string",":","strings",")","{","StringEntity","entity","=","new","StringEntity","(",")",";","entity",".","setValue","(","string",")",";","entities",".","add","(","entity",")",";","}","replaceAll","(","entities",")",";","}"],"func_documentation_string":"This method allows to replace all string children, it will remove any children which are not in the list, add the\nnew ones and update which are in the list.\n\n@param strings string children list to replace.","func_documentation_tokens":["This","method","allows","to","replace","all","string","children","it","will","remove","any","children","which","are","not","in","the","list","add","the","new","ones","and","update","which","are","in","the","list","."],"label":0,"text":"This method allows to replace all string children, it will remove any children which are not in the list, add the\nnew ones and update which are in the list.\n\n@param strings string children list to replace.[SEP]public void replaceStringChildren(List<String> strings) {\n\t\tArrayList<StringEntity> entities = new ArrayList<>();\n\t\tfor (String string : strings) {\n\t\t\tStringEntity entity = new StringEntity();\n\t\t\tentity.setValue(string);\n\t\t\tentities.add(entity);\n\t\t}\n\t\treplaceAll(entities);\n\t}"}
{"func_code_string":"protected void readOnlyUpdated() {\n\t\tboolean localReadOnly = isReadOnly();\n\t\tif (hasChanged(oldReadOnly, localReadOnly)) {\n\t\t\toldReadOnly = localReadOnly;\n\t\t\tfirePropertyChange(READONLY_PROPERTY, !localReadOnly, localReadOnly);\n\t\t}\n\t}","func_code_tokens":["protected","void","readOnlyUpdated","(",")","{","boolean","localReadOnly","=","isReadOnly","(",")",";","if","(","hasChanged","(","oldReadOnly",",","localReadOnly",")",")","{","oldReadOnly","=","localReadOnly",";","firePropertyChange","(","READONLY_PROPERTY",",","!","localReadOnly",",","localReadOnly",")",";","}","}"],"func_documentation_string":"Fires the necessary property change event for changes to the readOnly\nproperty. Must be called whenever the value of readOnly is changed.","func_documentation_tokens":["Fires","the","necessary","property","change","event","for","changes","to","the","readOnly","property",".","Must","be","called","whenever","the","value","of","readOnly","is","changed","."],"label":0,"text":"Fires the necessary property change event for changes to the readOnly\nproperty. Must be called whenever the value of readOnly is changed.[SEP]protected void readOnlyUpdated() {\n\t\tboolean localReadOnly = isReadOnly();\n\t\tif (hasChanged(oldReadOnly, localReadOnly)) {\n\t\t\toldReadOnly = localReadOnly;\n\t\t\tfirePropertyChange(READONLY_PROPERTY, !localReadOnly, localReadOnly);\n\t\t}\n\t}"}
{"func_code_string":"public static String reverseString(String str) {\n        StringBuilder stringBuffer = new StringBuilder(str);\n        return stringBuffer.reverse().toString();\n    }","func_code_tokens":["public","static","String","reverseString","(","String","str",")","{","StringBuilder","stringBuffer","=","new","StringBuilder","(","str",")",";","return","stringBuffer",".","reverse","(",")",".","toString","(",")",";","}"],"func_documentation_string":"reverseString","func_documentation_tokens":["reverseString"],"label":1,"text":"reverseString[SEP]public static String reverseString(String str) {\n        StringBuilder stringBuffer = new StringBuilder(str);\n        return stringBuffer.reverse().toString();\n    }"}
{"func_code_string":"private void parseAttDef(String elementName) throws Exception {\n        String name;\n        String type;\n        String enumer = null;\n\n        \/\/ Read the attribute name.\n        name = readNmtoken(true);\n\n        \/\/ Read the attribute type.\n        requireWhitespace();\n        type = readAttType();\n\n        \/\/ Get the string of enumerated values if necessary.\n        if (handler.stringInterning) {\n            if ((\"ENUMERATION\" == type) || (\"NOTATION\" == type)) {\n                enumer = dataBufferToString();\n            }\n        } else {\n            if (\"ENUMERATION\".equals(type) || \"NOTATION\".equals(type)) {\n                enumer = dataBufferToString();\n            }\n        }\n\n        \/\/ Read the default value.\n        requireWhitespace();\n        parseDefault(elementName, name, type, enumer);\n    }","func_code_tokens":["private","void","parseAttDef","(","String","elementName",")","throws","Exception","{","String","name",";","String","type",";","String","enumer","=","null",";","\/\/ Read the attribute name.","name","=","readNmtoken","(","true",")",";","\/\/ Read the attribute type.","requireWhitespace","(",")",";","type","=","readAttType","(",")",";","\/\/ Get the string of enumerated values if necessary.","if","(","handler",".","stringInterning",")","{","if","(","(","\"ENUMERATION\"","==","type",")","||","(","\"NOTATION\"","==","type",")",")","{","enumer","=","dataBufferToString","(",")",";","}","}","else","{","if","(","\"ENUMERATION\"",".","equals","(","type",")","||","\"NOTATION\"",".","equals","(","type",")",")","{","enumer","=","dataBufferToString","(",")",";","}","}","\/\/ Read the default value.","requireWhitespace","(",")",";","parseDefault","(","elementName",",","name",",","type",",","enumer",")",";","}"],"func_documentation_string":"Parse a single attribute definition.\n\n<pre>\n[53] AttDef ::= S Name S AttType S DefaultDecl\n<\/pre>","func_documentation_tokens":["Parse","a","single","attribute","definition","."],"label":0,"text":"Parse a single attribute definition.\n\n<pre>\n[53] AttDef ::= S Name S AttType S DefaultDecl\n<\/pre>[SEP]private void parseAttDef(String elementName) throws Exception {\n        String name;\n        String type;\n        String enumer = null;\n\n        \/\/ Read the attribute name.\n        name = readNmtoken(true);\n\n        \/\/ Read the attribute type.\n        requireWhitespace();\n        type = readAttType();\n\n        \/\/ Get the string of enumerated values if necessary.\n        if (handler.stringInterning) {\n            if ((\"ENUMERATION\" == type) || (\"NOTATION\" == type)) {\n                enumer = dataBufferToString();\n            }\n        } else {\n            if (\"ENUMERATION\".equals(type) || \"NOTATION\".equals(type)) {\n                enumer = dataBufferToString();\n            }\n        }\n\n        \/\/ Read the default value.\n        requireWhitespace();\n        parseDefault(elementName, name, type, enumer);\n    }"}
{"func_code_string":"@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    protected Object transform(Object result, QueryResultMapper resultMapper) {\n        Object actualResult = null;\n        if (result instanceof Collection) {\n\n            if (ProcessInstanceCustomDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ProcessInstanceCustomDesc to ProcessInstanceCustomList\");\n                actualResult = convertToProcessInstanceCustomVarsList((Collection<ProcessInstanceCustomDesc>) result);\n            } else if (ProcessInstanceWithVarsDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ProcessInstanceWithVarsDesc to ProcessInstanceList\");\n                actualResult = convertToProcessInstanceWithVarsList((Collection<ProcessInstanceWithVarsDesc>) result);\n            } else if (ProcessInstanceDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ProcessInstanceDesc to ProcessInstanceList\");\n                actualResult = convertToProcessInstanceList((Collection<ProcessInstanceDesc>) result);\n            } else if (UserTaskInstanceWithVarsDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of UserTaskInstanceWithVarsDesc to TaskInstanceList\");\n                actualResult = convertToTaskInstanceWithVarsList((Collection<UserTaskInstanceWithVarsDesc>) result);\n            } else if (UserTaskInstanceWithPotOwnerDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of UserTaskInstanceWithPotOwnerDesc to TaskInstanceList\");\n                actualResult = convertToTaskInstanceListPO((Collection<UserTaskInstanceWithPotOwnerDesc>) result);\n            } else if (UserTaskInstanceDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of UserTaskInstanceDesc to TaskInstanceList\");\n                actualResult = convertToTaskInstanceList((Collection<UserTaskInstanceDesc>) result);\n            } else if (TaskSummary.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of TaskSummary to TaskSummaryList\");\n                actualResult = convertToTaskSummaryList((Collection<TaskSummary>) result);\n            } else if (ExecutionError.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ExecutionError to ErrorInstanceList\");\n                actualResult = convertToErrorInstanceList((List<ExecutionError>) result);\n            } else if (List.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of List to ArrayList\");\n                actualResult = new ArrayList((Collection) result);\n            }else {\n\n                logger.debug(\"Convert not supported for custom type {}\", resultMapper.getType());\n                actualResult = result;\n            }\n\n            logger.debug(\"Actual result after converting is {}\", actualResult);\n        } else {\n            logger.debug(\"Result is not a collection - {}, skipping any conversion\", result);\n            actualResult = result;\n        }\n        return actualResult;\n    }","func_code_tokens":["@","SuppressWarnings","(","{","\"rawtypes\"",",","\"unchecked\"","}",")","protected","Object","transform","(","Object","result",",","QueryResultMapper","resultMapper",")","{","Object","actualResult","=","null",";","if","(","result","instanceof","Collection",")","{","if","(","ProcessInstanceCustomDesc",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of ProcessInstanceCustomDesc to ProcessInstanceCustomList\"",")",";","actualResult","=","convertToProcessInstanceCustomVarsList","(","(","Collection","<","ProcessInstanceCustomDesc",">",")","result",")",";","}","else","if","(","ProcessInstanceWithVarsDesc",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of ProcessInstanceWithVarsDesc to ProcessInstanceList\"",")",";","actualResult","=","convertToProcessInstanceWithVarsList","(","(","Collection","<","ProcessInstanceWithVarsDesc",">",")","result",")",";","}","else","if","(","ProcessInstanceDesc",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of ProcessInstanceDesc to ProcessInstanceList\"",")",";","actualResult","=","convertToProcessInstanceList","(","(","Collection","<","ProcessInstanceDesc",">",")","result",")",";","}","else","if","(","UserTaskInstanceWithVarsDesc",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of UserTaskInstanceWithVarsDesc to TaskInstanceList\"",")",";","actualResult","=","convertToTaskInstanceWithVarsList","(","(","Collection","<","UserTaskInstanceWithVarsDesc",">",")","result",")",";","}","else","if","(","UserTaskInstanceWithPotOwnerDesc",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of UserTaskInstanceWithPotOwnerDesc to TaskInstanceList\"",")",";","actualResult","=","convertToTaskInstanceListPO","(","(","Collection","<","UserTaskInstanceWithPotOwnerDesc",">",")","result",")",";","}","else","if","(","UserTaskInstanceDesc",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of UserTaskInstanceDesc to TaskInstanceList\"",")",";","actualResult","=","convertToTaskInstanceList","(","(","Collection","<","UserTaskInstanceDesc",">",")","result",")",";","}","else","if","(","TaskSummary",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of TaskSummary to TaskSummaryList\"",")",";","actualResult","=","convertToTaskSummaryList","(","(","Collection","<","TaskSummary",">",")","result",")",";","}","else","if","(","ExecutionError",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of ExecutionError to ErrorInstanceList\"",")",";","actualResult","=","convertToErrorInstanceList","(","(","List","<","ExecutionError",">",")","result",")",";","}","else","if","(","List",".","class",".","isAssignableFrom","(","resultMapper",".","getType","(",")",")",")","{","logger",".","debug","(","\"Converting collection of List to ArrayList\"",")",";","actualResult","=","new","ArrayList","(","(","Collection",")","result",")",";","}","else","{","logger",".","debug","(","\"Convert not supported for custom type {}\"",",","resultMapper",".","getType","(",")",")",";","actualResult","=","result",";","}","logger",".","debug","(","\"Actual result after converting is {}\"",",","actualResult",")",";","}","else","{","logger",".","debug","(","\"Result is not a collection - {}, skipping any conversion\"",",","result",")",";","actualResult","=","result",";","}","return","actualResult",";","}"],"func_documentation_string":"\/*\nhelper methods","func_documentation_tokens":["\/","*","helper","methods"],"label":0,"text":"\/*\nhelper methods[SEP]@SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    protected Object transform(Object result, QueryResultMapper resultMapper) {\n        Object actualResult = null;\n        if (result instanceof Collection) {\n\n            if (ProcessInstanceCustomDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ProcessInstanceCustomDesc to ProcessInstanceCustomList\");\n                actualResult = convertToProcessInstanceCustomVarsList((Collection<ProcessInstanceCustomDesc>) result);\n            } else if (ProcessInstanceWithVarsDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ProcessInstanceWithVarsDesc to ProcessInstanceList\");\n                actualResult = convertToProcessInstanceWithVarsList((Collection<ProcessInstanceWithVarsDesc>) result);\n            } else if (ProcessInstanceDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ProcessInstanceDesc to ProcessInstanceList\");\n                actualResult = convertToProcessInstanceList((Collection<ProcessInstanceDesc>) result);\n            } else if (UserTaskInstanceWithVarsDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of UserTaskInstanceWithVarsDesc to TaskInstanceList\");\n                actualResult = convertToTaskInstanceWithVarsList((Collection<UserTaskInstanceWithVarsDesc>) result);\n            } else if (UserTaskInstanceWithPotOwnerDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of UserTaskInstanceWithPotOwnerDesc to TaskInstanceList\");\n                actualResult = convertToTaskInstanceListPO((Collection<UserTaskInstanceWithPotOwnerDesc>) result);\n            } else if (UserTaskInstanceDesc.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of UserTaskInstanceDesc to TaskInstanceList\");\n                actualResult = convertToTaskInstanceList((Collection<UserTaskInstanceDesc>) result);\n            } else if (TaskSummary.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of TaskSummary to TaskSummaryList\");\n                actualResult = convertToTaskSummaryList((Collection<TaskSummary>) result);\n            } else if (ExecutionError.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of ExecutionError to ErrorInstanceList\");\n                actualResult = convertToErrorInstanceList((List<ExecutionError>) result);\n            } else if (List.class.isAssignableFrom(resultMapper.getType())) {\n\n                logger.debug(\"Converting collection of List to ArrayList\");\n                actualResult = new ArrayList((Collection) result);\n            }else {\n\n                logger.debug(\"Convert not supported for custom type {}\", resultMapper.getType());\n                actualResult = result;\n            }\n\n            logger.debug(\"Actual result after converting is {}\", actualResult);\n        } else {\n            logger.debug(\"Result is not a collection - {}, skipping any conversion\", result);\n            actualResult = result;\n        }\n        return actualResult;\n    }"}
{"func_code_string":"public static String htmlDecode(final String encodedHtml) {\n        validate(encodedHtml, NULL_STRING_PREDICATE, NULL_STRING_MSG_SUPPLIER);\n        String[] entities = encodedHtml.split(\"&\\\\W+;\");\n        return Arrays.stream(entities).map(e -> HtmlEntities.decodedEntities.get(e)).collect(joining());\n    }","func_code_tokens":["public","static","String","htmlDecode","(","final","String","encodedHtml",")","{","validate","(","encodedHtml",",","NULL_STRING_PREDICATE",",","NULL_STRING_MSG_SUPPLIER",")",";","String","[","]","entities","=","encodedHtml",".","split","(","\"&\\\\W+;\"",")",";","return","Arrays",".","stream","(","entities",")",".","map","(","e","->","HtmlEntities",".","decodedEntities",".","get","(","e",")",")",".","collect","(","joining","(",")",")",";","}"],"func_documentation_string":"Converts all HTML entities to applicable characters.\n\n@param encodedHtml The encoded HTML\n@return The decoded HTML","func_documentation_tokens":["Converts","all","HTML","entities","to","applicable","characters","."],"label":0,"text":"Converts all HTML entities to applicable characters.\n\n@param encodedHtml The encoded HTML\n@return The decoded HTML[SEP]public static String htmlDecode(final String encodedHtml) {\n        validate(encodedHtml, NULL_STRING_PREDICATE, NULL_STRING_MSG_SUPPLIER);\n        String[] entities = encodedHtml.split(\"&\\\\W+;\");\n        return Arrays.stream(entities).map(e -> HtmlEntities.decodedEntities.get(e)).collect(joining());\n    }"}
{"func_code_string":"@Override\n  public EventRequest deserialize(JsonElement json, Type typeOfT,\n      JsonDeserializationContext context)\n      throws JsonParseException {\n    Gson gson = new GsonBuilder()\n        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .create();\n\n    \/\/ API versions 2017-05-25 and earlier render `request` as a string\n    \/\/ instead of a JSON object\n    if (json.isJsonPrimitive()) {\n      EventRequest request = new EventRequest();\n      request.setId(json.getAsString());\n      return request;\n    } else {\n      return gson.fromJson(json, typeOfT);\n    }\n  }","func_code_tokens":["@","Override","public","EventRequest","deserialize","(","JsonElement","json",",","Type","typeOfT",",","JsonDeserializationContext","context",")","throws","JsonParseException","{","Gson","gson","=","new","GsonBuilder","(",")",".","setFieldNamingPolicy","(","FieldNamingPolicy",".","LOWER_CASE_WITH_UNDERSCORES",")",".","create","(",")",";","\/\/ API versions 2017-05-25 and earlier render `request` as a string","\/\/ instead of a JSON object","if","(","json",".","isJsonPrimitive","(",")",")","{","EventRequest","request","=","new","EventRequest","(",")",";","request",".","setId","(","json",".","getAsString","(",")",")",";","return","request",";","}","else","{","return","gson",".","fromJson","(","json",",","typeOfT",")",";","}","}"],"func_documentation_string":"Deserializes the JSON payload contained in an event's {@code request} attribute into an\n{@link EventRequest} instance.","func_documentation_tokens":["Deserializes","the","JSON","payload","contained","in","an","event","s","{"],"label":1,"text":"Deserializes the JSON payload contained in an event's {@code request} attribute into an\n{@link EventRequest} instance.[SEP]@Override\n  public EventRequest deserialize(JsonElement json, Type typeOfT,\n      JsonDeserializationContext context)\n      throws JsonParseException {\n    Gson gson = new GsonBuilder()\n        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .create();\n\n    \/\/ API versions 2017-05-25 and earlier render `request` as a string\n    \/\/ instead of a JSON object\n    if (json.isJsonPrimitive()) {\n      EventRequest request = new EventRequest();\n      request.setId(json.getAsString());\n      return request;\n    } else {\n      return gson.fromJson(json, typeOfT);\n    }\n  }"}
{"func_code_string":"public List<Permutation> all() {\n        final List<Permutation> permutations = new ArrayList<Permutation>();\n        Backtracker counter = new Backtracker() {\n\n            @Override\n            public void applyTo(Permutation p) {\n                permutations.add(p);\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n        };\n        this.apply(counter);\n        return permutations;\n    }","func_code_tokens":["public","List","<","Permutation",">","all","(",")","{","final","List","<","Permutation",">","permutations","=","new","ArrayList","<","Permutation",">","(",")",";","Backtracker","counter","=","new","Backtracker","(",")","{","@","Override","public","void","applyTo","(","Permutation","p",")","{","permutations",".","add","(","p",")",";","}","@","Override","public","boolean","isFinished","(",")","{","return","false",";","}","}",";","this",".","apply","(","counter",")",";","return","permutations",";","}"],"func_documentation_string":"Generate the whole group from the compact list of permutations.\n\n@return a list of permutations","func_documentation_tokens":["Generate","the","whole","group","from","the","compact","list","of","permutations","."],"label":1,"text":"Generate the whole group from the compact list of permutations.\n\n@return a list of permutations[SEP]public List<Permutation> all() {\n        final List<Permutation> permutations = new ArrayList<Permutation>();\n        Backtracker counter = new Backtracker() {\n\n            @Override\n            public void applyTo(Permutation p) {\n                permutations.add(p);\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n        };\n        this.apply(counter);\n        return permutations;\n    }"}
{"func_code_string":"private static GeometricParity geometric3D(int i, int[] adjacent, IAtomContainer container) {\n\n        IAtom atom = container.getAtom(i);\n        Point3d[] coordinates = new Point3d[4];\n\n        \/\/ set the forth ligand to centre as default (overwritten if\n        \/\/ we have 4 neighbors)\n        if (atom.getPoint3d() != null)\n            coordinates[3] = atom.getPoint3d();\n        else\n            return null;\n\n        \/\/ for each neighboring atom check if we have 3D coordinates\n        for (int j = 0; j < adjacent.length; j++) {\n            IAtom neighbor = container.getAtom(adjacent[j]);\n\n            if (neighbor.getPoint3d() != null)\n                coordinates[j] = neighbor.getPoint3d();\n            else\n                return null; \/\/ skip to next atom\n        }\n\n        \/\/ add new 3D stereo encoder\n        return new Tetrahedral3DParity(coordinates);\n\n    }","func_code_tokens":["private","static","GeometricParity","geometric3D","(","int","i",",","int","[","]","adjacent",",","IAtomContainer","container",")","{","IAtom","atom","=","container",".","getAtom","(","i",")",";","Point3d","[","]","coordinates","=","new","Point3d","[","4","]",";","\/\/ set the forth ligand to centre as default (overwritten if","\/\/ we have 4 neighbors)","if","(","atom",".","getPoint3d","(",")","!=","null",")","coordinates","[","3","]","=","atom",".","getPoint3d","(",")",";","else","return","null",";","\/\/ for each neighboring atom check if we have 3D coordinates","for","(","int","j","=","0",";","j","<","adjacent",".","length",";","j","++",")","{","IAtom","neighbor","=","container",".","getAtom","(","adjacent","[","j","]",")",";","if","(","neighbor",".","getPoint3d","(",")","!=","null",")","coordinates","[","j","]","=","neighbor",".","getPoint3d","(",")",";","else","return","null",";","\/\/ skip to next atom","}","\/\/ add new 3D stereo encoder","return","new","Tetrahedral3DParity","(","coordinates",")",";","}"],"func_documentation_string":"Create the geometric part of an encoder of 3D configurations\n\n@param i         the central atom (index)\n@param adjacent  adjacent atoms (indices)\n@param container container\n@return geometric parity encoder (or null)","func_documentation_tokens":["Create","the","geometric","part","of","an","encoder","of","3D","configurations"],"label":0,"text":"Create the geometric part of an encoder of 3D configurations\n\n@param i         the central atom (index)\n@param adjacent  adjacent atoms (indices)\n@param container container\n@return geometric parity encoder (or null)[SEP]private static GeometricParity geometric3D(int i, int[] adjacent, IAtomContainer container) {\n\n        IAtom atom = container.getAtom(i);\n        Point3d[] coordinates = new Point3d[4];\n\n        \/\/ set the forth ligand to centre as default (overwritten if\n        \/\/ we have 4 neighbors)\n        if (atom.getPoint3d() != null)\n            coordinates[3] = atom.getPoint3d();\n        else\n            return null;\n\n        \/\/ for each neighboring atom check if we have 3D coordinates\n        for (int j = 0; j < adjacent.length; j++) {\n            IAtom neighbor = container.getAtom(adjacent[j]);\n\n            if (neighbor.getPoint3d() != null)\n                coordinates[j] = neighbor.getPoint3d();\n            else\n                return null; \/\/ skip to next atom\n        }\n\n        \/\/ add new 3D stereo encoder\n        return new Tetrahedral3DParity(coordinates);\n\n    }"}
{"func_code_string":"TextOutline positionChargeLabel(int hydrogens, HydrogenPosition position, TextOutline charge, TextOutline element,\n                                    TextOutline hydrogen) {\n\n        final Rectangle2D chargeBounds = charge.getBounds();\n\n        \/\/ the charge is placed to the top right of the element symbol\n        \/\/ unless either the hydrogen label or the hydrogen count label\n        \/\/ are in the way - in which case we place it relative to the\n        \/\/ hydrogen\n        Rectangle2D referenceBounds = element.getBounds();\n        if (hydrogens > 0 && position == Right)\n            referenceBounds = hydrogen.getBounds();\n        else if (hydrogens > 1 && position == Above) referenceBounds = hydrogen.getBounds();\n\n        return charge.translate((referenceBounds.getMaxX() + padding) - chargeBounds.getMinX(),\n                                (referenceBounds.getMinY() - (chargeBounds.getHeight() \/ 2)) - chargeBounds.getMinY());\n    }","func_code_tokens":["TextOutline","positionChargeLabel","(","int","hydrogens",",","HydrogenPosition","position",",","TextOutline","charge",",","TextOutline","element",",","TextOutline","hydrogen",")","{","final","Rectangle2D","chargeBounds","=","charge",".","getBounds","(",")",";","\/\/ the charge is placed to the top right of the element symbol","\/\/ unless either the hydrogen label or the hydrogen count label","\/\/ are in the way - in which case we place it relative to the","\/\/ hydrogen","Rectangle2D","referenceBounds","=","element",".","getBounds","(",")",";","if","(","hydrogens",">","0","&&","position","==","Right",")","referenceBounds","=","hydrogen",".","getBounds","(",")",";","else","if","(","hydrogens",">","1","&&","position","==","Above",")","referenceBounds","=","hydrogen",".","getBounds","(",")",";","return","charge",".","translate","(","(","referenceBounds",".","getMaxX","(",")","+","padding",")","-","chargeBounds",".","getMinX","(",")",",","(","referenceBounds",".","getMinY","(",")","-","(","chargeBounds",".","getHeight","(",")","\/","2",")",")","-","chargeBounds",".","getMinY","(",")",")",";","}"],"func_documentation_string":"Position the charge label on the top right of either the element or hydrogen label. Where the\ncharge is placed depends on the number of hydrogens and their position relative to the\nelement symbol.\n\n@param hydrogens number of hydrogen\n@param position  position of hydrogen\n@param charge    the charge label outline (to be positioned)\n@param element   the element label outline\n@param hydrogen  the hydrogen label outline\n@return positioned charge label","func_documentation_tokens":["Position","the","charge","label","on","the","top","right","of","either","the","element","or","hydrogen","label",".","Where","the","charge","is","placed","depends","on","the","number","of","hydrogens","and","their","position","relative","to","the","element","symbol","."],"label":0,"text":"Position the charge label on the top right of either the element or hydrogen label. Where the\ncharge is placed depends on the number of hydrogens and their position relative to the\nelement symbol.\n\n@param hydrogens number of hydrogen\n@param position  position of hydrogen\n@param charge    the charge label outline (to be positioned)\n@param element   the element label outline\n@param hydrogen  the hydrogen label outline\n@return positioned charge label[SEP]TextOutline positionChargeLabel(int hydrogens, HydrogenPosition position, TextOutline charge, TextOutline element,\n                                    TextOutline hydrogen) {\n\n        final Rectangle2D chargeBounds = charge.getBounds();\n\n        \/\/ the charge is placed to the top right of the element symbol\n        \/\/ unless either the hydrogen label or the hydrogen count label\n        \/\/ are in the way - in which case we place it relative to the\n        \/\/ hydrogen\n        Rectangle2D referenceBounds = element.getBounds();\n        if (hydrogens > 0 && position == Right)\n            referenceBounds = hydrogen.getBounds();\n        else if (hydrogens > 1 && position == Above) referenceBounds = hydrogen.getBounds();\n\n        return charge.translate((referenceBounds.getMaxX() + padding) - chargeBounds.getMinX(),\n                                (referenceBounds.getMinY() - (chargeBounds.getHeight() \/ 2)) - chargeBounds.getMinY());\n    }"}
{"func_code_string":"public Point3d[] get3DCoordinatesForSP3Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle) {\n        \/\/logger.debug(\"SP3 Ligands start \");\n        Point3d newPoints[] = new Point3d[0];\n        Point3d aPoint = refAtom.getPoint3d();\n        int nwithCoords = withCoords.getAtomCount();\n        if (angle < 0) {\n            angle = TETRAHEDRAL_ANGLE;\n        }\n        if (nwithCoords == 0) {\n            newPoints = calculate3DCoordinates0(refAtom.getPoint3d(), nwanted, length);\n        } else if (nwithCoords == 1) {\n            newPoints = calculate3DCoordinates1(aPoint, (withCoords.getAtom(0)).getPoint3d(),\n                    (atomC != null) ? atomC.getPoint3d() : null, nwanted, length, angle);\n        } else if (nwithCoords == 2) {\n            Point3d bPoint = withCoords.getAtom(0).getPoint3d();\n            Point3d cPoint = withCoords.getAtom(1).getPoint3d();\n            newPoints = calculate3DCoordinates2(aPoint, bPoint, cPoint, nwanted, length, angle);\n        } else if (nwithCoords == 3) {\n            Point3d bPoint = withCoords.getAtom(0).getPoint3d();\n            Point3d cPoint = withCoords.getAtom(1).getPoint3d();\n            newPoints = new Point3d[1];\n            Point3d dPoint = withCoords.getAtom(2).getPoint3d();\n            newPoints[0] = calculate3DCoordinates3(aPoint, bPoint, cPoint, dPoint, length);\n        }\n        \/\/logger.debug(\"...Ready\");\n        return newPoints;\n    }","func_code_tokens":["public","Point3d","[","]","get3DCoordinatesForSP3Ligands","(","IAtom","refAtom",",","IAtomContainer","noCoords",",","IAtomContainer","withCoords",",","IAtom","atomC",",","int","nwanted",",","double","length",",","double","angle",")","{","\/\/logger.debug(\"SP3 Ligands start \");","Point3d","newPoints","[","]","=","new","Point3d","[","0","]",";","Point3d","aPoint","=","refAtom",".","getPoint3d","(",")",";","int","nwithCoords","=","withCoords",".","getAtomCount","(",")",";","if","(","angle","<","0",")","{","angle","=","TETRAHEDRAL_ANGLE",";","}","if","(","nwithCoords","==","0",")","{","newPoints","=","calculate3DCoordinates0","(","refAtom",".","getPoint3d","(",")",",","nwanted",",","length",")",";","}","else","if","(","nwithCoords","==","1",")","{","newPoints","=","calculate3DCoordinates1","(","aPoint",",","(","withCoords",".","getAtom","(","0",")",")",".","getPoint3d","(",")",",","(","atomC","!=","null",")","?","atomC",".","getPoint3d","(",")",":","null",",","nwanted",",","length",",","angle",")",";","}","else","if","(","nwithCoords","==","2",")","{","Point3d","bPoint","=","withCoords",".","getAtom","(","0",")",".","getPoint3d","(",")",";","Point3d","cPoint","=","withCoords",".","getAtom","(","1",")",".","getPoint3d","(",")",";","newPoints","=","calculate3DCoordinates2","(","aPoint",",","bPoint",",","cPoint",",","nwanted",",","length",",","angle",")",";","}","else","if","(","nwithCoords","==","3",")","{","Point3d","bPoint","=","withCoords",".","getAtom","(","0",")",".","getPoint3d","(",")",";","Point3d","cPoint","=","withCoords",".","getAtom","(","1",")",".","getPoint3d","(",")",";","newPoints","=","new","Point3d","[","1","]",";","Point3d","dPoint","=","withCoords",".","getAtom","(","2",")",".","getPoint3d","(",")",";","newPoints","[","0","]","=","calculate3DCoordinates3","(","aPoint",",","bPoint",",","cPoint",",","dPoint",",","length",")",";","}","\/\/logger.debug(\"...Ready\");","return","newPoints",";","}"],"func_documentation_string":"Main method for the calculation of the ligand coordinates for sp3 atoms.\nDecides how many coordinates should be created\n\n@param  refAtom            central atom (Atom)\n@param  nwanted            how many ligands should be created\n@param  length             bond length\n@param  angle              angle in a B-A-(X) system; a=central atom;\nx=ligand with unknown coordinates\n@param  noCoords           Description of the Parameter\n@param  withCoords         Description of the Parameter\n@param  atomC              Description of the Parameter\n@return                    Description of the Return Value","func_documentation_tokens":["Main","method","for","the","calculation","of","the","ligand","coordinates","for","sp3","atoms",".","Decides","how","many","coordinates","should","be","created"],"label":0,"text":"Main method for the calculation of the ligand coordinates for sp3 atoms.\nDecides how many coordinates should be created\n\n@param  refAtom            central atom (Atom)\n@param  nwanted            how many ligands should be created\n@param  length             bond length\n@param  angle              angle in a B-A-(X) system; a=central atom;\nx=ligand with unknown coordinates\n@param  noCoords           Description of the Parameter\n@param  withCoords         Description of the Parameter\n@param  atomC              Description of the Parameter\n@return                    Description of the Return Value[SEP]public Point3d[] get3DCoordinatesForSP3Ligands(IAtom refAtom, IAtomContainer noCoords, IAtomContainer withCoords,\n            IAtom atomC, int nwanted, double length, double angle) {\n        \/\/logger.debug(\"SP3 Ligands start \");\n        Point3d newPoints[] = new Point3d[0];\n        Point3d aPoint = refAtom.getPoint3d();\n        int nwithCoords = withCoords.getAtomCount();\n        if (angle < 0) {\n            angle = TETRAHEDRAL_ANGLE;\n        }\n        if (nwithCoords == 0) {\n            newPoints = calculate3DCoordinates0(refAtom.getPoint3d(), nwanted, length);\n        } else if (nwithCoords == 1) {\n            newPoints = calculate3DCoordinates1(aPoint, (withCoords.getAtom(0)).getPoint3d(),\n                    (atomC != null) ? atomC.getPoint3d() : null, nwanted, length, angle);\n        } else if (nwithCoords == 2) {\n            Point3d bPoint = withCoords.getAtom(0).getPoint3d();\n            Point3d cPoint = withCoords.getAtom(1).getPoint3d();\n            newPoints = calculate3DCoordinates2(aPoint, bPoint, cPoint, nwanted, length, angle);\n        } else if (nwithCoords == 3) {\n            Point3d bPoint = withCoords.getAtom(0).getPoint3d();\n            Point3d cPoint = withCoords.getAtom(1).getPoint3d();\n            newPoints = new Point3d[1];\n            Point3d dPoint = withCoords.getAtom(2).getPoint3d();\n            newPoints[0] = calculate3DCoordinates3(aPoint, bPoint, cPoint, dPoint, length);\n        }\n        \/\/logger.debug(\"...Ready\");\n        return newPoints;\n    }"}
{"func_code_string":"public Permutation multiply(Permutation other) {\n        Permutation newPermutation = new Permutation(values.length);\n        for (int i = 0; i < values.length; i++) {\n            newPermutation.values[i] = this.values[other.values[i]];\n        }\n        return newPermutation;\n    }","func_code_tokens":["public","Permutation","multiply","(","Permutation","other",")","{","Permutation","newPermutation","=","new","Permutation","(","values",".","length",")",";","for","(","int","i","=","0",";","i","<","values",".","length",";","i","++",")","{","newPermutation",".","values","[","i","]","=","this",".","values","[","other",".","values","[","i","]","]",";","}","return","newPermutation",";","}"],"func_documentation_string":"Multiply this permutation by another such that for all i,\nthis[i] = this[other[i]].\n\n@param other the other permutation to use\n@return a new permutation with the result of multiplying the permutations","func_documentation_tokens":["Multiply","this","permutation","by","another","such","that","for","all","i","this","[","i","]","=","this","[","other","[","i","]]","."],"label":0,"text":"Multiply this permutation by another such that for all i,\nthis[i] = this[other[i]].\n\n@param other the other permutation to use\n@return a new permutation with the result of multiplying the permutations[SEP]public Permutation multiply(Permutation other) {\n        Permutation newPermutation = new Permutation(values.length);\n        for (int i = 0; i < values.length; i++) {\n            newPermutation.values[i] = this.values[other.values[i]];\n        }\n        return newPermutation;\n    }"}
{"func_code_string":"@Override\n    public void sortAtomContainers(final Comparator<IAtomContainer> comparator) {\n\n        \/\/ need to use boxed primitives as we can't customise sorting of int primitives\n        Integer[] indexes = new Integer[atomContainerCount];\n        for (int i = 0; i < indexes.length; i++)\n            indexes[i] = i;\n\n        \/\/ proxy the index comparison to the atom container comparator\n        Arrays.sort(indexes, new Comparator<Integer>() {\n\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return comparator.compare(atomContainers[o1], atomContainers[o2]);\n            }\n        });\n\n        \/\/ copy the original arrays (we could modify in place with swaps but this is cleaner)\n        IAtomContainer[] containersTmp = Arrays.copyOf(atomContainers, indexes.length);\n        Double[] multipliersTmp = Arrays.copyOf(multipliers, indexes.length);\n\n        \/\/ order the arrays based on the order of the indices\n        for (int i = 0; i < indexes.length; i++) {\n            atomContainers[i] = containersTmp[indexes[i]];\n            multipliers[i] = multipliersTmp[indexes[i]];\n        }\n\n    }","func_code_tokens":["@","Override","public","void","sortAtomContainers","(","final","Comparator","<","IAtomContainer",">","comparator",")","{","\/\/ need to use boxed primitives as we can't customise sorting of int primitives","Integer","[","]","indexes","=","new","Integer","[","atomContainerCount","]",";","for","(","int","i","=","0",";","i","<","indexes",".","length",";","i","++",")","indexes","[","i","]","=","i",";","\/\/ proxy the index comparison to the atom container comparator","Arrays",".","sort","(","indexes",",","new","Comparator","<","Integer",">","(",")","{","@","Override","public","int","compare","(","Integer","o1",",","Integer","o2",")","{","return","comparator",".","compare","(","atomContainers","[","o1","]",",","atomContainers","[","o2","]",")",";","}","}",")",";","\/\/ copy the original arrays (we could modify in place with swaps but this is cleaner)","IAtomContainer","[","]","containersTmp","=","Arrays",".","copyOf","(","atomContainers",",","indexes",".","length",")",";","Double","[","]","multipliersTmp","=","Arrays",".","copyOf","(","multipliers",",","indexes",".","length",")",";","\/\/ order the arrays based on the order of the indices","for","(","int","i","=","0",";","i","<","indexes",".","length",";","i","++",")","{","atomContainers","[","i","]","=","containersTmp","[","indexes","[","i","]","]",";","multipliers","[","i","]","=","multipliersTmp","[","indexes","[","i","]","]",";","}","}"],"func_documentation_string":"Sort the AtomContainers and multipliers using a provided Comparator.\n@param comparator defines the sorting method","func_documentation_tokens":["Sort","the","AtomContainers","and","multipliers","using","a","provided","Comparator","."],"label":1,"text":"Sort the AtomContainers and multipliers using a provided Comparator.\n@param comparator defines the sorting method[SEP]@Override\n    public void sortAtomContainers(final Comparator<IAtomContainer> comparator) {\n\n        \/\/ need to use boxed primitives as we can't customise sorting of int primitives\n        Integer[] indexes = new Integer[atomContainerCount];\n        for (int i = 0; i < indexes.length; i++)\n            indexes[i] = i;\n\n        \/\/ proxy the index comparison to the atom container comparator\n        Arrays.sort(indexes, new Comparator<Integer>() {\n\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return comparator.compare(atomContainers[o1], atomContainers[o2]);\n            }\n        });\n\n        \/\/ copy the original arrays (we could modify in place with swaps but this is cleaner)\n        IAtomContainer[] containersTmp = Arrays.copyOf(atomContainers, indexes.length);\n        Double[] multipliersTmp = Arrays.copyOf(multipliers, indexes.length);\n\n        \/\/ order the arrays based on the order of the indices\n        for (int i = 0; i < indexes.length; i++) {\n            atomContainers[i] = containersTmp[indexes[i]];\n            multipliers[i] = multipliersTmp[indexes[i]];\n        }\n\n    }"}
{"func_code_string":"private Properties readPropertyFile(String file) throws IOException {\n        String fileName = file.startsWith(\"\/\") ? file : \"\/\" + file;\n        LOGGER.info(\"Reading properties from: \" + fileName + \". Will try classpath, then file system.\");\n        return Util.readProperties(fileName);\n    }","func_code_tokens":["private","Properties","readPropertyFile","(","String","file",")","throws","IOException","{","String","fileName","=","file",".","startsWith","(","\"\/\"",")","?","file",":","\"\/\"","+","file",";","LOGGER",".","info","(","\"Reading properties from: \"","+","fileName","+","\". Will try classpath, then file system.\"",")",";","return","Util",".","readProperties","(","fileName",")",";","}"],"func_documentation_string":"read from classpath, if not found, read from file system. If not found there, throw exception","func_documentation_tokens":["read","from","classpath","if","not","found","read","from","file","system",".","If","not","found","there","throw","exception"],"label":1,"text":"read from classpath, if not found, read from file system. If not found there, throw exception[SEP]private Properties readPropertyFile(String file) throws IOException {\n        String fileName = file.startsWith(\"\/\") ? file : \"\/\" + file;\n        LOGGER.info(\"Reading properties from: \" + fileName + \". Will try classpath, then file system.\");\n        return Util.readProperties(fileName);\n    }"}
{"func_code_string":"@SuppressWarnings(\"unchecked\")\n    public final T[] filter(final T[] objects) {\n        final Collection<T> filtered = filter(Arrays.asList(objects));\n        try {\n            return filtered.toArray((T[]) Array.newInstance(objects\n                    .getClass(), filtered.size()));\n        } catch (ArrayStoreException ase) {\n            Logger log = LoggerFactory.getLogger(Filter.class);\n            log.warn(\"Error converting to array - using default approach\", ase);\n        }\n        return (T[]) filtered.toArray();\n    }","func_code_tokens":["@","SuppressWarnings","(","\"unchecked\"",")","public","final","T","[","]","filter","(","final","T","[","]","objects",")","{","final","Collection","<","T",">","filtered","=","filter","(","Arrays",".","asList","(","objects",")",")",";","try","{","return","filtered",".","toArray","(","(","T","[","]",")","Array",".","newInstance","(","objects",".","getClass","(",")",",","filtered",".","size","(",")",")",")",";","}","catch","(","ArrayStoreException","ase",")","{","Logger","log","=","LoggerFactory",".","getLogger","(","Filter",".","class",")",";","log",".","warn","(","\"Error converting to array - using default approach\"",",","ase",")",";","}","return","(","T","[","]",")","filtered",".","toArray","(",")",";","}"],"func_documentation_string":"Returns a filtered subset of the specified array.\n\n@param objects an array to filter\n@return a filtered array","func_documentation_tokens":["Returns","a","filtered","subset","of","the","specified","array","."],"label":1,"text":"Returns a filtered subset of the specified array.\n\n@param objects an array to filter\n@return a filtered array[SEP]@SuppressWarnings(\"unchecked\")\n    public final T[] filter(final T[] objects) {\n        final Collection<T> filtered = filter(Arrays.asList(objects));\n        try {\n            return filtered.toArray((T[]) Array.newInstance(objects\n                    .getClass(), filtered.size()));\n        } catch (ArrayStoreException ase) {\n            Logger log = LoggerFactory.getLogger(Filter.class);\n            log.warn(\"Error converting to array - using default approach\", ase);\n        }\n        return (T[]) filtered.toArray();\n    }"}
{"func_code_string":"public void copySingleFile(File asset) {\n        try {\n            if ( !asset.isDirectory() ) {\n                String targetPath = config.getDestinationFolder().getCanonicalPath() + File.separatorChar + assetSubPath(asset);\n                LOGGER.info(\"Copying single asset file to [{}]\", targetPath);\n                copyFile(asset, new File(targetPath));\n            } else {\n                LOGGER.info(\"Skip copying single asset file [{}]. Is a directory.\", asset.getPath());\n            }\n        } catch (IOException io) {\n            LOGGER.error(\"Failed to copy the asset file.\", io);\n        }\n    }","func_code_tokens":["public","void","copySingleFile","(","File","asset",")","{","try","{","if","(","!","asset",".","isDirectory","(",")",")","{","String","targetPath","=","config",".","getDestinationFolder","(",")",".","getCanonicalPath","(",")","+","File",".","separatorChar","+","assetSubPath","(","asset",")",";","LOGGER",".","info","(","\"Copying single asset file to [{}]\"",",","targetPath",")",";","copyFile","(","asset",",","new","File","(","targetPath",")",")",";","}","else","{","LOGGER",".","info","(","\"Skip copying single asset file [{}]. Is a directory.\"",",","asset",".","getPath","(",")",")",";","}","}","catch","(","IOException","io",")","{","LOGGER",".","error","(","\"Failed to copy the asset file.\"",",","io",")",";","}","}"],"func_documentation_string":"Copy one asset file at a time.\n\n@param asset The asset file to copy","func_documentation_tokens":["Copy","one","asset","file","at","a","time","."],"label":1,"text":"Copy one asset file at a time.\n\n@param asset The asset file to copy[SEP]public void copySingleFile(File asset) {\n        try {\n            if ( !asset.isDirectory() ) {\n                String targetPath = config.getDestinationFolder().getCanonicalPath() + File.separatorChar + assetSubPath(asset);\n                LOGGER.info(\"Copying single asset file to [{}]\", targetPath);\n                copyFile(asset, new File(targetPath));\n            } else {\n                LOGGER.info(\"Skip copying single asset file [{}]. Is a directory.\", asset.getPath());\n            }\n        } catch (IOException io) {\n            LOGGER.error(\"Failed to copy the asset file.\", io);\n        }\n    }"}
{"func_code_string":"private static int decode(final int hex) {\n        if (hex >= CcHex.BACK.length) {\n            throw new DecodingException(\n                String.format(\"invalid hex char: 0x%2x\", hex)\n            );\n        }\n        final int dec = CcHex.BACK[hex];\n        if (dec < 0) {\n            throw new DecodingException(\n                String.format(\"invalid hex character: 0x%2x\", hex)\n            );\n        }\n        return dec;\n    }","func_code_tokens":["private","static","int","decode","(","final","int","hex",")","{","if","(","hex",">=","CcHex",".","BACK",".","length",")","{","throw","new","DecodingException","(","String",".","format","(","\"invalid hex char: 0x%2x\"",",","hex",")",")",";","}","final","int","dec","=","CcHex",".","BACK","[","hex","]",";","if","(","dec","<","0",")","{","throw","new","DecodingException","(","String",".","format","(","\"invalid hex character: 0x%2x\"",",","hex",")",")",";","}","return","dec",";","}"],"func_documentation_string":"Convert hex to number.\n@param hex Hex number\n@return Decoded","func_documentation_tokens":["Convert","hex","to","number","."],"label":0,"text":"Convert hex to number.\n@param hex Hex number\n@return Decoded[SEP]private static int decode(final int hex) {\n        if (hex >= CcHex.BACK.length) {\n            throw new DecodingException(\n                String.format(\"invalid hex char: 0x%2x\", hex)\n            );\n        }\n        final int dec = CcHex.BACK[hex];\n        if (dec < 0) {\n            throw new DecodingException(\n                String.format(\"invalid hex character: 0x%2x\", hex)\n            );\n        }\n        return dec;\n    }"}
{"func_code_string":"private static int parseInt(String str, int defaultValue) {\n        \n        if (str == null)\n            return defaultValue;\n        \n        return Integer.parseInt(str);\n\n    }","func_code_tokens":["private","static","int","parseInt","(","String","str",",","int","defaultValue",")","{","if","(","str","==","null",")","return","defaultValue",";","return","Integer",".","parseInt","(","str",")",";","}"],"func_documentation_string":"Parse the given string as an integer, returning the provided default\nvalue if the string is null.\n\n@param str\nThe string to parse as an integer.\n\n@param defaultValue\nThe value to return if <code>str<\/code> is null.\n\n@return\nThe parsed value, or the provided default value if <code>str<\/code>\nis null.","func_documentation_tokens":["Parse","the","given","string","as","an","integer","returning","the","provided","default","value","if","the","string","is","null","."],"label":0,"text":"Parse the given string as an integer, returning the provided default\nvalue if the string is null.\n\n@param str\nThe string to parse as an integer.\n\n@param defaultValue\nThe value to return if <code>str<\/code> is null.\n\n@return\nThe parsed value, or the provided default value if <code>str<\/code>\nis null.[SEP]private static int parseInt(String str, int defaultValue) {\n        \n        if (str == null)\n            return defaultValue;\n        \n        return Integer.parseInt(str);\n\n    }"}
{"func_code_string":"public static IntStreamEx of(Random random, int randomNumberOrigin, int randomNumberBound) {\n        return seq(random.ints(randomNumberOrigin, randomNumberBound));\n    }","func_code_tokens":["public","static","IntStreamEx","of","(","Random","random",",","int","randomNumberOrigin",",","int","randomNumberBound",")","{","return","seq","(","random",".","ints","(","randomNumberOrigin",",","randomNumberBound",")",")",";","}"],"func_documentation_string":"Returns an effectively unlimited stream of pseudorandom {@code int}\nvalues, each conforming to the given origin (inclusive) and bound\n(exclusive).\n\n@param random a {@link Random} object to produce the stream from\n@param randomNumberOrigin the origin (inclusive) of each random value\n@param randomNumberBound the bound (exclusive) of each random value\n@return a stream of pseudorandom {@code int} values\n@see Random#ints(long, int, int)","func_documentation_tokens":["Returns","an","effectively","unlimited","stream","of","pseudorandom","{","@code","int","}","values","each","conforming","to","the","given","origin","(","inclusive",")","and","bound","(","exclusive",")","."],"label":1,"text":"Returns an effectively unlimited stream of pseudorandom {@code int}\nvalues, each conforming to the given origin (inclusive) and bound\n(exclusive).\n\n@param random a {@link Random} object to produce the stream from\n@param randomNumberOrigin the origin (inclusive) of each random value\n@param randomNumberBound the bound (exclusive) of each random value\n@return a stream of pseudorandom {@code int} values\n@see Random#ints(long, int, int)[SEP]public static IntStreamEx of(Random random, int randomNumberOrigin, int randomNumberBound) {\n        return seq(random.ints(randomNumberOrigin, randomNumberBound));\n    }"}
{"func_code_string":"@SuppressWarnings(\"unchecked\")\n    public <A> A[] toArray(A[] emptyArray) {\n        if(emptyArray.length != 0) {\n            throw new IllegalArgumentException(\"Empty array must be supplied\");\n        }\n        return stream().toArray(size -> size == 0 ? emptyArray\n                : (A[]) Array.newInstance(emptyArray.getClass().getComponentType(), size));\n    }","func_code_tokens":["@","SuppressWarnings","(","\"unchecked\"",")","public","<","A",">","A","[","]","toArray","(","A","[","]","emptyArray",")","{","if","(","emptyArray",".","length","!=","0",")","{","throw","new","IllegalArgumentException","(","\"Empty array must be supplied\"",")",";","}","return","stream","(",")",".","toArray","(","size","->","size","==","0","?","emptyArray",":","(","A","[","]",")","Array",".","newInstance","(","emptyArray",".","getClass","(",")",".","getComponentType","(",")",",","size",")",")",";","}"],"func_documentation_string":"Returns an array containing all the stream elements. If the stream\nhappens to contain no elements, the supplied empty array is returned\ninstead. Otherwise the new array is allocated which element type is the\nsame as the element type of supplied empty array.\n\n<p>\nThis is a <a href=\"package-summary.html#StreamOps\">terminal<\/a>\noperation.\n\n<p>\nThis method is useful when the stream is expected to return empty arrays\noften, so the same instance of empty array (presumably declared in some\nstatic final field) can be reused.\n\n@param <A> the element type of the resulting array\n@param emptyArray an empty array of the resulting type\n@return an array containing the elements in this stream or the passed\nempty array if the stream is empty\n@throws ArrayStoreException if the runtime type of the array returned\nfrom the array generator is not a supertype of the runtime type\nof every element in this stream\n@see #toArray(java.util.function.IntFunction)\n@since 0.6.3","func_documentation_tokens":["Returns","an","array","containing","all","the","stream","elements",".","If","the","stream","happens","to","contain","no","elements","the","supplied","empty","array","is","returned","instead",".","Otherwise","the","new","array","is","allocated","which","element","type","is","the","same","as","the","element","type","of","supplied","empty","array","."],"label":0,"text":"Returns an array containing all the stream elements. If the stream\nhappens to contain no elements, the supplied empty array is returned\ninstead. Otherwise the new array is allocated which element type is the\nsame as the element type of supplied empty array.\n\n<p>\nThis is a <a href=\"package-summary.html#StreamOps\">terminal<\/a>\noperation.\n\n<p>\nThis method is useful when the stream is expected to return empty arrays\noften, so the same instance of empty array (presumably declared in some\nstatic final field) can be reused.\n\n@param <A> the element type of the resulting array\n@param emptyArray an empty array of the resulting type\n@return an array containing the elements in this stream or the passed\nempty array if the stream is empty\n@throws ArrayStoreException if the runtime type of the array returned\nfrom the array generator is not a supertype of the runtime type\nof every element in this stream\n@see #toArray(java.util.function.IntFunction)\n@since 0.6.3[SEP]@SuppressWarnings(\"unchecked\")\n    public <A> A[] toArray(A[] emptyArray) {\n        if(emptyArray.length != 0) {\n            throw new IllegalArgumentException(\"Empty array must be supplied\");\n        }\n        return stream().toArray(size -> size == 0 ? emptyArray\n                : (A[]) Array.newInstance(emptyArray.getClass().getComponentType(), size));\n    }"}
{"func_code_string":"public static int levenshteinDistance(CharSequence s, CharSequence t)\n    {\n        \/\/ degenerate cases          s\n        if (s == null || \"\".equals(s))\n        {\n            return t == null || \"\".equals(t) ? 0 : t.length();\n        }\n        else if (t == null || \"\".equals(t))\n        {\n            return s.length();\n        }\n\n        \/\/ create two work vectors of integer distances\n        int[] v0 = new int[t.length() + 1];\n        int[] v1 = new int[t.length() + 1];\n\n        \/\/ initialize v0 (the previous row of distances)\n        \/\/ this row is A[0][i]: edit distance for an empty s\n        \/\/ the distance is just the number of characters to delete from t\n        for (int i = 0; i < v0.length; i++)\n        {\n            v0[i] = i;\n        }\n\n        int sLen = s.length();\n        int tLen = t.length();\n        for (int i = 0; i < sLen; i++)\n        {\n            \/\/ calculate v1 (current row distances) from the previous row v0\n\n            \/\/ first element of v1 is A[i+1][0]\n            \/\/   edit distance is delete (i+1) chars from s to match empty t\n            v1[0] = i + 1;\n\n            \/\/ use formula to fill in the rest of the row\n            for (int j = 0; j < tLen; j++)\n            {\n                int cost = (s.charAt(i) == t.charAt(j)) ? 0 : 1;\n                v1[j + 1] = (int) MathUtilities.minimum(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n            }\n\n            \/\/ copy v1 (current row) to v0 (previous row) for next iteration\n            System.arraycopy(v1, 0, v0, 0, v0.length);\n        }\n\n        return v1[t.length()];\n    }","func_code_tokens":["public","static","int","levenshteinDistance","(","CharSequence","s",",","CharSequence","t",")","{","\/\/ degenerate cases          s","if","(","s","==","null","||","\"\"",".","equals","(","s",")",")","{","return","t","==","null","||","\"\"",".","equals","(","t",")","?","0",":","t",".","length","(",")",";","}","else","if","(","t","==","null","||","\"\"",".","equals","(","t",")",")","{","return","s",".","length","(",")",";","}","\/\/ create two work vectors of integer distances","int","[","]","v0","=","new","int","[","t",".","length","(",")","+","1","]",";","int","[","]","v1","=","new","int","[","t",".","length","(",")","+","1","]",";","\/\/ initialize v0 (the previous row of distances)","\/\/ this row is A[0][i]: edit distance for an empty s","\/\/ the distance is just the number of characters to delete from t","for","(","int","i","=","0",";","i","<","v0",".","length",";","i","++",")","{","v0","[","i","]","=","i",";","}","int","sLen","=","s",".","length","(",")",";","int","tLen","=","t",".","length","(",")",";","for","(","int","i","=","0",";","i","<","sLen",";","i","++",")","{","\/\/ calculate v1 (current row distances) from the previous row v0","\/\/ first element of v1 is A[i+1][0]","\/\/   edit distance is delete (i+1) chars from s to match empty t","v1","[","0","]","=","i","+","1",";","\/\/ use formula to fill in the rest of the row","for","(","int","j","=","0",";","j","<","tLen",";","j","++",")","{","int","cost","=","(","s",".","charAt","(","i",")","==","t",".","charAt","(","j",")",")","?","0",":","1",";","v1","[","j","+","1","]","=","(","int",")","MathUtilities",".","minimum","(","v1","[","j","]","+","1",",","v0","[","j","+","1","]","+","1",",","v0","[","j","]","+","cost",")",";","}","\/\/ copy v1 (current row) to v0 (previous row) for next iteration","System",".","arraycopy","(","v1",",","0",",","v0",",","0",",","v0",".","length",")",";","}","return","v1","[","t",".","length","(",")","]",";","}"],"func_documentation_string":"The Levenshtein distance is a string metric for measuring the difference between two sequences.\nInformally, the Levenshtein distance between two words is the minimum number of single-character edits\n(i.e. insertions, deletions or substitutions) required to change one word into the other. The phrase\n'edit distance' is often used to refer specifically to Levenshtein distance.\n\n@param s String one\n@param t String two\n@return the 'edit distance' (Levenshtein distance) between the two strings.","func_documentation_tokens":["The","Levenshtein","distance","is","a","string","metric","for","measuring","the","difference","between","two","sequences",".","Informally","the","Levenshtein","distance","between","two","words","is","the","minimum","number","of","single","-","character","edits","(","i",".","e",".","insertions","deletions","or","substitutions",")","required","to","change","one","word","into","the","other",".","The","phrase","edit","distance","is","often","used","to","refer","specifically","to","Levenshtein","distance","."],"label":1,"text":"The Levenshtein distance is a string metric for measuring the difference between two sequences.\nInformally, the Levenshtein distance between two words is the minimum number of single-character edits\n(i.e. insertions, deletions or substitutions) required to change one word into the other. The phrase\n'edit distance' is often used to refer specifically to Levenshtein distance.\n\n@param s String one\n@param t String two\n@return the 'edit distance' (Levenshtein distance) between the two strings.[SEP]public static int levenshteinDistance(CharSequence s, CharSequence t)\n    {\n        \/\/ degenerate cases          s\n        if (s == null || \"\".equals(s))\n        {\n            return t == null || \"\".equals(t) ? 0 : t.length();\n        }\n        else if (t == null || \"\".equals(t))\n        {\n            return s.length();\n        }\n\n        \/\/ create two work vectors of integer distances\n        int[] v0 = new int[t.length() + 1];\n        int[] v1 = new int[t.length() + 1];\n\n        \/\/ initialize v0 (the previous row of distances)\n        \/\/ this row is A[0][i]: edit distance for an empty s\n        \/\/ the distance is just the number of characters to delete from t\n        for (int i = 0; i < v0.length; i++)\n        {\n            v0[i] = i;\n        }\n\n        int sLen = s.length();\n        int tLen = t.length();\n        for (int i = 0; i < sLen; i++)\n        {\n            \/\/ calculate v1 (current row distances) from the previous row v0\n\n            \/\/ first element of v1 is A[i+1][0]\n            \/\/   edit distance is delete (i+1) chars from s to match empty t\n            v1[0] = i + 1;\n\n            \/\/ use formula to fill in the rest of the row\n            for (int j = 0; j < tLen; j++)\n            {\n                int cost = (s.charAt(i) == t.charAt(j)) ? 0 : 1;\n                v1[j + 1] = (int) MathUtilities.minimum(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n            }\n\n            \/\/ copy v1 (current row) to v0 (previous row) for next iteration\n            System.arraycopy(v1, 0, v0, 0, v0.length);\n        }\n\n        return v1[t.length()];\n    }"}
{"func_code_string":"public static void zipCompress(String filename) throws IOException {\n    FileOutputStream fos = new FileOutputStream(filename + COMPRESSION_SUFFIX);\n    CheckedOutputStream csum = new CheckedOutputStream(fos, new CRC32());\n    ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(csum));\n    out.setComment(\"Failmon records.\");\n\n    BufferedReader in = new BufferedReader(new FileReader(filename));\n    out.putNextEntry(new ZipEntry(new File(filename).getName()));\n    int c;\n    while ((c = in.read()) != -1)\n      out.write(c);\n    in.close();\n\n    out.finish();\n    out.close();\n  }","func_code_tokens":["public","static","void","zipCompress","(","String","filename",")","throws","IOException","{","FileOutputStream","fos","=","new","FileOutputStream","(","filename","+","COMPRESSION_SUFFIX",")",";","CheckedOutputStream","csum","=","new","CheckedOutputStream","(","fos",",","new","CRC32","(",")",")",";","ZipOutputStream","out","=","new","ZipOutputStream","(","new","BufferedOutputStream","(","csum",")",")",";","out",".","setComment","(","\"Failmon records.\"",")",";","BufferedReader","in","=","new","BufferedReader","(","new","FileReader","(","filename",")",")",";","out",".","putNextEntry","(","new","ZipEntry","(","new","File","(","filename",")",".","getName","(",")",")",")",";","int","c",";","while","(","(","c","=","in",".","read","(",")",")","!=","-","1",")","out",".","write","(","c",")",";","in",".","close","(",")",";","out",".","finish","(",")",";","out",".","close","(",")",";","}"],"func_documentation_string":"Compress a text file using the ZIP compressing algorithm.\n\n@param filename the path to the file to be compressed","func_documentation_tokens":["Compress","a","text","file","using","the","ZIP","compressing","algorithm","."],"label":1,"text":"Compress a text file using the ZIP compressing algorithm.\n\n@param filename the path to the file to be compressed[SEP]public static void zipCompress(String filename) throws IOException {\n    FileOutputStream fos = new FileOutputStream(filename + COMPRESSION_SUFFIX);\n    CheckedOutputStream csum = new CheckedOutputStream(fos, new CRC32());\n    ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(csum));\n    out.setComment(\"Failmon records.\");\n\n    BufferedReader in = new BufferedReader(new FileReader(filename));\n    out.putNextEntry(new ZipEntry(new File(filename).getName()));\n    int c;\n    while ((c = in.read()) != -1)\n      out.write(c);\n    in.close();\n\n    out.finish();\n    out.close();\n  }"}
{"func_code_string":"public void setWorkingDirectory(Path dir) {\n    if (!dir.isAbsolute()) {\n      FileSystem.LogForCollect\n          .info(\"set job working directory to non absolute path: \" + dir\n              + \" working directory: \" + getWorkingDirectory());\n    }\n    dir = new Path(getWorkingDirectory(), dir);\n    set(\"mapred.working.dir\", dir.toString());\n  }","func_code_tokens":["public","void","setWorkingDirectory","(","Path","dir",")","{","if","(","!","dir",".","isAbsolute","(",")",")","{","FileSystem",".","LogForCollect",".","info","(","\"set job working directory to non absolute path: \"","+","dir","+","\" working directory: \"","+","getWorkingDirectory","(",")",")",";","}","dir","=","new","Path","(","getWorkingDirectory","(",")",",","dir",")",";","set","(","\"mapred.working.dir\"",",","dir",".","toString","(",")",")",";","}"],"func_documentation_string":"Set the current working directory for the default file system.\n\n@param dir the new current working directory.","func_documentation_tokens":["Set","the","current","working","directory","for","the","default","file","system","."],"label":0,"text":"Set the current working directory for the default file system.\n\n@param dir the new current working directory.[SEP]public void setWorkingDirectory(Path dir) {\n    if (!dir.isAbsolute()) {\n      FileSystem.LogForCollect\n          .info(\"set job working directory to non absolute path: \" + dir\n              + \" working directory: \" + getWorkingDirectory());\n    }\n    dir = new Path(getWorkingDirectory(), dir);\n    set(\"mapred.working.dir\", dir.toString());\n  }"}
{"func_code_string":"synchronized int size( int priority) {\n    if (priority < 0 || priority >= LEVEL) {\n      throw new IllegalArgumentException(\"Unsupported priority: \" + priority);\n    }\n    return priorityQueues.get(priority).size();\n  }","func_code_tokens":["synchronized","int","size","(","int","priority",")","{","if","(","priority","<","0","||","priority",">=","LEVEL",")","{","throw","new","IllegalArgumentException","(","\"Unsupported priority: \"","+","priority",")",";","}","return","priorityQueues",".","get","(","priority",")",".","size","(",")",";","}"],"func_documentation_string":"Return the number of under replication blocks of priority","func_documentation_tokens":["Return","the","number","of","under","replication","blocks","of","priority"],"label":1,"text":"Return the number of under replication blocks of priority[SEP]synchronized int size( int priority) {\n    if (priority < 0 || priority >= LEVEL) {\n      throw new IllegalArgumentException(\"Unsupported priority: \" + priority);\n    }\n    return priorityQueues.get(priority).size();\n  }"}
{"func_code_string":"public void setWorkingDirectory(Path dir) throws IOException {\n    ensureState(JobState.DEFINE);\n    conf.setWorkingDirectory(dir);\n  }","func_code_tokens":["public","void","setWorkingDirectory","(","Path","dir",")","throws","IOException","{","ensureState","(","JobState",".","DEFINE",")",";","conf",".","setWorkingDirectory","(","dir",")",";","}"],"func_documentation_string":"Set the current working directory for the default file system.\n\n@param dir the new current working directory.\n@throws IllegalStateException if the job is submitted","func_documentation_tokens":["Set","the","current","working","directory","for","the","default","file","system","."],"label":1,"text":"Set the current working directory for the default file system.\n\n@param dir the new current working directory.\n@throws IllegalStateException if the job is submitted[SEP]public void setWorkingDirectory(Path dir) throws IOException {\n    ensureState(JobState.DEFINE);\n    conf.setWorkingDirectory(dir);\n  }"}
{"func_code_string":"private String getProcessId(OptionsAndArgs pOpts) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {\n        if (pOpts.getPid() != null) {\n            return pOpts.getPid();\n        } else if (pOpts.getProcessPattern() != null) {\n            return findProcess(pOpts.getProcessPattern()).getId();\n        } else {\n            throw new IllegalArgumentException(\"No process ID and no process name pattern given\");\n        }\n    }","func_code_tokens":["private","String","getProcessId","(","OptionsAndArgs","pOpts",")","throws","InvocationTargetException",",","NoSuchMethodException",",","IllegalAccessException","{","if","(","pOpts",".","getPid","(",")","!=","null",")","{","return","pOpts",".","getPid","(",")",";","}","else","if","(","pOpts",".","getProcessPattern","(",")","!=","null",")","{","return","findProcess","(","pOpts",".","getProcessPattern","(",")",")",".","getId","(",")",";","}","else","{","throw","new","IllegalArgumentException","(","\"No process ID and no process name pattern given\"",")",";","}","}"],"func_documentation_string":"Get the process id, either directly from option's ID or by looking up a regular expression for java process name\n(but not this java process)\n\n@param pOpts used to get eithe the process Id ({@link OptionsAndArgs#getPid()} or the pattern for matching a\nprocess name ({@link OptionsAndArgs#getProcessPattern()})\n@return the numeric id as string\n@throws IllegalArgumentException if a pattern is used and no or more than one process name matches.","func_documentation_tokens":["Get","the","process","id","either","directly","from","option","s","ID","or","by","looking","up","a","regular","expression","for","java","process","name","(","but","not","this","java","process",")"],"label":0,"text":"Get the process id, either directly from option's ID or by looking up a regular expression for java process name\n(but not this java process)\n\n@param pOpts used to get eithe the process Id ({@link OptionsAndArgs#getPid()} or the pattern for matching a\nprocess name ({@link OptionsAndArgs#getProcessPattern()})\n@return the numeric id as string\n@throws IllegalArgumentException if a pattern is used and no or more than one process name matches.[SEP]private String getProcessId(OptionsAndArgs pOpts) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {\n        if (pOpts.getPid() != null) {\n            return pOpts.getPid();\n        } else if (pOpts.getProcessPattern() != null) {\n            return findProcess(pOpts.getProcessPattern()).getId();\n        } else {\n            throw new IllegalArgumentException(\"No process ID and no process name pattern given\");\n        }\n    }"}
{"func_code_string":"public <T> List<T> randomElements(List<T> elements, int count) {\n\t\tif (elements.size() >= count) {\n\t\t\treturn extractRandomList(elements, count);\n\t\t} else {\n\t\t\tList<T> randomElements = new ArrayList<T>();\n\t\t\trandomElements.addAll(extractRandomList(elements, count % elements.size()));\n\t\t\tdo {\n\t\t\t\trandomElements.addAll(extractRandomList(elements, elements.size()));\n\t\t\t} while (randomElements.size() < count);\n\t\t\treturn randomElements;\n\t\t}\n\t}","func_code_tokens":["public","<","T",">","List","<","T",">","randomElements","(","List","<","T",">","elements",",","int","count",")","{","if","(","elements",".","size","(",")",">=","count",")","{","return","extractRandomList","(","elements",",","count",")",";","}","else","{","List","<","T",">","randomElements","=","new","ArrayList","<","T",">","(",")",";","randomElements",".","addAll","(","extractRandomList","(","elements",",","count","%","elements",".","size","(",")",")",")",";","do","{","randomElements",".","addAll","(","extractRandomList","(","elements",",","elements",".","size","(",")",")",")",";","}","while","(","randomElements",".","size","(",")","<","count",")",";","return","randomElements",";","}","}"],"func_documentation_string":"Creates new list being random subset of the passed list\n\n@param <T>      element generic type\n@param elements list to process\n@param count    returned list size\n@return sublist of the elements list","func_documentation_tokens":["Creates","new","list","being","random","subset","of","the","passed","list"],"label":1,"text":"Creates new list being random subset of the passed list\n\n@param <T>      element generic type\n@param elements list to process\n@param count    returned list size\n@return sublist of the elements list[SEP]public <T> List<T> randomElements(List<T> elements, int count) {\n\t\tif (elements.size() >= count) {\n\t\t\treturn extractRandomList(elements, count);\n\t\t} else {\n\t\t\tList<T> randomElements = new ArrayList<T>();\n\t\t\trandomElements.addAll(extractRandomList(elements, count % elements.size()));\n\t\t\tdo {\n\t\t\t\trandomElements.addAll(extractRandomList(elements, elements.size()));\n\t\t\t} while (randomElements.size() < count);\n\t\t\treturn randomElements;\n\t\t}\n\t}"}
{"func_code_string":"public static String createLikeRegex(String expr, boolean ignoreCase)\n    {\n        String regex = createRegex(expr, ignoreCase);\n        regex = regex.replace(\"_\", \".\").replace(\"%\", \".*?\");\n\n        return regex;\n    }","func_code_tokens":["public","static","String","createLikeRegex","(","String","expr",",","boolean","ignoreCase",")","{","String","regex","=","createRegex","(","expr",",","ignoreCase",")",";","regex","=","regex",".","replace","(","\"_\"",",","\".\"",")",".","replace","(","\"%\"",",","\".*?\"",")",";","return","regex",";","}"],"func_documentation_string":"Create regular expression equivalent to any like operator string match\nfunction.\n\n@param expr\nthe expr\n@param ignoreCase\nwhether to ignore the case\n@return the string","func_documentation_tokens":["Create","regular","expression","equivalent","to","any","like","operator","string","match","function","."],"label":0,"text":"Create regular expression equivalent to any like operator string match\nfunction.\n\n@param expr\nthe expr\n@param ignoreCase\nwhether to ignore the case\n@return the string[SEP]public static String createLikeRegex(String expr, boolean ignoreCase)\n    {\n        String regex = createRegex(expr, ignoreCase);\n        regex = regex.replace(\"_\", \".\").replace(\"%\", \".*?\");\n\n        return regex;\n    }"}
{"func_code_string":"public String formatDate(String format, Locale loc) {\n\t\tMultivaluedMap<String, String> params = new MultivaluedHashMap<>();\n\t\tparams.putSingle(\"format\", format);\n\t\tparams.putSingle(\"locale\", loc == null ? null : loc.toString());\n\t\treturn getEntity(invokeGet(\"utils\/formatdate\", params), String.class);\n\t}","func_code_tokens":["public","String","formatDate","(","String","format",",","Locale","loc",")","{","MultivaluedMap","<","String",",","String",">","params","=","new","MultivaluedHashMap","<>","(",")",";","params",".","putSingle","(","\"format\"",",","format",")",";","params",".","putSingle","(","\"locale\"",",","loc","==","null","?","null",":","loc",".","toString","(",")",")",";","return","getEntity","(","invokeGet","(","\"utils\/formatdate\"",",","params",")",",","String",".","class",")",";","}"],"func_documentation_string":"Formats a date in a specific format.\n@param format the date format\n@param loc the locale instance\n@return a formatted date","func_documentation_tokens":["Formats","a","date","in","a","specific","format","."],"label":0,"text":"Formats a date in a specific format.\n@param format the date format\n@param loc the locale instance\n@return a formatted date[SEP]public String formatDate(String format, Locale loc) {\n\t\tMultivaluedMap<String, String> params = new MultivaluedHashMap<>();\n\t\tparams.putSingle(\"format\", format);\n\t\tparams.putSingle(\"locale\", loc == null ? null : loc.toString());\n\t\treturn getEntity(invokeGet(\"utils\/formatdate\", params), String.class);\n\t}"}
{"func_code_string":"protected static Number stringToNumber(final String val) throws NumberFormatException {\n        char initial = val.charAt(0);\n        if ((initial >= '0' && initial <= '9') || initial == '-') {\n            \/\/ decimal representation\n            if (isDecimalNotation(val)) {\n                \/\/ quick dirty way to see if we need a BigDecimal instead of a Double\n                \/\/ this only handles some cases of overflow or underflow\n                if (val.length()>14) {\n                    return new BigDecimal(val);\n                }\n                final Double d = Double.valueOf(val);\n                if (d.isInfinite() || d.isNaN()) {\n                    \/\/ if we can't parse it as a double, go up to BigDecimal\n                    \/\/ this is probably due to underflow like 4.32e-678\n                    \/\/ or overflow like 4.65e5324. The size of the string is small\n                    \/\/ but can't be held in a Double.\n                    return new BigDecimal(val);\n                }\n                return d;\n            }\n            \/\/ integer representation.\n            \/\/ This will narrow any values to the smallest reasonable Object representation\n            \/\/ (Integer, Long, or BigInteger)\n            \n            \/\/ string version\n            \/\/ The compare string length method reduces GC,\n            \/\/ but leads to smaller integers being placed in larger wrappers even though not\n            \/\/ needed. i.e. 1,000,000,000 -> Long even though it's an Integer\n            \/\/ 1,000,000,000,000,000,000 -> BigInteger even though it's a Long\n            \/\/if(val.length()<=9){\n            \/\/    return Integer.valueOf(val);\n            \/\/}\n            \/\/if(val.length()<=18){\n            \/\/    return Long.valueOf(val);\n            \/\/}\n            \/\/return new BigInteger(val);\n            \n            \/\/ BigInteger version: We use a similar bitLenth compare as\n            \/\/ BigInteger#intValueExact uses. Increases GC, but objects hold\n            \/\/ only what they need. i.e. Less runtime overhead if the value is\n            \/\/ long lived. Which is the better tradeoff? This is closer to what's\n            \/\/ in stringToValue.\n            BigInteger bi = new BigInteger(val);\n            if(bi.bitLength()<=31){\n                return Integer.valueOf(bi.intValue());\n            }\n            if(bi.bitLength()<=63){\n                return Long.valueOf(bi.longValue());\n            }\n            return bi;\n        }\n        throw new NumberFormatException(\"val [\"+val+\"] is not a valid number.\");\n    }","func_code_tokens":["protected","static","Number","stringToNumber","(","final","String","val",")","throws","NumberFormatException","{","char","initial","=","val",".","charAt","(","0",")",";","if","(","(","initial",">=","'","'","&&","initial","<=","'","'",")","||","initial","==","'","'",")","{","\/\/ decimal representation","if","(","isDecimalNotation","(","val",")",")","{","\/\/ quick dirty way to see if we need a BigDecimal instead of a Double","\/\/ this only handles some cases of overflow or underflow","if","(","val",".","length","(",")",">","14",")","{","return","new","BigDecimal","(","val",")",";","}","final","Double","d","=","Double",".","valueOf","(","val",")",";","if","(","d",".","isInfinite","(",")","||","d",".","isNaN","(",")",")","{","\/\/ if we can't parse it as a double, go up to BigDecimal","\/\/ this is probably due to underflow like 4.32e-678","\/\/ or overflow like 4.65e5324. The size of the string is small","\/\/ but can't be held in a Double.","return","new","BigDecimal","(","val",")",";","}","return","d",";","}","\/\/ integer representation.","\/\/ This will narrow any values to the smallest reasonable Object representation","\/\/ (Integer, Long, or BigInteger)","\/\/ string version","\/\/ The compare string length method reduces GC,","\/\/ but leads to smaller integers being placed in larger wrappers even though not","\/\/ needed. i.e. 1,000,000,000 -> Long even though it's an Integer","\/\/ 1,000,000,000,000,000,000 -> BigInteger even though it's a Long","\/\/if(val.length()<=9){","\/\/    return Integer.valueOf(val);","\/\/}","\/\/if(val.length()<=18){","\/\/    return Long.valueOf(val);","\/\/}","\/\/return new BigInteger(val);","\/\/ BigInteger version: We use a similar bitLenth compare as","\/\/ BigInteger#intValueExact uses. Increases GC, but objects hold","\/\/ only what they need. i.e. Less runtime overhead if the value is","\/\/ long lived. Which is the better tradeoff? This is closer to what's","\/\/ in stringToValue.","BigInteger","bi","=","new","BigInteger","(","val",")",";","if","(","bi",".","bitLength","(",")","<=","31",")","{","return","Integer",".","valueOf","(","bi",".","intValue","(",")",")",";","}","if","(","bi",".","bitLength","(",")","<=","63",")","{","return","Long",".","valueOf","(","bi",".","longValue","(",")",")",";","}","return","bi",";","}","throw","new","NumberFormatException","(","\"val [\"","+","val","+","\"] is not a valid number.\"",")",";","}"],"func_documentation_string":"Converts a string to a number using the narrowest possible type. Possible\nreturns for this function are BigDecimal, Double, BigInteger, Long, and Integer.\nWhen a Double is returned, it should always be a valid Double and not NaN or +-infinity.\n\n@param val value to convert\n@return Number representation of the value.\n@throws NumberFormatException thrown if the value is not a valid number. A public\ncaller should catch this and wrap it in a {@link JSONException} if applicable.","func_documentation_tokens":["Converts","a","string","to","a","number","using","the","narrowest","possible","type",".","Possible","returns","for","this","function","are","BigDecimal","Double","BigInteger","Long","and","Integer",".","When","a","Double","is","returned","it","should","always","be","a","valid","Double","and","not","NaN","or","+","-","infinity","."],"label":1,"text":"Converts a string to a number using the narrowest possible type. Possible\nreturns for this function are BigDecimal, Double, BigInteger, Long, and Integer.\nWhen a Double is returned, it should always be a valid Double and not NaN or +-infinity.\n\n@param val value to convert\n@return Number representation of the value.\n@throws NumberFormatException thrown if the value is not a valid number. A public\ncaller should catch this and wrap it in a {@link JSONException} if applicable.[SEP]protected static Number stringToNumber(final String val) throws NumberFormatException {\n        char initial = val.charAt(0);\n        if ((initial >= '0' && initial <= '9') || initial == '-') {\n            \/\/ decimal representation\n            if (isDecimalNotation(val)) {\n                \/\/ quick dirty way to see if we need a BigDecimal instead of a Double\n                \/\/ this only handles some cases of overflow or underflow\n                if (val.length()>14) {\n                    return new BigDecimal(val);\n                }\n                final Double d = Double.valueOf(val);\n                if (d.isInfinite() || d.isNaN()) {\n                    \/\/ if we can't parse it as a double, go up to BigDecimal\n                    \/\/ this is probably due to underflow like 4.32e-678\n                    \/\/ or overflow like 4.65e5324. The size of the string is small\n                    \/\/ but can't be held in a Double.\n                    return new BigDecimal(val);\n                }\n                return d;\n            }\n            \/\/ integer representation.\n            \/\/ This will narrow any values to the smallest reasonable Object representation\n            \/\/ (Integer, Long, or BigInteger)\n            \n            \/\/ string version\n            \/\/ The compare string length method reduces GC,\n            \/\/ but leads to smaller integers being placed in larger wrappers even though not\n            \/\/ needed. i.e. 1,000,000,000 -> Long even though it's an Integer\n            \/\/ 1,000,000,000,000,000,000 -> BigInteger even though it's a Long\n            \/\/if(val.length()<=9){\n            \/\/    return Integer.valueOf(val);\n            \/\/}\n            \/\/if(val.length()<=18){\n            \/\/    return Long.valueOf(val);\n            \/\/}\n            \/\/return new BigInteger(val);\n            \n            \/\/ BigInteger version: We use a similar bitLenth compare as\n            \/\/ BigInteger#intValueExact uses. Increases GC, but objects hold\n            \/\/ only what they need. i.e. Less runtime overhead if the value is\n            \/\/ long lived. Which is the better tradeoff? This is closer to what's\n            \/\/ in stringToValue.\n            BigInteger bi = new BigInteger(val);\n            if(bi.bitLength()<=31){\n                return Integer.valueOf(bi.intValue());\n            }\n            if(bi.bitLength()<=63){\n                return Long.valueOf(bi.longValue());\n            }\n            return bi;\n        }\n        throw new NumberFormatException(\"val [\"+val+\"] is not a valid number.\");\n    }"}
{"func_code_string":"static\n\tpublic double probability(ContinuousDistribution distribution, Number x){\n\n\t\tif(distribution instanceof GaussianDistribution){\n\t\t\treturn probability((GaussianDistribution)distribution, x);\n\t\t} else\n\n\t\tif(distribution instanceof PoissonDistribution){\n\t\t\treturn probability((PoissonDistribution)distribution, x);\n\t\t}\n\n\t\tthrow new UnsupportedElementException(distribution);\n\t}","func_code_tokens":["static","public","double","probability","(","ContinuousDistribution","distribution",",","Number","x",")","{","if","(","distribution","instanceof","GaussianDistribution",")","{","return","probability","(","(","GaussianDistribution",")","distribution",",","x",")",";","}","else","if","(","distribution","instanceof","PoissonDistribution",")","{","return","probability","(","(","PoissonDistribution",")","distribution",",","x",")",";","}","throw","new","UnsupportedElementException","(","distribution",")",";","}"],"func_documentation_string":"<p>\nCalculates the value of the specified probability function at the specified point.\n<\/p>","func_documentation_tokens":["<p",">","Calculates","the","value","of","the","specified","probability","function","at","the","specified","point",".","<","\/","p",">"],"label":1,"text":"<p>\nCalculates the value of the specified probability function at the specified point.\n<\/p>[SEP]static\n\tpublic double probability(ContinuousDistribution distribution, Number x){\n\n\t\tif(distribution instanceof GaussianDistribution){\n\t\t\treturn probability((GaussianDistribution)distribution, x);\n\t\t} else\n\n\t\tif(distribution instanceof PoissonDistribution){\n\t\t\treturn probability((PoissonDistribution)distribution, x);\n\t\t}\n\n\t\tthrow new UnsupportedElementException(distribution);\n\t}"}
{"func_code_string":"public Observable<HttpClientResponse<ByteBuf>>\n  postSmile(String uriStr, JsonPayload payload) {\n    byte[] entity = toByteArray(SMILE_FACTORY, payload);\n    URI uri = URI.create(uriStr);\n    return rxHttp.post(uri, SMILE_CONTENT_TYPE, entity);\n  }","func_code_tokens":["public","Observable","<","HttpClientResponse","<","ByteBuf",">",">","postSmile","(","String","uriStr",",","JsonPayload","payload",")","{","byte","[","]","entity","=","toByteArray","(","SMILE_FACTORY",",","payload",")",";","URI","uri","=","URI",".","create","(","uriStr",")",";","return","rxHttp",".","post","(","uri",",","SMILE_CONTENT_TYPE",",","entity",")",";","}"],"func_documentation_string":"POST to the given URI the passed {@link JsonPayload}.","func_documentation_tokens":["POST","to","the","given","URI","the","passed","{"],"label":0,"text":"POST to the given URI the passed {@link JsonPayload}.[SEP]public Observable<HttpClientResponse<ByteBuf>>\n  postSmile(String uriStr, JsonPayload payload) {\n    byte[] entity = toByteArray(SMILE_FACTORY, payload);\n    URI uri = URI.create(uriStr);\n    return rxHttp.post(uri, SMILE_CONTENT_TYPE, entity);\n  }"}
{"func_code_string":"public void removePermutations(List<Integer> removed) {\n\n\t\tint[] permutations = new int[this.permutations.length];\n\n\t\tint index = 0;\n\t\tpermutations:\n\t\tfor (int j : this.permutations) {\n\t\t\tfor (int i = 0; i < removed.size(); i++) {\n\t\t\t\tif(removed.get(i) == j) {\n\t\t\t\t\t\/\/ skip this\n\t\t\t\t\tremoved.remove(i);\n\n\t\t\t\t\tcontinue permutations;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpermutations[index] = j;\n\n\t\t\tindex++;\n\t\t}\n\n\t\tint[] effectivePermutations = new int[index];\n\t\tSystem.arraycopy(permutations, 0, effectivePermutations, 0, index);\n\t\t\n\t\tthis.rotations = new int[permutations.length];\n\t\tthis.reset = new int[permutations.length];\n\t\tthis.permutations = effectivePermutations;\n\t\tArrays.sort(permutations); \/\/ ascending order to make the permutation logic work\n\t}","func_code_tokens":["public","void","removePermutations","(","List","<","Integer",">","removed",")","{","int","[","]","permutations","=","new","int","[","this",".","permutations",".","length","]",";","int","index","=","0",";","permutations",":","for","(","int","j",":","this",".","permutations",")","{","for","(","int","i","=","0",";","i","<","removed",".","size","(",")",";","i","++",")","{","if","(","removed",".","get","(","i",")","==","j",")","{","\/\/ skip this","removed",".","remove","(","i",")",";","continue","permutations",";","}","}","permutations","[","index","]","=","j",";","index","++",";","}","int","[","]","effectivePermutations","=","new","int","[","index","]",";","System",".","arraycopy","(","permutations",",","0",",","effectivePermutations",",","0",",","index",")",";","this",".","rotations","=","new","int","[","permutations",".","length","]",";","this",".","reset","=","new","int","[","permutations",".","length","]",";","this",".","permutations","=","effectivePermutations",";","Arrays",".","sort","(","permutations",")",";","\/\/ ascending order to make the permutation logic work","}"],"func_documentation_string":"Remove permutations, if present.","func_documentation_tokens":["Remove","permutations","if","present","."],"label":0,"text":"Remove permutations, if present.[SEP]public void removePermutations(List<Integer> removed) {\n\n\t\tint[] permutations = new int[this.permutations.length];\n\n\t\tint index = 0;\n\t\tpermutations:\n\t\tfor (int j : this.permutations) {\n\t\t\tfor (int i = 0; i < removed.size(); i++) {\n\t\t\t\tif(removed.get(i) == j) {\n\t\t\t\t\t\/\/ skip this\n\t\t\t\t\tremoved.remove(i);\n\n\t\t\t\t\tcontinue permutations;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpermutations[index] = j;\n\n\t\t\tindex++;\n\t\t}\n\n\t\tint[] effectivePermutations = new int[index];\n\t\tSystem.arraycopy(permutations, 0, effectivePermutations, 0, index);\n\t\t\n\t\tthis.rotations = new int[permutations.length];\n\t\tthis.reset = new int[permutations.length];\n\t\tthis.permutations = effectivePermutations;\n\t\tArrays.sort(permutations); \/\/ ascending order to make the permutation logic work\n\t}"}
{"func_code_string":"public List<Point2D3D> createObservations( Se3_F64 worldToCamera , int total ) {\n\n\t\tSe3_F64 cameraToWorld = worldToCamera.invert(null);\n\n\t\t\/\/ transform from pixel coordinates to normalized pixel coordinates, which removes lens distortion\n\t\tPoint2Transform2_F64 pixelToNorm = LensDistortionFactory.narrow(intrinsic).undistort_F64(true,false);\n\n\t\tList<Point2D3D> observations = new ArrayList<>();\n\n\t\tPoint2D_F64 norm = new Point2D_F64();\n\t\tfor (int i = 0; i < total; i++) {\n\t\t\t\/\/ randomly pixel a point inside the image\n\t\t\tdouble x = rand.nextDouble()*intrinsic.width;\n\t\t\tdouble y = rand.nextDouble()*intrinsic.height;\n\n\t\t\t\/\/ Convert to normalized image coordinates because that's what PNP needs.\n\t\t\t\/\/ it can't process pixel coordinates\n\t\t\tpixelToNorm.compute(x,y,norm);\n\n\t\t\t\/\/ Randomly pick a depth and compute 3D coordinate\n\t\t\tdouble Z = rand.nextDouble()+4;\n\t\t\tdouble X = norm.x*Z;\n\t\t\tdouble Y = norm.y*Z;\n\n\t\t\t\/\/ Change the point's reference frame from camera to world\n\t\t\tPoint3D_F64 cameraPt = new Point3D_F64(X,Y,Z);\n\t\t\tPoint3D_F64 worldPt = new Point3D_F64();\n\n\t\t\tSePointOps_F64.transform(cameraToWorld,cameraPt,worldPt);\n\n\t\t\t\/\/ Save the perfect noise free observation\n\t\t\tPoint2D3D o = new Point2D3D();\n\t\t\to.getLocation().set(worldPt);\n\t\t\to.getObservation().set(norm.x,norm.y);\n\n\t\t\tobservations.add(o);\n\t\t}\n\n\t\treturn observations;\n\t}","func_code_tokens":["public","List","<","Point2D3D",">","createObservations","(","Se3_F64","worldToCamera",",","int","total",")","{","Se3_F64","cameraToWorld","=","worldToCamera",".","invert","(","null",")",";","\/\/ transform from pixel coordinates to normalized pixel coordinates, which removes lens distortion","Point2Transform2_F64","pixelToNorm","=","LensDistortionFactory",".","narrow","(","intrinsic",")",".","undistort_F64","(","true",",","false",")",";","List","<","Point2D3D",">","observations","=","new","ArrayList","<>","(",")",";","Point2D_F64","norm","=","new","Point2D_F64","(",")",";","for","(","int","i","=","0",";","i","<","total",";","i","++",")","{","\/\/ randomly pixel a point inside the image","double","x","=","rand",".","nextDouble","(",")","*","intrinsic",".","width",";","double","y","=","rand",".","nextDouble","(",")","*","intrinsic",".","height",";","\/\/ Convert to normalized image coordinates because that's what PNP needs.","\/\/ it can't process pixel coordinates","pixelToNorm",".","compute","(","x",",","y",",","norm",")",";","\/\/ Randomly pick a depth and compute 3D coordinate","double","Z","=","rand",".","nextDouble","(",")","+","4",";","double","X","=","norm",".","x","*","Z",";","double","Y","=","norm",".","y","*","Z",";","\/\/ Change the point's reference frame from camera to world","Point3D_F64","cameraPt","=","new","Point3D_F64","(","X",",","Y",",","Z",")",";","Point3D_F64","worldPt","=","new","Point3D_F64","(",")",";","SePointOps_F64",".","transform","(","cameraToWorld",",","cameraPt",",","worldPt",")",";","\/\/ Save the perfect noise free observation","Point2D3D","o","=","new","Point2D3D","(",")",";","o",".","getLocation","(",")",".","set","(","worldPt",")",";","o",".","getObservation","(",")",".","set","(","norm",".","x",",","norm",".","y",")",";","observations",".","add","(","o",")",";","}","return","observations",";","}"],"func_documentation_string":"Generates synthetic observations randomly in front of the camera.  Observations are in normalized image\ncoordinates and not pixels!  See {@link PerspectiveOps#convertPixelToNorm} for how to go from pixels\nto normalized image coordinates.","func_documentation_tokens":["Generates","synthetic","observations","randomly","in","front","of","the","camera",".","Observations","are","in","normalized","image","coordinates","and","not","pixels!","See","{"],"label":0,"text":"Generates synthetic observations randomly in front of the camera.  Observations are in normalized image\ncoordinates and not pixels!  See {@link PerspectiveOps#convertPixelToNorm} for how to go from pixels\nto normalized image coordinates.[SEP]public List<Point2D3D> createObservations( Se3_F64 worldToCamera , int total ) {\n\n\t\tSe3_F64 cameraToWorld = worldToCamera.invert(null);\n\n\t\t\/\/ transform from pixel coordinates to normalized pixel coordinates, which removes lens distortion\n\t\tPoint2Transform2_F64 pixelToNorm = LensDistortionFactory.narrow(intrinsic).undistort_F64(true,false);\n\n\t\tList<Point2D3D> observations = new ArrayList<>();\n\n\t\tPoint2D_F64 norm = new Point2D_F64();\n\t\tfor (int i = 0; i < total; i++) {\n\t\t\t\/\/ randomly pixel a point inside the image\n\t\t\tdouble x = rand.nextDouble()*intrinsic.width;\n\t\t\tdouble y = rand.nextDouble()*intrinsic.height;\n\n\t\t\t\/\/ Convert to normalized image coordinates because that's what PNP needs.\n\t\t\t\/\/ it can't process pixel coordinates\n\t\t\tpixelToNorm.compute(x,y,norm);\n\n\t\t\t\/\/ Randomly pick a depth and compute 3D coordinate\n\t\t\tdouble Z = rand.nextDouble()+4;\n\t\t\tdouble X = norm.x*Z;\n\t\t\tdouble Y = norm.y*Z;\n\n\t\t\t\/\/ Change the point's reference frame from camera to world\n\t\t\tPoint3D_F64 cameraPt = new Point3D_F64(X,Y,Z);\n\t\t\tPoint3D_F64 worldPt = new Point3D_F64();\n\n\t\t\tSePointOps_F64.transform(cameraToWorld,cameraPt,worldPt);\n\n\t\t\t\/\/ Save the perfect noise free observation\n\t\t\tPoint2D3D o = new Point2D3D();\n\t\t\to.getLocation().set(worldPt);\n\t\t\to.getObservation().set(norm.x,norm.y);\n\n\t\t\tobservations.add(o);\n\t\t}\n\n\t\treturn observations;\n\t}"}
{"func_code_string":"private void handleContextMenu(JTree tree, int x, int y) {\n\t\tTreePath path = tree.getPathForLocation(x, y);\n\t\ttree.setSelectionPath(path);\n\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();\n\n\t\tif (node == null)\n\t\t\treturn;\n\t\tif (!node.isLeaf()) {\n\t\t\ttree.setSelectionPath(null);\n\t\t\treturn;\n\t\t}\n\t\tfinal AppInfo info = (AppInfo) node.getUserObject();\n\n\t\tJMenuItem copyname = new JMenuItem(\"Copy Name\");\n\t\tcopyname.addActionListener(e -> {\n\t\t\tClipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n\t\t\tclipboard.setContents(new StringSelection(info.app.getSimpleName()), null);\n\t\t});\n\n\t\tJMenuItem copypath = new JMenuItem(\"Copy Path\");\n\t\tcopypath.addActionListener(e -> {\n\t\t\tString path1 = UtilIO.getSourcePath(info.app.getPackage().getName(), info.app.getSimpleName());\n\t\t\tClipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n\t\t\tclipboard.setContents(new StringSelection(path1), null);\n\t\t});\n\n\t\tJMenuItem github = new JMenuItem(\"Go to Github\");\n\t\tgithub.addActionListener(e -> openInGitHub(info));\n\n\t\tJPopupMenu submenu = new JPopupMenu();\n\t\tsubmenu.add(copyname);\n\t\tsubmenu.add(copypath);\n\t\tsubmenu.add(github);\n\t\tsubmenu.show(tree, x, y);\n\t}","func_code_tokens":["private","void","handleContextMenu","(","JTree","tree",",","int","x",",","int","y",")","{","TreePath","path","=","tree",".","getPathForLocation","(","x",",","y",")",";","tree",".","setSelectionPath","(","path",")",";","DefaultMutableTreeNode","node","=","(","DefaultMutableTreeNode",")","tree",".","getLastSelectedPathComponent","(",")",";","if","(","node","==","null",")","return",";","if","(","!","node",".","isLeaf","(",")",")","{","tree",".","setSelectionPath","(","null",")",";","return",";","}","final","AppInfo","info","=","(","AppInfo",")","node",".","getUserObject","(",")",";","JMenuItem","copyname","=","new","JMenuItem","(","\"Copy Name\"",")",";","copyname",".","addActionListener","(","e","->","{","Clipboard","clipboard","=","Toolkit",".","getDefaultToolkit","(",")",".","getSystemClipboard","(",")",";","clipboard",".","setContents","(","new","StringSelection","(","info",".","app",".","getSimpleName","(",")",")",",","null",")",";","}",")",";","JMenuItem","copypath","=","new","JMenuItem","(","\"Copy Path\"",")",";","copypath",".","addActionListener","(","e","->","{","String","path1","=","UtilIO",".","getSourcePath","(","info",".","app",".","getPackage","(",")",".","getName","(",")",",","info",".","app",".","getSimpleName","(",")",")",";","Clipboard","clipboard","=","Toolkit",".","getDefaultToolkit","(",")",".","getSystemClipboard","(",")",";","clipboard",".","setContents","(","new","StringSelection","(","path1",")",",","null",")",";","}",")",";","JMenuItem","github","=","new","JMenuItem","(","\"Go to Github\"",")",";","github",".","addActionListener","(","e","->","openInGitHub","(","info",")",")",";","JPopupMenu","submenu","=","new","JPopupMenu","(",")",";","submenu",".","add","(","copyname",")",";","submenu",".","add","(","copypath",")",";","submenu",".","add","(","github",")",";","submenu",".","show","(","tree",",","x",",","y",")",";","}"],"func_documentation_string":"Displays a context menu for a class leaf node\nAllows copying of the name and the path to the source","func_documentation_tokens":["Displays","a","context","menu","for","a","class","leaf","node","Allows","copying","of","the","name","and","the","path","to","the","source"],"label":1,"text":"Displays a context menu for a class leaf node\nAllows copying of the name and the path to the source[SEP]private void handleContextMenu(JTree tree, int x, int y) {\n\t\tTreePath path = tree.getPathForLocation(x, y);\n\t\ttree.setSelectionPath(path);\n\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();\n\n\t\tif (node == null)\n\t\t\treturn;\n\t\tif (!node.isLeaf()) {\n\t\t\ttree.setSelectionPath(null);\n\t\t\treturn;\n\t\t}\n\t\tfinal AppInfo info = (AppInfo) node.getUserObject();\n\n\t\tJMenuItem copyname = new JMenuItem(\"Copy Name\");\n\t\tcopyname.addActionListener(e -> {\n\t\t\tClipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n\t\t\tclipboard.setContents(new StringSelection(info.app.getSimpleName()), null);\n\t\t});\n\n\t\tJMenuItem copypath = new JMenuItem(\"Copy Path\");\n\t\tcopypath.addActionListener(e -> {\n\t\t\tString path1 = UtilIO.getSourcePath(info.app.getPackage().getName(), info.app.getSimpleName());\n\t\t\tClipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n\t\t\tclipboard.setContents(new StringSelection(path1), null);\n\t\t});\n\n\t\tJMenuItem github = new JMenuItem(\"Go to Github\");\n\t\tgithub.addActionListener(e -> openInGitHub(info));\n\n\t\tJPopupMenu submenu = new JPopupMenu();\n\t\tsubmenu.add(copyname);\n\t\tsubmenu.add(copypath);\n\t\tsubmenu.add(github);\n\t\tsubmenu.show(tree, x, y);\n\t}"}
{"func_code_string":"private static void summarizeGLMModel(ModelSummary summary, hex.glm.GLMModel model) {\n    \/\/ add generic fields such as column names\n    summarizeModelCommonFields(summary, model);\n\n    summary.model_algorithm = \"GLM\";\n\n    JsonObject all_params = (model.get_params()).toJSON();\n    summary.critical_parameters = whitelistJsonObject(all_params, GLM_critical_params);\n    summary.secondary_parameters = whitelistJsonObject(all_params, GLM_secondary_params);\n    summary.expert_parameters = whitelistJsonObject(all_params, GLM_expert_params);\n  }","func_code_tokens":["private","static","void","summarizeGLMModel","(","ModelSummary","summary",",","hex",".","glm",".","GLMModel","model",")","{","\/\/ add generic fields such as column names","summarizeModelCommonFields","(","summary",",","model",")",";","summary",".","model_algorithm","=","\"GLM\"",";","JsonObject","all_params","=","(","model",".","get_params","(",")",")",".","toJSON","(",")",";","summary",".","critical_parameters","=","whitelistJsonObject","(","all_params",",","GLM_critical_params",")",";","summary",".","secondary_parameters","=","whitelistJsonObject","(","all_params",",","GLM_secondary_params",")",";","summary",".","expert_parameters","=","whitelistJsonObject","(","all_params",",","GLM_expert_params",")",";","}"],"func_documentation_string":"Summarize fields which are specific to hex.glm.GLMModel.","func_documentation_tokens":["Summarize","fields","which","are","specific","to","hex",".","glm",".","GLMModel","."],"label":0,"text":"Summarize fields which are specific to hex.glm.GLMModel.[SEP]private static void summarizeGLMModel(ModelSummary summary, hex.glm.GLMModel model) {\n    \/\/ add generic fields such as column names\n    summarizeModelCommonFields(summary, model);\n\n    summary.model_algorithm = \"GLM\";\n\n    JsonObject all_params = (model.get_params()).toJSON();\n    summary.critical_parameters = whitelistJsonObject(all_params, GLM_critical_params);\n    summary.secondary_parameters = whitelistJsonObject(all_params, GLM_secondary_params);\n    summary.expert_parameters = whitelistJsonObject(all_params, GLM_expert_params);\n  }"}
{"func_code_string":"private static void summarizeDeepLearningModel(ModelSummary summary, hex.deeplearning.DeepLearningModel model) {\n    \/\/ add generic fields such as column names\n    summarizeModelCommonFields(summary, model);\n\n    summary.model_algorithm = \"DeepLearning\";\n\n    JsonObject all_params = (model.get_params()).toJSON();\n    summary.critical_parameters = whitelistJsonObject(all_params, DL_critical_params);\n    summary.secondary_parameters = whitelistJsonObject(all_params, DL_secondary_params);\n    summary.expert_parameters = whitelistJsonObject(all_params, DL_expert_params);\n  }","func_code_tokens":["private","static","void","summarizeDeepLearningModel","(","ModelSummary","summary",",","hex",".","deeplearning",".","DeepLearningModel","model",")","{","\/\/ add generic fields such as column names","summarizeModelCommonFields","(","summary",",","model",")",";","summary",".","model_algorithm","=","\"DeepLearning\"",";","JsonObject","all_params","=","(","model",".","get_params","(",")",")",".","toJSON","(",")",";","summary",".","critical_parameters","=","whitelistJsonObject","(","all_params",",","DL_critical_params",")",";","summary",".","secondary_parameters","=","whitelistJsonObject","(","all_params",",","DL_secondary_params",")",";","summary",".","expert_parameters","=","whitelistJsonObject","(","all_params",",","DL_expert_params",")",";","}"],"func_documentation_string":"Summarize fields which are specific to hex.deeplearning.DeepLearningModel.","func_documentation_tokens":["Summarize","fields","which","are","specific","to","hex",".","deeplearning",".","DeepLearningModel","."],"label":0,"text":"Summarize fields which are specific to hex.deeplearning.DeepLearningModel.[SEP]private static void summarizeDeepLearningModel(ModelSummary summary, hex.deeplearning.DeepLearningModel model) {\n    \/\/ add generic fields such as column names\n    summarizeModelCommonFields(summary, model);\n\n    summary.model_algorithm = \"DeepLearning\";\n\n    JsonObject all_params = (model.get_params()).toJSON();\n    summary.critical_parameters = whitelistJsonObject(all_params, DL_critical_params);\n    summary.secondary_parameters = whitelistJsonObject(all_params, DL_secondary_params);\n    summary.expert_parameters = whitelistJsonObject(all_params, DL_expert_params);\n  }"}
{"func_code_string":"private static void summarizeNBModel(ModelSummary summary, hex.nb.NBModel model) {\n    \/\/ add generic fields such as column names\n    summarizeModelCommonFields(summary, model);\n\n    summary.model_algorithm = \"Naive Bayes\";\n\n    JsonObject all_params = (model.get_params()).toJSON();\n    summary.critical_parameters = whitelistJsonObject(all_params, NB_critical_params);\n    summary.secondary_parameters = whitelistJsonObject(all_params, NB_secondary_params);\n    summary.expert_parameters = whitelistJsonObject(all_params, NB_expert_params);\n  }","func_code_tokens":["private","static","void","summarizeNBModel","(","ModelSummary","summary",",","hex",".","nb",".","NBModel","model",")","{","\/\/ add generic fields such as column names","summarizeModelCommonFields","(","summary",",","model",")",";","summary",".","model_algorithm","=","\"Naive Bayes\"",";","JsonObject","all_params","=","(","model",".","get_params","(",")",")",".","toJSON","(",")",";","summary",".","critical_parameters","=","whitelistJsonObject","(","all_params",",","NB_critical_params",")",";","summary",".","secondary_parameters","=","whitelistJsonObject","(","all_params",",","NB_secondary_params",")",";","summary",".","expert_parameters","=","whitelistJsonObject","(","all_params",",","NB_expert_params",")",";","}"],"func_documentation_string":"Summarize fields which are specific to hex.nb.NBModel.","func_documentation_tokens":["Summarize","fields","which","are","specific","to","hex",".","nb",".","NBModel","."],"label":1,"text":"Summarize fields which are specific to hex.nb.NBModel.[SEP]private static void summarizeNBModel(ModelSummary summary, hex.nb.NBModel model) {\n    \/\/ add generic fields such as column names\n    summarizeModelCommonFields(summary, model);\n\n    summary.model_algorithm = \"Naive Bayes\";\n\n    JsonObject all_params = (model.get_params()).toJSON();\n    summary.critical_parameters = whitelistJsonObject(all_params, NB_critical_params);\n    summary.secondary_parameters = whitelistJsonObject(all_params, NB_secondary_params);\n    summary.expert_parameters = whitelistJsonObject(all_params, NB_expert_params);\n  }"}
{"func_code_string":"public void switchReadOnlyConnection(Boolean mustBeReadOnly) throws SQLException {\n    if (urlParser.getOptions().assureReadOnly && currentReadOnlyAsked != mustBeReadOnly) {\n      proxy.lock.lock();\n      try {\n        \/\/ verify not updated now that hold lock, double check safe due to volatile\n        if (currentReadOnlyAsked != mustBeReadOnly) {\n          currentReadOnlyAsked = mustBeReadOnly;\n          setSessionReadOnly(mustBeReadOnly, currentProtocol);\n        }\n      } finally {\n        proxy.lock.unlock();\n      }\n    }\n  }","func_code_tokens":["public","void","switchReadOnlyConnection","(","Boolean","mustBeReadOnly",")","throws","SQLException","{","if","(","urlParser",".","getOptions","(",")",".","assureReadOnly","&&","currentReadOnlyAsked","!=","mustBeReadOnly",")","{","proxy",".","lock",".","lock","(",")",";","try","{","\/\/ verify not updated now that hold lock, double check safe due to volatile","if","(","currentReadOnlyAsked","!=","mustBeReadOnly",")","{","currentReadOnlyAsked","=","mustBeReadOnly",";","setSessionReadOnly","(","mustBeReadOnly",",","currentProtocol",")",";","}","}","finally","{","proxy",".","lock",".","unlock","(",")",";","}","}","}"],"func_documentation_string":"Force session to read-only according to options.\n\n@param mustBeReadOnly is read-only flag\n@throws SQLException if a connection error occur","func_documentation_tokens":["Force","session","to","read","-","only","according","to","options","."],"label":0,"text":"Force session to read-only according to options.\n\n@param mustBeReadOnly is read-only flag\n@throws SQLException if a connection error occur[SEP]public void switchReadOnlyConnection(Boolean mustBeReadOnly) throws SQLException {\n    if (urlParser.getOptions().assureReadOnly && currentReadOnlyAsked != mustBeReadOnly) {\n      proxy.lock.lock();\n      try {\n        \/\/ verify not updated now that hold lock, double check safe due to volatile\n        if (currentReadOnlyAsked != mustBeReadOnly) {\n          currentReadOnlyAsked = mustBeReadOnly;\n          setSessionReadOnly(mustBeReadOnly, currentProtocol);\n        }\n      } finally {\n        proxy.lock.unlock();\n      }\n    }\n  }"}
{"func_code_string":"public Matrix multiply(Matrix B)\n    {\n        Matrix C = new DenseMatrix(this.rows(), B.cols());\n        multiply(B, C);\n        return C;\n    }","func_code_tokens":["public","Matrix","multiply","(","Matrix","B",")","{","Matrix","C","=","new","DenseMatrix","(","this",".","rows","(",")",",","B",".","cols","(",")",")",";","multiply","(","B",",","C",")",";","return","C",";","}"],"func_documentation_string":"Creates a new matrix that stores <i>A*B<\/i>\n@param B the matrix to multiply by\n@return a new matrix <i>A*B<\/i>","func_documentation_tokens":["Creates","a","new","matrix","that","stores","<i",">","A","*","B<","\/","i",">"],"label":1,"text":"Creates a new matrix that stores <i>A*B<\/i>\n@param B the matrix to multiply by\n@return a new matrix <i>A*B<\/i>[SEP]public Matrix multiply(Matrix B)\n    {\n        Matrix C = new DenseMatrix(this.rows(), B.cols());\n        multiply(B, C);\n        return C;\n    }"}
{"func_code_string":"public Matrix multiply(Matrix B, ExecutorService threadPool)\n    {\n        Matrix C = new DenseMatrix(this.rows(), B.cols());\n        multiply(B, C, threadPool);\n        return C;\n    }","func_code_tokens":["public","Matrix","multiply","(","Matrix","B",",","ExecutorService","threadPool",")","{","Matrix","C","=","new","DenseMatrix","(","this",".","rows","(",")",",","B",".","cols","(",")",")",";","multiply","(","B",",","C",",","threadPool",")",";","return","C",";","}"],"func_documentation_string":"Creates a new matrix that stores <i>A*B<\/i>\n@param B the matrix to multiply by\n@param threadPool the source of threads to do computation in parallel\n@return a new matrix <i>A*B<\/i>","func_documentation_tokens":["Creates","a","new","matrix","that","stores","<i",">","A","*","B<","\/","i",">"],"label":1,"text":"Creates a new matrix that stores <i>A*B<\/i>\n@param B the matrix to multiply by\n@param threadPool the source of threads to do computation in parallel\n@return a new matrix <i>A*B<\/i>[SEP]public Matrix multiply(Matrix B, ExecutorService threadPool)\n    {\n        Matrix C = new DenseMatrix(this.rows(), B.cols());\n        multiply(B, C, threadPool);\n        return C;\n    }"}
{"func_code_string":"public boolean isCaseSensitive() {\n        switch (getJcrType()) {\n            case PropertyType.DOUBLE:\n            case PropertyType.LONG:\n            case PropertyType.DECIMAL:\n            case PropertyType.WEAKREFERENCE:\n            case PropertyType.REFERENCE: \/\/ conversion is case-insensitive\n            case PropertyType.BOOLEAN: \/\/ conversion is case-insensitive\n                return false;\n        }\n        return true;\n    }","func_code_tokens":["public","boolean","isCaseSensitive","(",")","{","switch","(","getJcrType","(",")",")","{","case","PropertyType",".","DOUBLE",":","case","PropertyType",".","LONG",":","case","PropertyType",".","DECIMAL",":","case","PropertyType",".","WEAKREFERENCE",":","case","PropertyType",".","REFERENCE",":","\/\/ conversion is case-insensitive","case","PropertyType",".","BOOLEAN",":","\/\/ conversion is case-insensitive","return","false",";","}","return","true",";","}"],"func_documentation_string":"Get the indicator if the value is case sensitive\n\n@return boolean indicating if the value is case sensitive","func_documentation_tokens":["Get","the","indicator","if","the","value","is","case","sensitive"],"label":0,"text":"Get the indicator if the value is case sensitive\n\n@return boolean indicating if the value is case sensitive[SEP]public boolean isCaseSensitive() {\n        switch (getJcrType()) {\n            case PropertyType.DOUBLE:\n            case PropertyType.LONG:\n            case PropertyType.DECIMAL:\n            case PropertyType.WEAKREFERENCE:\n            case PropertyType.REFERENCE: \/\/ conversion is case-insensitive\n            case PropertyType.BOOLEAN: \/\/ conversion is case-insensitive\n                return false;\n        }\n        return true;\n    }"}
{"func_code_string":"public static byte[] decryptAES(SecretKey key, byte[] iv, byte[] encryptedBytes) throws\n            NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n            InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher aesCipher = Cipher.getInstance(\"AES\/CBC\/PKCS5Padding\");\n        IvParameterSpec ivParameter = new IvParameterSpec(iv);\n        \/\/ see http:\/\/stackoverflow.com\/a\/11506343\n        Key encryptionKey = new SecretKeySpec(key.getEncoded(),\"AES\");\n        aesCipher.init(Cipher.DECRYPT_MODE, encryptionKey, ivParameter);\n        return aesCipher.doFinal(encryptedBytes);\n    }","func_code_tokens":["public","static","byte","[","]","decryptAES","(","SecretKey","key",",","byte","[","]","iv",",","byte","[","]","encryptedBytes",")","throws","NoSuchPaddingException",",","NoSuchAlgorithmException",",","InvalidAlgorithmParameterException",",","InvalidKeyException",",","BadPaddingException",",","IllegalBlockSizeException","{","Cipher","aesCipher","=","Cipher",".","getInstance","(","\"AES\/CBC\/PKCS5Padding\"",")",";","IvParameterSpec","ivParameter","=","new","IvParameterSpec","(","iv",")",";","\/\/ see http:\/\/stackoverflow.com\/a\/11506343","Key","encryptionKey","=","new","SecretKeySpec","(","key",".","getEncoded","(",")",",","\"AES\"",")",";","aesCipher",".","init","(","Cipher",".","DECRYPT_MODE",",","encryptionKey",",","ivParameter",")",";","return","aesCipher",".","doFinal","(","encryptedBytes",")",";","}"],"func_documentation_string":"Decrypt an AES encrypted byte array\n\n@param key            The encryption key\n@param iv             The iv\n@param encryptedBytes The data to decrypt\n@return The decrypted data\n@throws NoSuchPaddingException\n@throws NoSuchAlgorithmException\n@throws InvalidAlgorithmParameterException\n@throws InvalidKeyException\n@throws BadPaddingException\n@throws IllegalBlockSizeException","func_documentation_tokens":["Decrypt","an","AES","encrypted","byte","array"],"label":1,"text":"Decrypt an AES encrypted byte array\n\n@param key            The encryption key\n@param iv             The iv\n@param encryptedBytes The data to decrypt\n@return The decrypted data\n@throws NoSuchPaddingException\n@throws NoSuchAlgorithmException\n@throws InvalidAlgorithmParameterException\n@throws InvalidKeyException\n@throws BadPaddingException\n@throws IllegalBlockSizeException[SEP]public static byte[] decryptAES(SecretKey key, byte[] iv, byte[] encryptedBytes) throws\n            NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n            InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher aesCipher = Cipher.getInstance(\"AES\/CBC\/PKCS5Padding\");\n        IvParameterSpec ivParameter = new IvParameterSpec(iv);\n        \/\/ see http:\/\/stackoverflow.com\/a\/11506343\n        Key encryptionKey = new SecretKeySpec(key.getEncoded(),\"AES\");\n        aesCipher.init(Cipher.DECRYPT_MODE, encryptionKey, ivParameter);\n        return aesCipher.doFinal(encryptedBytes);\n    }"}
{"func_code_string":"public static double similarLevenshtein(String s1, String s2) {\n        if (s1.equals(s2)) {\n            return 1.0;\n        }\n\n        \/\/ Make sure s1 is the longest string\n        if (s1.length() < s2.length()) {\n            String swap = s1;\n            s1 = s2;\n            s2 = swap;\n        }\n\n        int bigLength = s1.length();\n        return (bigLength - StringUtils.getLevenshteinDistance(s2, s1)) \/ (double) bigLength;\n    }","func_code_tokens":["public","static","double","similarLevenshtein","(","String","s1",",","String","s2",")","{","if","(","s1",".","equals","(","s2",")",")","{","return","1.0",";","}","\/\/ Make sure s1 is the longest string","if","(","s1",".","length","(",")","<","s2",".","length","(",")",")","{","String","swap","=","s1",";","s1","=","s2",";","s2","=","swap",";","}","int","bigLength","=","s1",".","length","(",")",";","return","(","bigLength","-","StringUtils",".","getLevenshteinDistance","(","s2",",","s1",")",")","\/","(","double",")","bigLength",";","}"],"func_documentation_string":"Checks to see how similar two strings are using the Levenshtein distance algorithm.\n\n@param s1 The first string to compare against.\n@param s2 The second string to compare against.\n@return A value between 0 and 1.0, where 1.0 is an exact match and 0 is no match at all.","func_documentation_tokens":["Checks","to","see","how","similar","two","strings","are","using","the","Levenshtein","distance","algorithm","."],"label":1,"text":"Checks to see how similar two strings are using the Levenshtein distance algorithm.\n\n@param s1 The first string to compare against.\n@param s2 The second string to compare against.\n@return A value between 0 and 1.0, where 1.0 is an exact match and 0 is no match at all.[SEP]public static double similarLevenshtein(String s1, String s2) {\n        if (s1.equals(s2)) {\n            return 1.0;\n        }\n\n        \/\/ Make sure s1 is the longest string\n        if (s1.length() < s2.length()) {\n            String swap = s1;\n            s1 = s2;\n            s2 = swap;\n        }\n\n        int bigLength = s1.length();\n        return (bigLength - StringUtils.getLevenshteinDistance(s2, s1)) \/ (double) bigLength;\n    }"}
{"func_code_string":"public static double similarDamerauLevenshtein(String s1, String s2) {\n        if (s1.equals(s2)) {\n            return 1.0;\n        }\n\n        \/\/ Make sure s1 is the longest string\n        if (s1.length() < s2.length()) {\n            String swap = s1;\n            s1 = s2;\n            s2 = swap;\n        }\n\n        int bigLength = s1.length();\n        return (bigLength - getDamerauLevenshteinDistance(s2, s1)) \/ (double) bigLength;\n    }","func_code_tokens":["public","static","double","similarDamerauLevenshtein","(","String","s1",",","String","s2",")","{","if","(","s1",".","equals","(","s2",")",")","{","return","1.0",";","}","\/\/ Make sure s1 is the longest string","if","(","s1",".","length","(",")","<","s2",".","length","(",")",")","{","String","swap","=","s1",";","s1","=","s2",";","s2","=","swap",";","}","int","bigLength","=","s1",".","length","(",")",";","return","(","bigLength","-","getDamerauLevenshteinDistance","(","s2",",","s1",")",")","\/","(","double",")","bigLength",";","}"],"func_documentation_string":"Checks to see how similar two strings are using the Damerau-Levenshtein distance algorithm.\n\n@param s1 The first string to compare against.\n@param s2 The second string to compare against.\n@return A value between 0 and 1.0, where 1.0 is an exact match and 0 is no match at all.","func_documentation_tokens":["Checks","to","see","how","similar","two","strings","are","using","the","Damerau","-","Levenshtein","distance","algorithm","."],"label":1,"text":"Checks to see how similar two strings are using the Damerau-Levenshtein distance algorithm.\n\n@param s1 The first string to compare against.\n@param s2 The second string to compare against.\n@return A value between 0 and 1.0, where 1.0 is an exact match and 0 is no match at all.[SEP]public static double similarDamerauLevenshtein(String s1, String s2) {\n        if (s1.equals(s2)) {\n            return 1.0;\n        }\n\n        \/\/ Make sure s1 is the longest string\n        if (s1.length() < s2.length()) {\n            String swap = s1;\n            s1 = s2;\n            s2 = swap;\n        }\n\n        int bigLength = s1.length();\n        return (bigLength - getDamerauLevenshteinDistance(s2, s1)) \/ (double) bigLength;\n    }"}
{"func_code_string":"public void addScatterPlot(String scatterID, String xAxisLabel, String yAxisLabel) throws ShanksException {\r\n        if (!this.timeCharts.containsKey(scatterID)) {\r\n            ScatterPlotGenerator scatter = new ScatterPlotGenerator();\r\n            scatter.setTitle(scatterID);\r\n            scatter.setXAxisLabel(xAxisLabel);\r\n            scatter.setYAxisLabel(yAxisLabel);\r\n            this.scatterPlots.put(scatterID, scatter);\r\n        } else {\r\n            throw new DuplicatedChartIDException(scatterID);\r\n        }\r\n    }","func_code_tokens":["public","void","addScatterPlot","(","String","scatterID",",","String","xAxisLabel",",","String","yAxisLabel",")","throws","ShanksException","{","if","(","!","this",".","timeCharts",".","containsKey","(","scatterID",")",")","{","ScatterPlotGenerator","scatter","=","new","ScatterPlotGenerator","(",")",";","scatter",".","setTitle","(","scatterID",")",";","scatter",".","setXAxisLabel","(","xAxisLabel",")",";","scatter",".","setYAxisLabel","(","yAxisLabel",")",";","this",".","scatterPlots",".","put","(","scatterID",",","scatter",")",";","}","else","{","throw","new","DuplicatedChartIDException","(","scatterID",")",";","}","}"],"func_documentation_string":"Add a ScatterPlot to the simulation\n\n@param scatterID - An ID for the ScatterPlot\n@param xAxisLabel - The name of the x axis\n@param yAxisLabel - The name of the y axis\n@throws ShanksException","func_documentation_tokens":["Add","a","ScatterPlot","to","the","simulation"],"label":1,"text":"Add a ScatterPlot to the simulation\n\n@param scatterID - An ID for the ScatterPlot\n@param xAxisLabel - The name of the x axis\n@param yAxisLabel - The name of the y axis\n@throws ShanksException[SEP]public void addScatterPlot(String scatterID, String xAxisLabel, String yAxisLabel) throws ShanksException {\r\n        if (!this.timeCharts.containsKey(scatterID)) {\r\n            ScatterPlotGenerator scatter = new ScatterPlotGenerator();\r\n            scatter.setTitle(scatterID);\r\n            scatter.setXAxisLabel(xAxisLabel);\r\n            scatter.setYAxisLabel(yAxisLabel);\r\n            this.scatterPlots.put(scatterID, scatter);\r\n        } else {\r\n            throw new DuplicatedChartIDException(scatterID);\r\n        }\r\n    }"}
{"func_code_string":"private CFile parseCFile( JSONObject jObj )\n    {\n        CFile cfile;\n\n        if ( jObj.optBoolean( \"is_dir\", false ) ) {\n            cfile = new CFolder( new CPath( jObj.getString( \"path\" ) ) );\n\n        } else {\n            cfile = new CBlob( new CPath( jObj.getString( \"path\" ) ), jObj.getLong( \"bytes\" ), jObj.getString( \"mime_type\" ) );\n            String stringDate = jObj.getString( \"modified\" );\n\n            try {\n                \/\/ stringDate looks like: \"Fri, 07 Mar 2014 17:47:55 +0000\"\n                SimpleDateFormat sdf = new SimpleDateFormat( \"EEE, dd MMM yyyy HH:mm:ss Z\", Locale.US );\n                Date modified = sdf.parse( stringDate );\n                cfile.setModificationDate( modified );\n\n            } catch ( ParseException ex ) {\n                throw new CStorageException( \"Can't parse date modified: \" + stringDate + \" (\" + ex.getMessage() + \")\", ex );\n            }\n        }\n\n        return cfile;\n    }","func_code_tokens":["private","CFile","parseCFile","(","JSONObject","jObj",")","{","CFile","cfile",";","if","(","jObj",".","optBoolean","(","\"is_dir\"",",","false",")",")","{","cfile","=","new","CFolder","(","new","CPath","(","jObj",".","getString","(","\"path\"",")",")",")",";","}","else","{","cfile","=","new","CBlob","(","new","CPath","(","jObj",".","getString","(","\"path\"",")",")",",","jObj",".","getLong","(","\"bytes\"",")",",","jObj",".","getString","(","\"mime_type\"",")",")",";","String","stringDate","=","jObj",".","getString","(","\"modified\"",")",";","try","{","\/\/ stringDate looks like: \"Fri, 07 Mar 2014 17:47:55 +0000\"","SimpleDateFormat","sdf","=","new","SimpleDateFormat","(","\"EEE, dd MMM yyyy HH:mm:ss Z\"",",","Locale",".","US",")",";","Date","modified","=","sdf",".","parse","(","stringDate",")",";","cfile",".","setModificationDate","(","modified",")",";","}","catch","(","ParseException","ex",")","{","throw","new","CStorageException","(","\"Can't parse date modified: \"","+","stringDate","+","\" (\"","+","ex",".","getMessage","(",")","+","\")\"",",","ex",")",";","}","}","return","cfile",";","}"],"func_documentation_string":"Generates a CFile from its json representation\n\n@param jObj JSON object representing a CFile\n@return the CFile object corresponding to the JSON object","func_documentation_tokens":["Generates","a","CFile","from","its","json","representation"],"label":1,"text":"Generates a CFile from its json representation\n\n@param jObj JSON object representing a CFile\n@return the CFile object corresponding to the JSON object[SEP]private CFile parseCFile( JSONObject jObj )\n    {\n        CFile cfile;\n\n        if ( jObj.optBoolean( \"is_dir\", false ) ) {\n            cfile = new CFolder( new CPath( jObj.getString( \"path\" ) ) );\n\n        } else {\n            cfile = new CBlob( new CPath( jObj.getString( \"path\" ) ), jObj.getLong( \"bytes\" ), jObj.getString( \"mime_type\" ) );\n            String stringDate = jObj.getString( \"modified\" );\n\n            try {\n                \/\/ stringDate looks like: \"Fri, 07 Mar 2014 17:47:55 +0000\"\n                SimpleDateFormat sdf = new SimpleDateFormat( \"EEE, dd MMM yyyy HH:mm:ss Z\", Locale.US );\n                Date modified = sdf.parse( stringDate );\n                cfile.setModificationDate( modified );\n\n            } catch ( ParseException ex ) {\n                throw new CStorageException( \"Can't parse date modified: \" + stringDate + \" (\" + ex.getMessage() + \")\", ex );\n            }\n        }\n\n        return cfile;\n    }"}
{"func_code_string":"public static CheckBox newCheckBox(final String id, final IModel<Boolean> model)\n\t{\n\t\tfinal CheckBox checkBox = new CheckBox(id, model);\n\t\tcheckBox.setOutputMarkupId(true);\n\t\treturn checkBox;\n\t}","func_code_tokens":["public","static","CheckBox","newCheckBox","(","final","String","id",",","final","IModel","<","Boolean",">","model",")","{","final","CheckBox","checkBox","=","new","CheckBox","(","id",",","model",")",";","checkBox",".","setOutputMarkupId","(","true",")",";","return","checkBox",";","}"],"func_documentation_string":"Factory method for create a new {@link CheckBox}.\n\n@param id\nthe id\n@param model\nthe model\n@return the new {@link CheckBox}","func_documentation_tokens":["Factory","method","for","create","a","new","{","@link","CheckBox","}","."],"label":1,"text":"Factory method for create a new {@link CheckBox}.\n\n@param id\nthe id\n@param model\nthe model\n@return the new {@link CheckBox}[SEP]public static CheckBox newCheckBox(final String id, final IModel<Boolean> model)\n\t{\n\t\tfinal CheckBox checkBox = new CheckBox(id, model);\n\t\tcheckBox.setOutputMarkupId(true);\n\t\treturn checkBox;\n\t}"}
{"func_code_string":"private List decodeSort(String value) {\n        ArrayList sorts = new ArrayList();\n\n        String[] nameAndSorts = value.split(DELIM_GRID_NAME);\n        if(nameAndSorts.length != 2)\n            return null;\n\n        String namespace = nameAndSorts[0];\n        String[] sortStrings = nameAndSorts[1].split(DELIM_SORT_TERM);\n\n        \/\/ find the list of sorted columns\n        \/\/ two columns of the bugs grid would be sorted as:\n        \/\/\n        \/\/ netui_sort=bugs~id,-priority\n        for(int i = 0; i < sortStrings.length; i++) {\n            String sort = sortStrings[i];\n            SortDirection sortDirection = SortDirection.NONE;\n            if(sort.startsWith(\"-\"))\n                sortDirection = SortDirection.DESCENDING;\n            else\n                sortDirection = SortDirection.ASCENDING;\n            String sortExpression = (sortDirection == SortDirection.DESCENDING ? sort.substring(1) : sort);\n            Sort gridSort = _config.createSort();\n            gridSort.setSortExpression(sortExpression);\n            gridSort.setDirection(sortDirection);\n            sorts.add(gridSort);\n        }\n\n        return sorts;\n    }","func_code_tokens":["private","List","decodeSort","(","String","value",")","{","ArrayList","sorts","=","new","ArrayList","(",")",";","String","[","]","nameAndSorts","=","value",".","split","(","DELIM_GRID_NAME",")",";","if","(","nameAndSorts",".","length","!=","2",")","return","null",";","String","namespace","=","nameAndSorts","[","0","]",";","String","[","]","sortStrings","=","nameAndSorts","[","1","]",".","split","(","DELIM_SORT_TERM",")",";","\/\/ find the list of sorted columns","\/\/ two columns of the bugs grid would be sorted as:","\/\/","\/\/ netui_sort=bugs~id,-priority","for","(","int","i","=","0",";","i","<","sortStrings",".","length",";","i","++",")","{","String","sort","=","sortStrings","[","i","]",";","SortDirection","sortDirection","=","SortDirection",".","NONE",";","if","(","sort",".","startsWith","(","\"-\"",")",")","sortDirection","=","SortDirection",".","DESCENDING",";","else","sortDirection","=","SortDirection",".","ASCENDING",";","String","sortExpression","=","(","sortDirection","==","SortDirection",".","DESCENDING","?","sort",".","substring","(","1",")",":","sort",")",";","Sort","gridSort","=","_config",".","createSort","(",")",";","gridSort",".","setSortExpression","(","sortExpression",")",";","gridSort",".","setDirection","(","sortDirection",")",";","sorts",".","add","(","gridSort",")",";","}","return","sorts",";","}"],"func_documentation_string":"\/*\nSort handling","func_documentation_tokens":["\/","*","Sort","handling"],"label":1,"text":"\/*\nSort handling[SEP]private List decodeSort(String value) {\n        ArrayList sorts = new ArrayList();\n\n        String[] nameAndSorts = value.split(DELIM_GRID_NAME);\n        if(nameAndSorts.length != 2)\n            return null;\n\n        String namespace = nameAndSorts[0];\n        String[] sortStrings = nameAndSorts[1].split(DELIM_SORT_TERM);\n\n        \/\/ find the list of sorted columns\n        \/\/ two columns of the bugs grid would be sorted as:\n        \/\/\n        \/\/ netui_sort=bugs~id,-priority\n        for(int i = 0; i < sortStrings.length; i++) {\n            String sort = sortStrings[i];\n            SortDirection sortDirection = SortDirection.NONE;\n            if(sort.startsWith(\"-\"))\n                sortDirection = SortDirection.DESCENDING;\n            else\n                sortDirection = SortDirection.ASCENDING;\n            String sortExpression = (sortDirection == SortDirection.DESCENDING ? sort.substring(1) : sort);\n            Sort gridSort = _config.createSort();\n            gridSort.setSortExpression(sortExpression);\n            gridSort.setDirection(sortDirection);\n            sorts.add(gridSort);\n        }\n\n        return sorts;\n    }"}
{"func_code_string":"public AbstractJdbcHelper init() {\n        dataSources.forEach((key, ds) -> DbcHelper.registerJdbcDataSource(id + \"-\" + key, ds));\n        return this;\n    }","func_code_tokens":["public","AbstractJdbcHelper","init","(",")","{","dataSources",".","forEach","(","(","key",",","ds",")","->","DbcHelper",".","registerJdbcDataSource","(","id","+","\"-\"","+","key",",","ds",")",")",";","return","this",";","}"],"func_documentation_string":"Initializing method.\n\n@return","func_documentation_tokens":["Initializing","method","."],"label":0,"text":"Initializing method.\n\n@return[SEP]public AbstractJdbcHelper init() {\n        dataSources.forEach((key, ds) -> DbcHelper.registerJdbcDataSource(id + \"-\" + key, ds));\n        return this;\n    }"}
{"func_code_string":"public RegressionSuite regressionSuite(String name, RegressionPlan regressionPlan) {\n        return regressionSuite(name, regressionPlan, null);\n    }","func_code_tokens":["public","RegressionSuite","regressionSuite","(","String","name",",","RegressionPlan","regressionPlan",")","{","return","regressionSuite","(","name",",","regressionPlan",",","null",")",";","}"],"func_documentation_string":"Creates a new Regression Suite with title assigned with this Regression Plan.\n\n@param name           Title of the suite.\n@param regressionPlan Regression Plan to assign.\n@return A newly minted Regression Suite that exists in the VersionOne system.","func_documentation_tokens":["Creates","a","new","Regression","Suite","with","title","assigned","with","this","Regression","Plan","."],"label":0,"text":"Creates a new Regression Suite with title assigned with this Regression Plan.\n\n@param name           Title of the suite.\n@param regressionPlan Regression Plan to assign.\n@return A newly minted Regression Suite that exists in the VersionOne system.[SEP]public RegressionSuite regressionSuite(String name, RegressionPlan regressionPlan) {\n        return regressionSuite(name, regressionPlan, null);\n    }"}
{"func_code_string":"public static Filter filterArrayToChain(Filter[] filterArray) {\n        for (int i = 0; i < (filterArray.length - 1); i++) {\n            AbstractFilter thisFilter = (AbstractFilter) filterArray[i];\n            thisFilter.setAnd(filterArray[i + 1]);\n        }\n        AbstractFilter lastFilter = (AbstractFilter) filterArray[filterArray.length - 1];\n        lastFilter.setAnd(null);\n        return filterArray[0];\n    }","func_code_tokens":["public","static","Filter","filterArrayToChain","(","Filter","[","]","filterArray",")","{","for","(","int","i","=","0",";","i","<","(","filterArray",".","length","-","1",")",";","i","++",")","{","AbstractFilter","thisFilter","=","(","AbstractFilter",")","filterArray","[","i","]",";","thisFilter",".","setAnd","(","filterArray","[","i","+","1","]",")",";","}","AbstractFilter","lastFilter","=","(","AbstractFilter",")","filterArray","[","filterArray",".","length","-","1","]",";","lastFilter",".","setAnd","(","null",")",";","return","filterArray","[","0","]",";","}"],"func_documentation_string":"Convert an array of <code>AbstractFilter<\/code> objects to a chain of\nfilters by calling the {@link #setAnd} the method of each filter object.\n\n@param filterArray An array of AbstractFilter objects having length\ngreater than zero.\n@return The first filter in the chain which will be == to filterArray[0]","func_documentation_tokens":["Convert","an","array","of","<code",">","AbstractFilter<","\/","code",">","objects","to","a","chain","of","filters","by","calling","the","{","@link","#setAnd","}","the","method","of","each","filter","object","."],"label":0,"text":"Convert an array of <code>AbstractFilter<\/code> objects to a chain of\nfilters by calling the {@link #setAnd} the method of each filter object.\n\n@param filterArray An array of AbstractFilter objects having length\ngreater than zero.\n@return The first filter in the chain which will be == to filterArray[0][SEP]public static Filter filterArrayToChain(Filter[] filterArray) {\n        for (int i = 0; i < (filterArray.length - 1); i++) {\n            AbstractFilter thisFilter = (AbstractFilter) filterArray[i];\n            thisFilter.setAnd(filterArray[i + 1]);\n        }\n        AbstractFilter lastFilter = (AbstractFilter) filterArray[filterArray.length - 1];\n        lastFilter.setAnd(null);\n        return filterArray[0];\n    }"}
{"func_code_string":"@Override\n    public Filter[] filterChainToArray() {\n        int length = chainLength();\n        Filter[] array = new Filter[length];\n        Filter thisFilter = this;\n        for (int i = 0; i < length; i++) {\n            array[i] = thisFilter;\n            thisFilter = thisFilter.getAnd();\n        }\n        return array;\n    }","func_code_tokens":["@","Override","public","Filter","[","]","filterChainToArray","(",")","{","int","length","=","chainLength","(",")",";","Filter","[","]","array","=","new","Filter","[","length","]",";","Filter","thisFilter","=","this",";","for","(","int","i","=","0",";","i","<","length",";","i","++",")","{","array","[","i","]","=","thisFilter",";","thisFilter","=","thisFilter",".","getAnd","(",")",";","}","return","array",";","}"],"func_documentation_string":"Return an array that contains all of the filters in the chain.","func_documentation_tokens":["Return","an","array","that","contains","all","of","the","filters","in","the","chain","."],"label":0,"text":"Return an array that contains all of the filters in the chain.[SEP]@Override\n    public Filter[] filterChainToArray() {\n        int length = chainLength();\n        Filter[] array = new Filter[length];\n        Filter thisFilter = this;\n        for (int i = 0; i < length; i++) {\n            array[i] = thisFilter;\n            thisFilter = thisFilter.getAnd();\n        }\n        return array;\n    }"}
{"func_code_string":"public static String concatFilePath(boolean _includeTrailingDelimiter, String..._parts) {\n        if (_parts == null) {\n            return null;\n        }\n        StringBuilder allParts = new StringBuilder();\n\n        for (int i = 0; i < _parts.length; i++) {\n            if (_parts[i] == null) {\n                continue;\n            }\n            allParts.append(_parts[i]);\n\n            if (!_parts[i].endsWith(File.separator)) {\n                allParts.append(File.separator);\n            }\n        }\n\n        if (!_includeTrailingDelimiter && allParts.length() > 0) {\n            return allParts.substring(0, allParts.lastIndexOf(File.separator));\n        }\n\n        return allParts.toString();\n    }","func_code_tokens":["public","static","String","concatFilePath","(","boolean","_includeTrailingDelimiter",",","String","...","_parts",")","{","if","(","_parts","==","null",")","{","return","null",";","}","StringBuilder","allParts","=","new","StringBuilder","(",")",";","for","(","int","i","=","0",";","i","<","_parts",".","length",";","i","++",")","{","if","(","_parts","[","i","]","==","null",")","{","continue",";","}","allParts",".","append","(","_parts","[","i","]",")",";","if","(","!","_parts","[","i","]",".","endsWith","(","File",".","separator",")",")","{","allParts",".","append","(","File",".","separator",")",";","}","}","if","(","!","_includeTrailingDelimiter","&&","allParts",".","length","(",")",">","0",")","{","return","allParts",".","substring","(","0",",","allParts",".","lastIndexOf","(","File",".","separator",")",")",";","}","return","allParts",".","toString","(",")",";","}"],"func_documentation_string":"Concats a path from all given parts, using the path delimiter for the currently used platform.\n@param _includeTrailingDelimiter include delimiter after last token\n@param _parts parts to concat\n@return concatinated string","func_documentation_tokens":["Concats","a","path","from","all","given","parts","using","the","path","delimiter","for","the","currently","used","platform","."],"label":0,"text":"Concats a path from all given parts, using the path delimiter for the currently used platform.\n@param _includeTrailingDelimiter include delimiter after last token\n@param _parts parts to concat\n@return concatinated string[SEP]public static String concatFilePath(boolean _includeTrailingDelimiter, String..._parts) {\n        if (_parts == null) {\n            return null;\n        }\n        StringBuilder allParts = new StringBuilder();\n\n        for (int i = 0; i < _parts.length; i++) {\n            if (_parts[i] == null) {\n                continue;\n            }\n            allParts.append(_parts[i]);\n\n            if (!_parts[i].endsWith(File.separator)) {\n                allParts.append(File.separator);\n            }\n        }\n\n        if (!_includeTrailingDelimiter && allParts.length() > 0) {\n            return allParts.substring(0, allParts.lastIndexOf(File.separator));\n        }\n\n        return allParts.toString();\n    }"}
{"func_code_string":"public static Properties readPropertiesFromFile(String _fileName, Properties _props) {\n        Properties props = _props == null ? new Properties() : _props;\n\n        LOGGER.debug(\"Trying to read properties from file: \" + _fileName);\n        Properties newProperties = readProperties(new File(_fileName));\n        if (newProperties != null) {\n            LOGGER.debug(\"Successfully read properties from file: \" + _fileName);\n            props.putAll(newProperties);\n        }\n\n        return props;\n    }","func_code_tokens":["public","static","Properties","readPropertiesFromFile","(","String","_fileName",",","Properties","_props",")","{","Properties","props","=","_props","==","null","?","new","Properties","(",")",":","_props",";","LOGGER",".","debug","(","\"Trying to read properties from file: \"","+","_fileName",")",";","Properties","newProperties","=","readProperties","(","new","File","(","_fileName",")",")",";","if","(","newProperties","!=","null",")","{","LOGGER",".","debug","(","\"Successfully read properties from file: \"","+","_fileName",")",";","props",".","putAll","(","newProperties",")",";","}","return","props",";","}"],"func_documentation_string":"Read properties from given filename\n(returns empty {@link Properties} object on failure).\n\n@param _fileName The properties file to read\n@param _props optional properties object, if null a new object created in the method\n@return {@link Properties} object","func_documentation_tokens":["Read","properties","from","given","filename","(","returns","empty","{","@link","Properties","}","object","on","failure",")","."],"label":1,"text":"Read properties from given filename\n(returns empty {@link Properties} object on failure).\n\n@param _fileName The properties file to read\n@param _props optional properties object, if null a new object created in the method\n@return {@link Properties} object[SEP]public static Properties readPropertiesFromFile(String _fileName, Properties _props) {\n        Properties props = _props == null ? new Properties() : _props;\n\n        LOGGER.debug(\"Trying to read properties from file: \" + _fileName);\n        Properties newProperties = readProperties(new File(_fileName));\n        if (newProperties != null) {\n            LOGGER.debug(\"Successfully read properties from file: \" + _fileName);\n            props.putAll(newProperties);\n        }\n\n        return props;\n    }"}
{"func_code_string":"private void cut(XYChartLabel label, double maxWidth, double maxHeight, double rotation)\n    {\n        String text = label.getLabel().getText();\n\n        \/\/ Cut text.\n        cutLabelText(label, maxWidth - 5, maxHeight - 5, rotation);\n\n        String cutText = label.getLabel().getText();\n\n        \/\/ If text is cut, add suffix characters.\n        if (text.length() != cutText.length())\n        {\n            label.getLabel().setText(label.getLabel().getText() + \"...\");\n        }\n        \/\/ TODO: Animate.\n        \/\/ animate(label, text, cutText, originalRotation);\n\n        \/\/ Move label to top.\n        label.getLabelContainer().moveToTop();\n    }","func_code_tokens":["private","void","cut","(","XYChartLabel","label",",","double","maxWidth",",","double","maxHeight",",","double","rotation",")","{","String","text","=","label",".","getLabel","(",")",".","getText","(",")",";","\/\/ Cut text.","cutLabelText","(","label",",","maxWidth","-","5",",","maxHeight","-","5",",","rotation",")",";","String","cutText","=","label",".","getLabel","(",")",".","getText","(",")",";","\/\/ If text is cut, add suffix characters.","if","(","text",".","length","(",")","!=","cutText",".","length","(",")",")","{","label",".","getLabel","(",")",".","setText","(","label",".","getLabel","(",")",".","getText","(",")","+","\"...\"",")",";","}","\/\/ TODO: Animate.","\/\/ animate(label, text, cutText, originalRotation);","\/\/ Move label to top.","label",".","getLabelContainer","(",")",".","moveToTop","(",")",";","}"],"func_documentation_string":"Formats the label Text shapes in the given axis by cutting text value.","func_documentation_tokens":["Formats","the","label","Text","shapes","in","the","given","axis","by","cutting","text","value","."],"label":1,"text":"Formats the label Text shapes in the given axis by cutting text value.[SEP]private void cut(XYChartLabel label, double maxWidth, double maxHeight, double rotation)\n    {\n        String text = label.getLabel().getText();\n\n        \/\/ Cut text.\n        cutLabelText(label, maxWidth - 5, maxHeight - 5, rotation);\n\n        String cutText = label.getLabel().getText();\n\n        \/\/ If text is cut, add suffix characters.\n        if (text.length() != cutText.length())\n        {\n            label.getLabel().setText(label.getLabel().getText() + \"...\");\n        }\n        \/\/ TODO: Animate.\n        \/\/ animate(label, text, cutText, originalRotation);\n\n        \/\/ Move label to top.\n        label.getLabelContainer().moveToTop();\n    }"}
{"func_code_string":"public static Builder running(File executable) {\n        checkArgument(executable.isFile(), \"file not found: %s\", executable);\n        checkArgument(executable.canExecute(), \"executable.canExecute\");\n        return running(executable.getPath());\n    }","func_code_tokens":["public","static","Builder","running","(","File","executable",")","{","checkArgument","(","executable",".","isFile","(",")",",","\"file not found: %s\"",",","executable",")",";","checkArgument","(","executable",".","canExecute","(",")",",","\"executable.canExecute\"",")",";","return","running","(","executable",".","getPath","(",")",")",";","}"],"func_documentation_string":"Constructs a builder instance that will produce a program that\nlaunches the given executable. Checks that a file exists at the given pathname\nand that it is executable by the operating system.\n@param executable the executable file\n@return a builder instance\n@throws IllegalArgumentException if {@link File#canExecute() } is false","func_documentation_tokens":["Constructs","a","builder","instance","that","will","produce","a","program","that","launches","the","given","executable",".","Checks","that","a","file","exists","at","the","given","pathname","and","that","it","is","executable","by","the","operating","system","."],"label":1,"text":"Constructs a builder instance that will produce a program that\nlaunches the given executable. Checks that a file exists at the given pathname\nand that it is executable by the operating system.\n@param executable the executable file\n@return a builder instance\n@throws IllegalArgumentException if {@link File#canExecute() } is false[SEP]public static Builder running(File executable) {\n        checkArgument(executable.isFile(), \"file not found: %s\", executable);\n        checkArgument(executable.canExecute(), \"executable.canExecute\");\n        return running(executable.getPath());\n    }"}
{"func_code_string":"public void save(File file) throws IOException {\n        try (FileOutputStream fout = new FileOutputStream(file)) {\n            save(fout);\n        }\n    }","func_code_tokens":["public","void","save","(","File","file",")","throws","IOException","{","try","(","FileOutputStream","fout","=","new","FileOutputStream","(","file",")",")","{","save","(","fout",")",";","}","}"],"func_documentation_string":"Save this XML into the given file.\n@param file the file\n@throws IOException on error","func_documentation_tokens":["Save","this","XML","into","the","given","file","."],"label":1,"text":"Save this XML into the given file.\n@param file the file\n@throws IOException on error[SEP]public void save(File file) throws IOException {\n        try (FileOutputStream fout = new FileOutputStream(file)) {\n            save(fout);\n        }\n    }"}
{"func_code_string":"public static long binCoeff(int n, int k) {\r\n                if (k > n) {\r\n                        return 0;\r\n                }\r\n                if (k == 0 || k == n) {\r\n                        return 1;\r\n                }\r\n                long result = 1;\r\n                for (int i = 1; i <= k; i++) {\r\n                        result *= (n - i + 1) \/ i;\r\n                }\r\n                return result;\r\n        }","func_code_tokens":["public","static","long","binCoeff","(","int","n",",","int","k",")","{","if","(","k",">","n",")","{","return","0",";","}","if","(","k","==","0","||","k","==","n",")","{","return","1",";","}","long","result","=","1",";","for","(","int","i","=","1",";","i","<=","k",";","i","++",")","{","result","*=","(","n","-","i","+","1",")","\/","i",";","}","return","result",";","}"],"func_documentation_string":"Returns the binomial coefficient.<br>\nFor any set containing n elements, this is the number of distinct\nk-element subsets of it.\n\n@param n Set size\n@param k Subset size\n@return The binomial coefficient of <code>n<\/code> and <code>k<\/code>","func_documentation_tokens":["Returns","the","binomial","coefficient",".","<br",">","For","any","set","containing","n","elements","this","is","the","number","of","distinct","k","-","element","subsets","of","it","."],"label":1,"text":"Returns the binomial coefficient.<br>\nFor any set containing n elements, this is the number of distinct\nk-element subsets of it.\n\n@param n Set size\n@param k Subset size\n@return The binomial coefficient of <code>n<\/code> and <code>k<\/code>[SEP]public static long binCoeff(int n, int k) {\r\n                if (k > n) {\r\n                        return 0;\r\n                }\r\n                if (k == 0 || k == n) {\r\n                        return 1;\r\n                }\r\n                long result = 1;\r\n                for (int i = 1; i <= k; i++) {\r\n                        result *= (n - i + 1) \/ i;\r\n                }\r\n                return result;\r\n        }"}
{"func_code_string":"private void readPropertyFile()\n\t{\n\t\tjava.util.Properties props = new java.util.Properties();\n\t    try\n\t    {\n\t        File propertyFile = new File(propertyFilePath + File.separator + PROPERTYFILENAME);\n\t        if (propertyFile.exists())\n\t        {\n\t        \tjava.io.FileInputStream fis = null;\n\t        \ttry\n\t        \t{\n\t\t\t    \tfis = new java.io.FileInputStream(propertyFile);\n\t\t\t        props.load(fis);\n\t        \t}\n\t        \tfinally\n\t        \t{\n\t        \t\tif (fis!=null) try { fis.close(); } catch (IOException ex) { Log.error(\"IGNORED\", ex); }\n\t        \t}\n\t        }\n\n\t        searchPath = props.getProperty(PROPERTY_SEARCHPATH, Helpers.HOMEDIR);\n\t\t\texportPath = props.getProperty(PROPERTY_EXPORTPATH, Helpers.HOMEDIR);\n\t\t\tuiClassName = props.getProperty(PROPERTY_LOOKANDFEEL, javax.swing.UIManager.getSystemLookAndFeelClassName());\n\t\t\tuseSystemTray = Boolean.parseBoolean(props.getProperty(PROPERTY_SYSTEMTRAY, \"FALSE\"));\n\t\t\tcurrentVolume = Float.parseFloat(props.getProperty(PROPERTY_VOLUME_VALUE, \"1.0\"));\n\t\t\tcurrentBalance = Float.parseFloat(props.getProperty(PROPERTY_BALANCE_VALUE, \"0.0\"));\n\t\t\tlastLoaded = new ArrayList<URL>(PROPERTY_LASTLOADED_MAXENTRIES);\n\t\t\tfor (int i=0; i<PROPERTY_LASTLOADED_MAXENTRIES; i++)\n\t\t\t{\n\t\t\t\tString url = props.getProperty(PROPERTY_LASTLOADED+'.'+i, null);\n\t\t\t\tif (url!=null) lastLoaded.add(new URL(url)); else lastLoaded.add(null);\n\t\t\t}\n\t\t\tsetDSPEnabled(Boolean.parseBoolean(props.getProperty(PROPERTY_EFFECTS_PASSTHROUGH, \"FALSE\")));\n\t\t\tmainDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_MAINDIALOG_POS, \"-1x-1\"));\n\t\t\tmainDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_MAINDIALOG_SIZE, \"320x410\"));\n\t\t\tplayerSetUpDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_SETUPDIALOG_POS, \"-1x-1\"));\n\t\t\tplayerSetUpDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_SETUPDIALOG_SIZE, \"720x230\"));\n\t\t\tplayerSetUpDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_SETUPDIALOG_VISABLE, \"false\"));\n\t\t\tmodInfoDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_PROPERTIESDIALOG_POS, \"-1x-1\"));\n\t\t\tmodInfoDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_PROPERTIESDIALOG_SIZE, \"520x630\"));\n\t\t\tmodInfoDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_PROPERTIESDIALOG_VISABLE, \"false\"));\n\t\t\tplaylistDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_PLAYLISTDIALOG_POS, \"-1x-1\"));\n\t\t\tplaylistDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_PLAYLISTDIALOG_SIZE, \"400x400\"));\n\t\t\tplaylistDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_PLAYLIST_VISABLE, \"false\"));\n\t\t\teffectsDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_EFFECTDIALOG_POS, \"-1x-1\"));\n\t\t\teffectsDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_EFFECTDIALOG_SIZE, \"560x470\"));\n\t\t\teffectDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_EFFECT_VISABLE, \"false\"));\n\t\t\t\n\t\t\tif (currentEqualizer!=null)\n\t\t\t{\n\t\t\t\tboolean isActive = Boolean.parseBoolean(props.getProperty(PROPERTY_EQUALIZER_ISACTIVE, \"FALSE\"));\n\t\t\t\tcurrentEqualizer.setIsActive(isActive);\n\t\t\t\tfloat preAmpValueDB = Float.parseFloat(props.getProperty(PROPERTY_EQUALIZER_PREAMP, \"0.0\"));\n\t\t\t\tcurrentEqualizer.setPreAmp(preAmpValueDB);\n\t\t\t\tfor (int i=0; i<currentEqualizer.getBandCount(); i++)\n\t\t\t\t{\n\t\t\t\t\tfloat bandValueDB = Float.parseFloat(props.getProperty(PROPERTY_EQUALIZER_BAND_PREFIX + Integer.toString(i), \"0.0\"));\n\t\t\t\t\tcurrentEqualizer.setBand(i, bandValueDB);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (currentPitchShift!=null)\n\t\t\t{\n\t\t\t\tboolean isActive = Boolean.parseBoolean(props.getProperty(PROPERTY_PITCHSHIFT_ISACTIVE, \"FALSE\"));\n\t\t\t\tcurrentPitchShift.setIsActive(isActive);\n\t\t\t\tfloat pitchValue = Float.parseFloat(props.getProperty(PROPERTY_PITCHSHIFT_PITCH, \"1.0\"));\n\t\t\t\tcurrentPitchShift.setPitchScale(pitchValue);\n\t\t\t\tfloat scaleValue = Float.parseFloat(props.getProperty(PROPERTY_PITCHSHIFT_SAMPLESCALE, \"1.0\"));\n\t\t\t\tcurrentPitchShift.setSampleScale(scaleValue);\n\t\t\t\tint overSampling = Integer.parseInt(props.getProperty(PROPERTY_PITCHSHIFT_OVERSAMPLING, \"32\"));\n\t\t\t\tcurrentPitchShift.setFFTOversampling(overSampling);\n\t\t\t\tint frameSize = Integer.parseInt(props.getProperty(PROPERTY_PITCHSHIFT_FRAMESIZE, \"8192\"));\n\t\t\t\tcurrentPitchShift.setFFTFrameSize(frameSize);\n\t\t\t}\n\n\t\t\tMultimediaContainerManager.configureContainer(props);\n\t    }\n\t    catch (Throwable ex)\n\t    {\n\t\t\tLog.error(\"[MainForm]\", ex);\n\t    }\n\t}","func_code_tokens":["private","void","readPropertyFile","(",")","{","java",".","util",".","Properties","props","=","new","java",".","util",".","Properties","(",")",";","try","{","File","propertyFile","=","new","File","(","propertyFilePath","+","File",".","separator","+","PROPERTYFILENAME",")",";","if","(","propertyFile",".","exists","(",")",")","{","java",".","io",".","FileInputStream","fis","=","null",";","try","{","fis","=","new","java",".","io",".","FileInputStream","(","propertyFile",")",";","props",".","load","(","fis",")",";","}","finally","{","if","(","fis","!=","null",")","try","{","fis",".","close","(",")",";","}","catch","(","IOException","ex",")","{","Log",".","error","(","\"IGNORED\"",",","ex",")",";","}","}","}","searchPath","=","props",".","getProperty","(","PROPERTY_SEARCHPATH",",","Helpers",".","HOMEDIR",")",";","exportPath","=","props",".","getProperty","(","PROPERTY_EXPORTPATH",",","Helpers",".","HOMEDIR",")",";","uiClassName","=","props",".","getProperty","(","PROPERTY_LOOKANDFEEL",",","javax",".","swing",".","UIManager",".","getSystemLookAndFeelClassName","(",")",")",";","useSystemTray","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_SYSTEMTRAY",",","\"FALSE\"",")",")",";","currentVolume","=","Float",".","parseFloat","(","props",".","getProperty","(","PROPERTY_VOLUME_VALUE",",","\"1.0\"",")",")",";","currentBalance","=","Float",".","parseFloat","(","props",".","getProperty","(","PROPERTY_BALANCE_VALUE",",","\"0.0\"",")",")",";","lastLoaded","=","new","ArrayList","<","URL",">","(","PROPERTY_LASTLOADED_MAXENTRIES",")",";","for","(","int","i","=","0",";","i","<","PROPERTY_LASTLOADED_MAXENTRIES",";","i","++",")","{","String","url","=","props",".","getProperty","(","PROPERTY_LASTLOADED","+","'","'","+","i",",","null",")",";","if","(","url","!=","null",")","lastLoaded",".","add","(","new","URL","(","url",")",")",";","else","lastLoaded",".","add","(","null",")",";","}","setDSPEnabled","(","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_EFFECTS_PASSTHROUGH",",","\"FALSE\"",")",")",")",";","mainDialogLocation","=","Helpers",".","getPointFromString","(","props",".","getProperty","(","PROPERTY_MAINDIALOG_POS",",","\"-1x-1\"",")",")",";","mainDialogSize","=","Helpers",".","getDimensionFromString","(","props",".","getProperty","(","PROPERTY_MAINDIALOG_SIZE",",","\"320x410\"",")",")",";","playerSetUpDialogLocation","=","Helpers",".","getPointFromString","(","props",".","getProperty","(","PROPERTY_SETUPDIALOG_POS",",","\"-1x-1\"",")",")",";","playerSetUpDialogSize","=","Helpers",".","getDimensionFromString","(","props",".","getProperty","(","PROPERTY_SETUPDIALOG_SIZE",",","\"720x230\"",")",")",";","playerSetUpDialogVisable","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_SETUPDIALOG_VISABLE",",","\"false\"",")",")",";","modInfoDialogLocation","=","Helpers",".","getPointFromString","(","props",".","getProperty","(","PROPERTY_PROPERTIESDIALOG_POS",",","\"-1x-1\"",")",")",";","modInfoDialogSize","=","Helpers",".","getDimensionFromString","(","props",".","getProperty","(","PROPERTY_PROPERTIESDIALOG_SIZE",",","\"520x630\"",")",")",";","modInfoDialogVisable","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_PROPERTIESDIALOG_VISABLE",",","\"false\"",")",")",";","playlistDialogLocation","=","Helpers",".","getPointFromString","(","props",".","getProperty","(","PROPERTY_PLAYLISTDIALOG_POS",",","\"-1x-1\"",")",")",";","playlistDialogSize","=","Helpers",".","getDimensionFromString","(","props",".","getProperty","(","PROPERTY_PLAYLISTDIALOG_SIZE",",","\"400x400\"",")",")",";","playlistDialogVisable","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_PLAYLIST_VISABLE",",","\"false\"",")",")",";","effectsDialogLocation","=","Helpers",".","getPointFromString","(","props",".","getProperty","(","PROPERTY_EFFECTDIALOG_POS",",","\"-1x-1\"",")",")",";","effectsDialogSize","=","Helpers",".","getDimensionFromString","(","props",".","getProperty","(","PROPERTY_EFFECTDIALOG_SIZE",",","\"560x470\"",")",")",";","effectDialogVisable","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_EFFECT_VISABLE",",","\"false\"",")",")",";","if","(","currentEqualizer","!=","null",")","{","boolean","isActive","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_EQUALIZER_ISACTIVE",",","\"FALSE\"",")",")",";","currentEqualizer",".","setIsActive","(","isActive",")",";","float","preAmpValueDB","=","Float",".","parseFloat","(","props",".","getProperty","(","PROPERTY_EQUALIZER_PREAMP",",","\"0.0\"",")",")",";","currentEqualizer",".","setPreAmp","(","preAmpValueDB",")",";","for","(","int","i","=","0",";","i","<","currentEqualizer",".","getBandCount","(",")",";","i","++",")","{","float","bandValueDB","=","Float",".","parseFloat","(","props",".","getProperty","(","PROPERTY_EQUALIZER_BAND_PREFIX","+","Integer",".","toString","(","i",")",",","\"0.0\"",")",")",";","currentEqualizer",".","setBand","(","i",",","bandValueDB",")",";","}","}","if","(","currentPitchShift","!=","null",")","{","boolean","isActive","=","Boolean",".","parseBoolean","(","props",".","getProperty","(","PROPERTY_PITCHSHIFT_ISACTIVE",",","\"FALSE\"",")",")",";","currentPitchShift",".","setIsActive","(","isActive",")",";","float","pitchValue","=","Float",".","parseFloat","(","props",".","getProperty","(","PROPERTY_PITCHSHIFT_PITCH",",","\"1.0\"",")",")",";","currentPitchShift",".","setPitchScale","(","pitchValue",")",";","float","scaleValue","=","Float",".","parseFloat","(","props",".","getProperty","(","PROPERTY_PITCHSHIFT_SAMPLESCALE",",","\"1.0\"",")",")",";","currentPitchShift",".","setSampleScale","(","scaleValue",")",";","int","overSampling","=","Integer",".","parseInt","(","props",".","getProperty","(","PROPERTY_PITCHSHIFT_OVERSAMPLING",",","\"32\"",")",")",";","currentPitchShift",".","setFFTOversampling","(","overSampling",")",";","int","frameSize","=","Integer",".","parseInt","(","props",".","getProperty","(","PROPERTY_PITCHSHIFT_FRAMESIZE",",","\"8192\"",")",")",";","currentPitchShift",".","setFFTFrameSize","(","frameSize",")",";","}","MultimediaContainerManager",".","configureContainer","(","props",")",";","}","catch","(","Throwable","ex",")","{","Log",".","error","(","\"[MainForm]\"",",","ex",")",";","}","}"],"func_documentation_string":"Read the properties from file. Use default values, if not set or file not available\n@since 01.07.2006","func_documentation_tokens":["Read","the","properties","from","file",".","Use","default","values","if","not","set","or","file","not","available"],"label":1,"text":"Read the properties from file. Use default values, if not set or file not available\n@since 01.07.2006[SEP]private void readPropertyFile()\n\t{\n\t\tjava.util.Properties props = new java.util.Properties();\n\t    try\n\t    {\n\t        File propertyFile = new File(propertyFilePath + File.separator + PROPERTYFILENAME);\n\t        if (propertyFile.exists())\n\t        {\n\t        \tjava.io.FileInputStream fis = null;\n\t        \ttry\n\t        \t{\n\t\t\t    \tfis = new java.io.FileInputStream(propertyFile);\n\t\t\t        props.load(fis);\n\t        \t}\n\t        \tfinally\n\t        \t{\n\t        \t\tif (fis!=null) try { fis.close(); } catch (IOException ex) { Log.error(\"IGNORED\", ex); }\n\t        \t}\n\t        }\n\n\t        searchPath = props.getProperty(PROPERTY_SEARCHPATH, Helpers.HOMEDIR);\n\t\t\texportPath = props.getProperty(PROPERTY_EXPORTPATH, Helpers.HOMEDIR);\n\t\t\tuiClassName = props.getProperty(PROPERTY_LOOKANDFEEL, javax.swing.UIManager.getSystemLookAndFeelClassName());\n\t\t\tuseSystemTray = Boolean.parseBoolean(props.getProperty(PROPERTY_SYSTEMTRAY, \"FALSE\"));\n\t\t\tcurrentVolume = Float.parseFloat(props.getProperty(PROPERTY_VOLUME_VALUE, \"1.0\"));\n\t\t\tcurrentBalance = Float.parseFloat(props.getProperty(PROPERTY_BALANCE_VALUE, \"0.0\"));\n\t\t\tlastLoaded = new ArrayList<URL>(PROPERTY_LASTLOADED_MAXENTRIES);\n\t\t\tfor (int i=0; i<PROPERTY_LASTLOADED_MAXENTRIES; i++)\n\t\t\t{\n\t\t\t\tString url = props.getProperty(PROPERTY_LASTLOADED+'.'+i, null);\n\t\t\t\tif (url!=null) lastLoaded.add(new URL(url)); else lastLoaded.add(null);\n\t\t\t}\n\t\t\tsetDSPEnabled(Boolean.parseBoolean(props.getProperty(PROPERTY_EFFECTS_PASSTHROUGH, \"FALSE\")));\n\t\t\tmainDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_MAINDIALOG_POS, \"-1x-1\"));\n\t\t\tmainDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_MAINDIALOG_SIZE, \"320x410\"));\n\t\t\tplayerSetUpDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_SETUPDIALOG_POS, \"-1x-1\"));\n\t\t\tplayerSetUpDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_SETUPDIALOG_SIZE, \"720x230\"));\n\t\t\tplayerSetUpDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_SETUPDIALOG_VISABLE, \"false\"));\n\t\t\tmodInfoDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_PROPERTIESDIALOG_POS, \"-1x-1\"));\n\t\t\tmodInfoDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_PROPERTIESDIALOG_SIZE, \"520x630\"));\n\t\t\tmodInfoDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_PROPERTIESDIALOG_VISABLE, \"false\"));\n\t\t\tplaylistDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_PLAYLISTDIALOG_POS, \"-1x-1\"));\n\t\t\tplaylistDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_PLAYLISTDIALOG_SIZE, \"400x400\"));\n\t\t\tplaylistDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_PLAYLIST_VISABLE, \"false\"));\n\t\t\teffectsDialogLocation = Helpers.getPointFromString(props.getProperty(PROPERTY_EFFECTDIALOG_POS, \"-1x-1\"));\n\t\t\teffectsDialogSize = Helpers.getDimensionFromString(props.getProperty(PROPERTY_EFFECTDIALOG_SIZE, \"560x470\"));\n\t\t\teffectDialogVisable = Boolean.parseBoolean(props.getProperty(PROPERTY_EFFECT_VISABLE, \"false\"));\n\t\t\t\n\t\t\tif (currentEqualizer!=null)\n\t\t\t{\n\t\t\t\tboolean isActive = Boolean.parseBoolean(props.getProperty(PROPERTY_EQUALIZER_ISACTIVE, \"FALSE\"));\n\t\t\t\tcurrentEqualizer.setIsActive(isActive);\n\t\t\t\tfloat preAmpValueDB = Float.parseFloat(props.getProperty(PROPERTY_EQUALIZER_PREAMP, \"0.0\"));\n\t\t\t\tcurrentEqualizer.setPreAmp(preAmpValueDB);\n\t\t\t\tfor (int i=0; i<currentEqualizer.getBandCount(); i++)\n\t\t\t\t{\n\t\t\t\t\tfloat bandValueDB = Float.parseFloat(props.getProperty(PROPERTY_EQUALIZER_BAND_PREFIX + Integer.toString(i), \"0.0\"));\n\t\t\t\t\tcurrentEqualizer.setBand(i, bandValueDB);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (currentPitchShift!=null)\n\t\t\t{\n\t\t\t\tboolean isActive = Boolean.parseBoolean(props.getProperty(PROPERTY_PITCHSHIFT_ISACTIVE, \"FALSE\"));\n\t\t\t\tcurrentPitchShift.setIsActive(isActive);\n\t\t\t\tfloat pitchValue = Float.parseFloat(props.getProperty(PROPERTY_PITCHSHIFT_PITCH, \"1.0\"));\n\t\t\t\tcurrentPitchShift.setPitchScale(pitchValue);\n\t\t\t\tfloat scaleValue = Float.parseFloat(props.getProperty(PROPERTY_PITCHSHIFT_SAMPLESCALE, \"1.0\"));\n\t\t\t\tcurrentPitchShift.setSampleScale(scaleValue);\n\t\t\t\tint overSampling = Integer.parseInt(props.getProperty(PROPERTY_PITCHSHIFT_OVERSAMPLING, \"32\"));\n\t\t\t\tcurrentPitchShift.setFFTOversampling(overSampling);\n\t\t\t\tint frameSize = Integer.parseInt(props.getProperty(PROPERTY_PITCHSHIFT_FRAMESIZE, \"8192\"));\n\t\t\t\tcurrentPitchShift.setFFTFrameSize(frameSize);\n\t\t\t}\n\n\t\t\tMultimediaContainerManager.configureContainer(props);\n\t    }\n\t    catch (Throwable ex)\n\t    {\n\t\t\tLog.error(\"[MainForm]\", ex);\n\t    }\n\t}"}
{"func_code_string":"public static File getExecutionPath() throws OSException {\n        try {\n            return new File(OSUtils.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());\n        } catch (URISyntaxException ex) {\n            throw new OSException(ex);\n        }\n    }","func_code_tokens":["public","static","File","getExecutionPath","(",")","throws","OSException","{","try","{","return","new","File","(","OSUtils",".","class",".","getProtectionDomain","(",")",".","getCodeSource","(",")",".","getLocation","(",")",".","toURI","(",")",".","getPath","(",")",")",";","}","catch","(","URISyntaxException","ex",")","{","throw","new","OSException","(","ex",")",";","}","}"],"func_documentation_string":"Returns the execution path to the direcory of the current Java\napplication.\n\n@return Execution path as {@link File}.\n@throws OSException If the execution path can't be determined.","func_documentation_tokens":["Returns","the","execution","path","to","the","direcory","of","the","current","Java","application","."],"label":0,"text":"Returns the execution path to the direcory of the current Java\napplication.\n\n@return Execution path as {@link File}.\n@throws OSException If the execution path can't be determined.[SEP]public static File getExecutionPath() throws OSException {\n        try {\n            return new File(OSUtils.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());\n        } catch (URISyntaxException ex) {\n            throw new OSException(ex);\n        }\n    }"}
{"func_code_string":"public void save(File file) throws IOException {\n        try (FileOutputStream out = new FileOutputStream(file)) {\n            save(out);\n        }\n    }","func_code_tokens":["public","void","save","(","File","file",")","throws","IOException","{","try","(","FileOutputStream","out","=","new","FileOutputStream","(","file",")",")","{","save","(","out",")",";","}","}"],"func_documentation_string":"Save this XML into the given file.\n@param file the file\n@throws IOException on error","func_documentation_tokens":["Save","this","XML","into","the","given","file","."],"label":0,"text":"Save this XML into the given file.\n@param file the file\n@throws IOException on error[SEP]public void save(File file) throws IOException {\n        try (FileOutputStream out = new FileOutputStream(file)) {\n            save(out);\n        }\n    }"}
{"func_code_string":"public void printHtmlFooter(PrintWriter out, ResourceBundle reg)\n    {\n        String strHTML = reg.getString(\"htmlFooter\");\n        if ((strHTML == null) || (strHTML.length() == 0))\n            strHTML = \"<\/body>\\n<\/html>\";\n        out.println(strHTML);\n        out.flush();\n    }","func_code_tokens":["public","void","printHtmlFooter","(","PrintWriter","out",",","ResourceBundle","reg",")","{","String","strHTML","=","reg",".","getString","(","\"htmlFooter\"",")",";","if","(","(","strHTML","==","null",")","||","(","strHTML",".","length","(",")","==","0",")",")","strHTML","=","\"<\/body>\\n<\/html>\"",";","out",".","println","(","strHTML",")",";","out",".","flush","(",")",";","}"],"func_documentation_string":"Bottom of HTML form.\n@param out The html out stream.\n@param reg The resources object.","func_documentation_tokens":["Bottom","of","HTML","form","."],"label":1,"text":"Bottom of HTML form.\n@param out The html out stream.\n@param reg The resources object.[SEP]public void printHtmlFooter(PrintWriter out, ResourceBundle reg)\n    {\n        String strHTML = reg.getString(\"htmlFooter\");\n        if ((strHTML == null) || (strHTML.length() == 0))\n            strHTML = \"<\/body>\\n<\/html>\";\n        out.println(strHTML);\n        out.flush();\n    }"}
{"func_code_string":"public static String toPrettyJsonString(Object object) {\n        try {\n            return jsonMapper.writerWithDefaultPrettyPrinter()\n                    .writeValueAsString(object);\n        } catch (JsonProcessingException e) {\n            return JMExceptionManager.handleExceptionAndReturnNull(log, e,\n                    \"toPrettyJsonString\", object);\n        }\n    }","func_code_tokens":["public","static","String","toPrettyJsonString","(","Object","object",")","{","try","{","return","jsonMapper",".","writerWithDefaultPrettyPrinter","(",")",".","writeValueAsString","(","object",")",";","}","catch","(","JsonProcessingException","e",")","{","return","JMExceptionManager",".","handleExceptionAndReturnNull","(","log",",","e",",","\"toPrettyJsonString\"",",","object",")",";","}","}"],"func_documentation_string":"To pretty json string string.\n\n@param object the object\n@return the string","func_documentation_tokens":["To","pretty","json","string","string","."],"label":0,"text":"To pretty json string string.\n\n@param object the object\n@return the string[SEP]public static String toPrettyJsonString(Object object) {\n        try {\n            return jsonMapper.writerWithDefaultPrettyPrinter()\n                    .writeValueAsString(object);\n        } catch (JsonProcessingException e) {\n            return JMExceptionManager.handleExceptionAndReturnNull(log, e,\n                    \"toPrettyJsonString\", object);\n        }\n    }"}
{"func_code_string":"private Date toDate(final String pStringDate) {\n\n        \/\/ weird manipulation to parse the date... remove ':' from the timezone\n        \/\/ before: 2011-07-12T22:42:40.000+02:00\n        \/\/ after: 2011-07-12T22:42:40.000+0200\n        final StringBuilder _date = new StringBuilder();\n        _date.append(pStringDate.substring(0, pStringDate.length() - 3));\n        _date.append(pStringDate.substring(pStringDate.length() - 2));\n        try {\n            return new SimpleDateFormat(RFC_339_DATE_FORMAT).parse(_date.toString());\n        } catch (final ParseException e) {\n            throw new IllegalArgumentException(\n                    \"The given spreadsheet ListEntry usercrashdate field value is malformed\", e);\n        }\n    }","func_code_tokens":["private","Date","toDate","(","final","String","pStringDate",")","{","\/\/ weird manipulation to parse the date... remove ':' from the timezone","\/\/ before: 2011-07-12T22:42:40.000+02:00","\/\/ after: 2011-07-12T22:42:40.000+0200","final","StringBuilder","_date","=","new","StringBuilder","(",")",";","_date",".","append","(","pStringDate",".","substring","(","0",",","pStringDate",".","length","(",")","-","3",")",")",";","_date",".","append","(","pStringDate",".","substring","(","pStringDate",".","length","(",")","-","2",")",")",";","try","{","return","new","SimpleDateFormat","(","RFC_339_DATE_FORMAT",")",".","parse","(","_date",".","toString","(",")",")",";","}","catch","(","final","ParseException","e",")","{","throw","new","IllegalArgumentException","(","\"The given spreadsheet ListEntry usercrashdate field value is malformed\"",",","e",")",";","}","}"],"func_documentation_string":"Converts a formated date string to a {@link Date}.\n\n@param pStringDate\nsample: 2011-07-12T22:42:40.000+02:00\n@return the date value","func_documentation_tokens":["Converts","a","formated","date","string","to","a","{","@link","Date","}","."],"label":1,"text":"Converts a formated date string to a {@link Date}.\n\n@param pStringDate\nsample: 2011-07-12T22:42:40.000+02:00\n@return the date value[SEP]private Date toDate(final String pStringDate) {\n\n        \/\/ weird manipulation to parse the date... remove ':' from the timezone\n        \/\/ before: 2011-07-12T22:42:40.000+02:00\n        \/\/ after: 2011-07-12T22:42:40.000+0200\n        final StringBuilder _date = new StringBuilder();\n        _date.append(pStringDate.substring(0, pStringDate.length() - 3));\n        _date.append(pStringDate.substring(pStringDate.length() - 2));\n        try {\n            return new SimpleDateFormat(RFC_339_DATE_FORMAT).parse(_date.toString());\n        } catch (final ParseException e) {\n            throw new IllegalArgumentException(\n                    \"The given spreadsheet ListEntry usercrashdate field value is malformed\", e);\n        }\n    }"}
{"func_code_string":"public static byte[] fromHex(String hex) {\n        try {\n            return Hex.decodeHex(hex.toCharArray());\n        } catch (DecoderException e) {\n            return null;\n        }\n    }","func_code_tokens":["public","static","byte","[","]","fromHex","(","String","hex",")","{","try","{","return","Hex",".","decodeHex","(","hex",".","toCharArray","(",")",")",";","}","catch","(","DecoderException","e",")","{","return","null",";","}","}"],"func_documentation_string":"recreate a byte array from hexadecimal\n\n@param hex\nstring data\n@return byte[] data","func_documentation_tokens":["recreate","a","byte","array","from","hexadecimal"],"label":1,"text":"recreate a byte array from hexadecimal\n\n@param hex\nstring data\n@return byte[] data[SEP]public static byte[] fromHex(String hex) {\n        try {\n            return Hex.decodeHex(hex.toCharArray());\n        } catch (DecoderException e) {\n            return null;\n        }\n    }"}
{"func_code_string":"public String getTableNames(boolean bAddQuotes)\n    {\n        return (m_tableName == null) ? Record.formatTableNames(CLASS_FIELDS_FILE, bAddQuotes) : super.getTableNames(bAddQuotes);\n    }","func_code_tokens":["public","String","getTableNames","(","boolean","bAddQuotes",")","{","return","(","m_tableName","==","null",")","?","Record",".","formatTableNames","(","CLASS_FIELDS_FILE",",","bAddQuotes",")",":","super",".","getTableNames","(","bAddQuotes",")",";","}"],"func_documentation_string":"Get the table name.","func_documentation_tokens":["Get","the","table","name","."],"label":0,"text":"Get the table name.[SEP]public String getTableNames(boolean bAddQuotes)\n    {\n        return (m_tableName == null) ? Record.formatTableNames(CLASS_FIELDS_FILE, bAddQuotes) : super.getTableNames(bAddQuotes);\n    }"}
{"func_code_string":"public String getTableNames(boolean bAddQuotes)\n    {\n        if (m_tableName == null)\n        {\n            String strDatabaseName = \"\";\n            if (this.getDatabaseName() != null)\n                if (!this.getDatabaseName().endsWith(\"_\" + this.getDatabaseName()))\n                    strDatabaseName = \"_\" + this.getDatabaseName();\n            return Record.formatTableNames(DATABASE_INFO_FILE, bAddQuotes) + strDatabaseName;\n        }\n        return super.getTableNames(bAddQuotes);\n    }","func_code_tokens":["public","String","getTableNames","(","boolean","bAddQuotes",")","{","if","(","m_tableName","==","null",")","{","String","strDatabaseName","=","\"\"",";","if","(","this",".","getDatabaseName","(",")","!=","null",")","if","(","!","this",".","getDatabaseName","(",")",".","endsWith","(","\"_\"","+","this",".","getDatabaseName","(",")",")",")","strDatabaseName","=","\"_\"","+","this",".","getDatabaseName","(",")",";","return","Record",".","formatTableNames","(","DATABASE_INFO_FILE",",","bAddQuotes",")","+","strDatabaseName",";","}","return","super",".","getTableNames","(","bAddQuotes",")",";","}"],"func_documentation_string":"Get the name of this table.\nOverride this to supply the name of the table.\nNote: This is almost always overidden (except for mapped files)\n@param bAddQuotes if the table name contains spaces, add quotes.\n@return The name of this table.","func_documentation_tokens":["Get","the","name","of","this","table",".","Override","this","to","supply","the","name","of","the","table",".","Note",":","This","is","almost","always","overidden","(","except","for","mapped","files",")"],"label":0,"text":"Get the name of this table.\nOverride this to supply the name of the table.\nNote: This is almost always overidden (except for mapped files)\n@param bAddQuotes if the table name contains spaces, add quotes.\n@return The name of this table.[SEP]public String getTableNames(boolean bAddQuotes)\n    {\n        if (m_tableName == null)\n        {\n            String strDatabaseName = \"\";\n            if (this.getDatabaseName() != null)\n                if (!this.getDatabaseName().endsWith(\"_\" + this.getDatabaseName()))\n                    strDatabaseName = \"_\" + this.getDatabaseName();\n            return Record.formatTableNames(DATABASE_INFO_FILE, bAddQuotes) + strDatabaseName;\n        }\n        return super.getTableNames(bAddQuotes);\n    }"}
{"func_code_string":"public void scalarMultiply(double c)\r\n    {\r\n        int m = rows;\r\n        int n = cols;\r\n        for (int i = 0; i < m; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                consumer.set(i, j, c * supplier.get(i, j));\r\n            }\r\n        }\r\n    }","func_code_tokens":["public","void","scalarMultiply","(","double","c",")","{","int","m","=","rows",";","int","n","=","cols",";","for","(","int","i","=","0",";","i","<","m",";","i","++",")","{","for","(","int","j","=","0",";","j","<","n",";","j","++",")","{","consumer",".","set","(","i",",","j",",","c","*","supplier",".","get","(","i",",","j",")",")",";","}","}","}"],"func_documentation_string":"Scalar multiplies each item with c\n@param c","func_documentation_tokens":["Scalar","multiplies","each","item","with","c"],"label":0,"text":"Scalar multiplies each item with c\n@param c[SEP]public void scalarMultiply(double c)\r\n    {\r\n        int m = rows;\r\n        int n = cols;\r\n        for (int i = 0; i < m; i++)\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                consumer.set(i, j, c * supplier.get(i, j));\r\n            }\r\n        }\r\n    }"}
{"func_code_string":"public static LocalLongitude getInstance(double longitude, double latitude)\r\n    {\r\n        if (Math.abs(longitude) < 179)\r\n        {\r\n            return new LocalLongitude(latitude);\r\n        }\r\n        else\r\n        {\r\n            return new PacificLongitude(latitude);\r\n        }\r\n    }","func_code_tokens":["public","static","LocalLongitude","getInstance","(","double","longitude",",","double","latitude",")","{","if","(","Math",".","abs","(","longitude",")","<","179",")","{","return","new","LocalLongitude","(","latitude",")",";","}","else","{","return","new","PacificLongitude","(","latitude",")",";","}","}"],"func_documentation_string":"Returns LocalLongitude instance which is usable about 60 NM around starting\npoint.\n@param longitude\n@param latitude\n@return","func_documentation_tokens":["Returns","LocalLongitude","instance","which","is","usable","about","60","NM","around","starting","point","."],"label":0,"text":"Returns LocalLongitude instance which is usable about 60 NM around starting\npoint.\n@param longitude\n@param latitude\n@return[SEP]public static LocalLongitude getInstance(double longitude, double latitude)\r\n    {\r\n        if (Math.abs(longitude) < 179)\r\n        {\r\n            return new LocalLongitude(latitude);\r\n        }\r\n        else\r\n        {\r\n            return new PacificLongitude(latitude);\r\n        }\r\n    }"}
{"func_code_string":"public static <T> T deserialize(byte[] input, Class<T> classType)\n            throws JsonParseException, JsonMappingException, IOException {\n        return mapper.readValue(input, classType);\n    }","func_code_tokens":["public","static","<","T",">","T","deserialize","(","byte","[","]","input",",","Class","<","T",">","classType",")","throws","JsonParseException",",","JsonMappingException",",","IOException","{","return","mapper",".","readValue","(","input",",","classType",")",";","}"],"func_documentation_string":"Deserialize from byte array.\n\n@param input\nthe JSON String byte array.\n@param classType\nthe target Object class type.\n@return the target Object instance.\n@throws JsonParseException\n@throws JsonMappingException\n@throws IOException","func_documentation_tokens":["Deserialize","from","byte","array","."],"label":1,"text":"Deserialize from byte array.\n\n@param input\nthe JSON String byte array.\n@param classType\nthe target Object class type.\n@return the target Object instance.\n@throws JsonParseException\n@throws JsonMappingException\n@throws IOException[SEP]public static <T> T deserialize(byte[] input, Class<T> classType)\n            throws JsonParseException, JsonMappingException, IOException {\n        return mapper.readValue(input, classType);\n    }"}
{"func_code_string":"public boolean verifyChecked(final By checkboxBy) {\n\t\tWebElement element = driver.findElement(checkboxBy);\n\n\t\tif (element.isSelected()) {\n\t\t\tLOG.info(\"Checkbox: \" + element + \" is checked!\");\n\t\t\treturn true;\n\t\t}\n\n\t\tLOG.info(\"Checkbox: \" + element + \" is NOT checked!\");\n\t\treturn false;\n\t}","func_code_tokens":["public","boolean","verifyChecked","(","final","By","checkboxBy",")","{","WebElement","element","=","driver",".","findElement","(","checkboxBy",")",";","if","(","element",".","isSelected","(",")",")","{","LOG",".","info","(","\"Checkbox: \"","+","element","+","\" is checked!\"",")",";","return","true",";","}","LOG",".","info","(","\"Checkbox: \"","+","element","+","\" is NOT checked!\"",")",";","return","false",";","}"],"func_documentation_string":"Verifies that the given checkbox is checked.\n\n@param checkboxBy\nthe method of identifying the checkbox\n@return true if the given checkbox is checked or false otherwise","func_documentation_tokens":["Verifies","that","the","given","checkbox","is","checked","."],"label":1,"text":"Verifies that the given checkbox is checked.\n\n@param checkboxBy\nthe method of identifying the checkbox\n@return true if the given checkbox is checked or false otherwise[SEP]public boolean verifyChecked(final By checkboxBy) {\n\t\tWebElement element = driver.findElement(checkboxBy);\n\n\t\tif (element.isSelected()) {\n\t\t\tLOG.info(\"Checkbox: \" + element + \" is checked!\");\n\t\t\treturn true;\n\t\t}\n\n\t\tLOG.info(\"Checkbox: \" + element + \" is NOT checked!\");\n\t\treturn false;\n\t}"}
{"func_code_string":"static String urlencode(final String s) {\n\t\ttry {\n\t\t\treturn URLEncoder.encode(s, CHARSET_NAME);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}","func_code_tokens":["static","String","urlencode","(","final","String","s",")","{","try","{","return","URLEncoder",".","encode","(","s",",","CHARSET_NAME",")",";","}","catch","(","UnsupportedEncodingException","e",")","{","throw","new","RuntimeException","(","e",")",";","}","}"],"func_documentation_string":"Url-encodes a string.","func_documentation_tokens":["Url","-","encodes","a","string","."],"label":1,"text":"Url-encodes a string.[SEP]static String urlencode(final String s) {\n\t\ttry {\n\t\t\treturn URLEncoder.encode(s, CHARSET_NAME);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}"}
{"func_code_string":"public void post(String jsonBody, Integer expectedResponseCode) throws IOException {\n    HttpURLConnection conn = getUrlConnection();\n\n    try {\n      \/\/ send post request with json body for the topology\n      if (!NetworkUtils.sendHttpPostRequest(conn, NetworkUtils.JSON_TYPE, jsonBody.getBytes())) {\n        throw new IOException(\"Failed to send POST to \" + endpointURI);\n      }\n\n      \/\/ check the response\n      if (!NetworkUtils.checkHttpResponseCode(conn, expectedResponseCode)) {\n        byte[] bytes = NetworkUtils.readHttpResponse(conn);\n        LOG.log(Level.SEVERE, \"Failed to send POST request to endpoint\");\n        LOG.log(Level.SEVERE, new String(bytes));\n        throw new IOException(\"Unexpected response from connection. Expected \"\n            + expectedResponseCode + \" but received \" + conn.getResponseCode());\n      }\n    } finally {\n      conn.disconnect();\n    }\n  }","func_code_tokens":["public","void","post","(","String","jsonBody",",","Integer","expectedResponseCode",")","throws","IOException","{","HttpURLConnection","conn","=","getUrlConnection","(",")",";","try","{","\/\/ send post request with json body for the topology","if","(","!","NetworkUtils",".","sendHttpPostRequest","(","conn",",","NetworkUtils",".","JSON_TYPE",",","jsonBody",".","getBytes","(",")",")",")","{","throw","new","IOException","(","\"Failed to send POST to \"","+","endpointURI",")",";","}","\/\/ check the response","if","(","!","NetworkUtils",".","checkHttpResponseCode","(","conn",",","expectedResponseCode",")",")","{","byte","[","]","bytes","=","NetworkUtils",".","readHttpResponse","(","conn",")",";","LOG",".","log","(","Level",".","SEVERE",",","\"Failed to send POST request to endpoint\"",")",";","LOG",".","log","(","Level",".","SEVERE",",","new","String","(","bytes",")",")",";","throw","new","IOException","(","\"Unexpected response from connection. Expected \"","+","expectedResponseCode","+","\" but received \"","+","conn",".","getResponseCode","(",")",")",";","}","}","finally","{","conn",".","disconnect","(",")",";","}","}"],"func_documentation_string":"Make a POST request to a URI\n\n@param jsonBody String form of the jsonBody\n@param expectedResponseCode the response code you expect to get from this endpoint","func_documentation_tokens":["Make","a","POST","request","to","a","URI"],"label":1,"text":"Make a POST request to a URI\n\n@param jsonBody String form of the jsonBody\n@param expectedResponseCode the response code you expect to get from this endpoint[SEP]public void post(String jsonBody, Integer expectedResponseCode) throws IOException {\n    HttpURLConnection conn = getUrlConnection();\n\n    try {\n      \/\/ send post request with json body for the topology\n      if (!NetworkUtils.sendHttpPostRequest(conn, NetworkUtils.JSON_TYPE, jsonBody.getBytes())) {\n        throw new IOException(\"Failed to send POST to \" + endpointURI);\n      }\n\n      \/\/ check the response\n      if (!NetworkUtils.checkHttpResponseCode(conn, expectedResponseCode)) {\n        byte[] bytes = NetworkUtils.readHttpResponse(conn);\n        LOG.log(Level.SEVERE, \"Failed to send POST request to endpoint\");\n        LOG.log(Level.SEVERE, new String(bytes));\n        throw new IOException(\"Unexpected response from connection. Expected \"\n            + expectedResponseCode + \" but received \" + conn.getResponseCode());\n      }\n    } finally {\n      conn.disconnect();\n    }\n  }"}
{"func_code_string":"public synchronized static void write(int fd, ByteBuffer ... data) throws IOException{\n\n        \/\/ write each byte buffer to the serial port\n        for(ByteBuffer single : data) {\n\n            \/\/ read the byte buffer from the current position up to the limit\n            byte[] payload = new byte[single.remaining()];\n            single.get(payload);\n\n            \/\/ write the data contents to the serial port via JNI native method\n            write(fd, payload, payload.length);\n        }\n    }","func_code_tokens":["public","synchronized","static","void","write","(","int","fd",",","ByteBuffer","...","data",")","throws","IOException","{","\/\/ write each byte buffer to the serial port","for","(","ByteBuffer","single",":","data",")","{","\/\/ read the byte buffer from the current position up to the limit","byte","[","]","payload","=","new","byte","[","single",".","remaining","(",")","]",";","single",".","get","(","payload",")",";","\/\/ write the data contents to the serial port via JNI native method","write","(","fd",",","payload",",","payload",".","length",")",";","}","}"],"func_documentation_string":"Read the content of byte buffer and write the data to the serial port transmit buffer.\n(The buffer is read from the current position up to the 'limit' value, not the 'capacity'.  You may need to\nrewind() or flip() the byte buffer if you have just written to it.)\n\n@param fd\nThe file descriptor of the serial port\/device.\n@param data\nA ByteBuffer of data to be transmitted.","func_documentation_tokens":["Read","the","content","of","byte","buffer","and","write","the","data","to","the","serial","port","transmit","buffer",".","(","The","buffer","is","read","from","the","current","position","up","to","the","limit","value","not","the","capacity",".","You","may","need","to","rewind","()","or","flip","()","the","byte","buffer","if","you","have","just","written","to","it",".",")"],"label":1,"text":"Read the content of byte buffer and write the data to the serial port transmit buffer.\n(The buffer is read from the current position up to the 'limit' value, not the 'capacity'.  You may need to\nrewind() or flip() the byte buffer if you have just written to it.)\n\n@param fd\nThe file descriptor of the serial port\/device.\n@param data\nA ByteBuffer of data to be transmitted.[SEP]public synchronized static void write(int fd, ByteBuffer ... data) throws IOException{\n\n        \/\/ write each byte buffer to the serial port\n        for(ByteBuffer single : data) {\n\n            \/\/ read the byte buffer from the current position up to the limit\n            byte[] payload = new byte[single.remaining()];\n            single.get(payload);\n\n            \/\/ write the data contents to the serial port via JNI native method\n            write(fd, payload, payload.length);\n        }\n    }"}
{"func_code_string":"@Override\n    public void write(byte[] data, int offset, int length) throws IllegalStateException, IOException{\n        \/\/ validate state\n        if (isClosed()) {\n            throw new IllegalStateException(\"Serial connection is not open; cannot 'write()'.\");\n        }\n\n        \/\/ write serial data to transmit buffer\n        com.pi4j.jni.Serial.write(fileDescriptor, data, offset, length);\n    }","func_code_tokens":["@","Override","public","void","write","(","byte","[","]","data",",","int","offset",",","int","length",")","throws","IllegalStateException",",","IOException","{","\/\/ validate state","if","(","isClosed","(",")",")","{","throw","new","IllegalStateException","(","\"Serial connection is not open; cannot 'write()'.\"",")",";","}","\/\/ write serial data to transmit buffer","com",".","pi4j",".","jni",".","Serial",".","write","(","fileDescriptor",",","data",",","offset",",","length",")",";","}"],"func_documentation_string":"<p>Sends an array of bytes to the serial port\/device identified by the given file descriptor.<\/p>\n\n@param data\nA ByteBuffer of data to be transmitted.\n@param offset\nThe starting index (inclusive) in the array to send from.\n@param length\nThe number of bytes from the byte array to transmit to the serial port.\n@throws IllegalStateException thrown if the serial port is not already open.\n@throws IOException thrown on any error.","func_documentation_tokens":["<p",">","Sends","an","array","of","bytes","to","the","serial","port","\/","device","identified","by","the","given","file","descriptor",".","<","\/","p",">"],"label":1,"text":"<p>Sends an array of bytes to the serial port\/device identified by the given file descriptor.<\/p>\n\n@param data\nA ByteBuffer of data to be transmitted.\n@param offset\nThe starting index (inclusive) in the array to send from.\n@param length\nThe number of bytes from the byte array to transmit to the serial port.\n@throws IllegalStateException thrown if the serial port is not already open.\n@throws IOException thrown on any error.[SEP]@Override\n    public void write(byte[] data, int offset, int length) throws IllegalStateException, IOException{\n        \/\/ validate state\n        if (isClosed()) {\n            throw new IllegalStateException(\"Serial connection is not open; cannot 'write()'.\");\n        }\n\n        \/\/ write serial data to transmit buffer\n        com.pi4j.jni.Serial.write(fileDescriptor, data, offset, length);\n    }"}
{"func_code_string":"public static double kMeans(List<double[]> centroids, List<double[]> input) {\n\t\tint k = centroids.size();\n\t\tassert (k > 0);\n\t\tint d = centroids.get(0).length;\n\t\tint size = input.size();\n\n\t\tdouble[][] center = new double[k][];\n\t\tIterator<double[]> iIter = centroids.iterator();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tcenter[i] = iIter.next();\n\t\t}\n\n\t\tdouble[][] newCenter = new double[k][d];\n\t\tdouble[] newCenterWeight = new double[k];\n\t\tint[] nearestCluster = new int[size];\n\t\tboolean converged;\n\t\tdo {\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tfor (int j = 0; j < d; j++) {\n\t\t\t\t\tnewCenter[i][j] = 0.0;\n\t\t\t\t}\n\t\t\t\tnewCenterWeight[i] = 0.0;\n\t\t\t}\n\t\t\tIterator<double[]> lIter = input.iterator();\n\t\t\tfor (int l = 0; l < size; l++) {\n\t\t\t\t\/\/ Calculates the distance from all points to all centroids\n\t\t\t\tdouble[] point = lIter.next();\n\t\t\t\tassert (d == point.length - 1);\n\t\t\t\tdouble minDistance = Double.POSITIVE_INFINITY;\n\t\t\t\tint closestCluster = -1;\n\t\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\t\tdouble distance = Metric.distance(center[i], point, 1);\n\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\tclosestCluster = i;\n\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\/\/ Sums up all points for the new centroids\n\t\t\t\tassert (closestCluster >= 0 && closestCluster < k);\n\t\t\t\tfor (int j = 0; j < d; j++) {\n\t\t\t\t\tnewCenter[closestCluster][j] += point[0] * point[j + 1];\n\t\t\t\t}\n\t\t\t\tnewCenterWeight[closestCluster] += point[0];\n\t\t\t\tnearestCluster[l] = closestCluster;\n\t\t\t}\n\n\t\t\t\/\/ Calculates the new centroids\n\t\t\tconverged = true;\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tfor (int j = 0; j < d; j++) {\n\t\t\t\t\tif (newCenterWeight[i] != 0.0) {\n\t\t\t\t\t\tdouble newValue = newCenter[i][j] \/ newCenterWeight[i];\n\t\t\t\t\t\tif (newValue != center[i][j]) {\n\t\t\t\t\t\t\tconverged = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcenter[i][j] = newValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (!converged);\n\t\t\/\/ Replaces the old centroids with the new ones\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tcentroids.set(i, center[i]);\n\t\t}\n\n\t\t\/\/ Calculates the costs of the solution\n\t\tdouble costs = 0.0;\n\t\tIterator<double[]> lIter = input.iterator();\n\t\tfor (int l = 0; l < size; l++) {\n\t\t\tdouble[] point = lIter.next();\n\t\t\tcosts += point[0]\n\t\t\t\t\t* Metric.distanceSquared(center[nearestCluster[l]], point,\n\t\t\t\t\t\t\t1);\n\t\t}\n\t\treturn costs;\n\t}","func_code_tokens":["public","static","double","kMeans","(","List","<","double","[","]",">","centroids",",","List","<","double","[","]",">","input",")","{","int","k","=","centroids",".","size","(",")",";","assert","(","k",">","0",")",";","int","d","=","centroids",".","get","(","0",")",".","length",";","int","size","=","input",".","size","(",")",";","double","[","]","[","]","center","=","new","double","[","k","]","[","","]",";","Iterator","<","double","[","]",">","iIter","=","centroids",".","iterator","(",")",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","center","[","i","]","=","iIter",".","next","(",")",";","}","double","[","]","[","]","newCenter","=","new","double","[","k","]","[","d","]",";","double","[","]","newCenterWeight","=","new","double","[","k","]",";","int","[","]","nearestCluster","=","new","int","[","size","]",";","boolean","converged",";","do","{","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","for","(","int","j","=","0",";","j","<","d",";","j","++",")","{","newCenter","[","i","]","[","j","]","=","0.0",";","}","newCenterWeight","[","i","]","=","0.0",";","}","Iterator","<","double","[","]",">","lIter","=","input",".","iterator","(",")",";","for","(","int","l","=","0",";","l","<","size",";","l","++",")","{","\/\/ Calculates the distance from all points to all centroids","double","[","]","point","=","lIter",".","next","(",")",";","assert","(","d","==","point",".","length","-","1",")",";","double","minDistance","=","Double",".","POSITIVE_INFINITY",";","int","closestCluster","=","-","1",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","double","distance","=","Metric",".","distance","(","center","[","i","]",",","point",",","1",")",";","if","(","distance","<","minDistance",")","{","closestCluster","=","i",";","minDistance","=","distance",";","}","}","\/\/ Sums up all points for the new centroids","assert","(","closestCluster",">=","0","&&","closestCluster","<","k",")",";","for","(","int","j","=","0",";","j","<","d",";","j","++",")","{","newCenter","[","closestCluster","]","[","j","]","+=","point","[","0","]","*","point","[","j","+","1","]",";","}","newCenterWeight","[","closestCluster","]","+=","point","[","0","]",";","nearestCluster","[","l","]","=","closestCluster",";","}","\/\/ Calculates the new centroids","converged","=","true",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","for","(","int","j","=","0",";","j","<","d",";","j","++",")","{","if","(","newCenterWeight","[","i","]","!=","0.0",")","{","double","newValue","=","newCenter","[","i","]","[","j","]","\/","newCenterWeight","[","i","]",";","if","(","newValue","!=","center","[","i","]","[","j","]",")","{","converged","=","false",";","}","center","[","i","]","[","j","]","=","newValue",";","}","}","}","}","while","(","!","converged",")",";","\/\/ Replaces the old centroids with the new ones","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","centroids",".","set","(","i",",","center","[","i","]",")",";","}","\/\/ Calculates the costs of the solution","double","costs","=","0.0",";","Iterator","<","double","[","]",">","lIter","=","input",".","iterator","(",")",";","for","(","int","l","=","0",";","l","<","size",";","l","++",")","{","double","[","]","point","=","lIter",".","next","(",")",";","costs","+=","point","[","0","]","*","Metric",".","distanceSquared","(","center","[","nearestCluster","[","l","]","]",",","point",",","1",")",";","}","return","costs",";","}"],"func_documentation_string":"Executes the k-means algorithm with the given initial centroids until the\ncosts converges.\n\n@param centroids\ninitial centroids\n@param input\ninput clustering\n@return the k-means costs","func_documentation_tokens":["Executes","the","k","-","means","algorithm","with","the","given","initial","centroids","until","the","costs","converges","."],"label":1,"text":"Executes the k-means algorithm with the given initial centroids until the\ncosts converges.\n\n@param centroids\ninitial centroids\n@param input\ninput clustering\n@return the k-means costs[SEP]public static double kMeans(List<double[]> centroids, List<double[]> input) {\n\t\tint k = centroids.size();\n\t\tassert (k > 0);\n\t\tint d = centroids.get(0).length;\n\t\tint size = input.size();\n\n\t\tdouble[][] center = new double[k][];\n\t\tIterator<double[]> iIter = centroids.iterator();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tcenter[i] = iIter.next();\n\t\t}\n\n\t\tdouble[][] newCenter = new double[k][d];\n\t\tdouble[] newCenterWeight = new double[k];\n\t\tint[] nearestCluster = new int[size];\n\t\tboolean converged;\n\t\tdo {\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tfor (int j = 0; j < d; j++) {\n\t\t\t\t\tnewCenter[i][j] = 0.0;\n\t\t\t\t}\n\t\t\t\tnewCenterWeight[i] = 0.0;\n\t\t\t}\n\t\t\tIterator<double[]> lIter = input.iterator();\n\t\t\tfor (int l = 0; l < size; l++) {\n\t\t\t\t\/\/ Calculates the distance from all points to all centroids\n\t\t\t\tdouble[] point = lIter.next();\n\t\t\t\tassert (d == point.length - 1);\n\t\t\t\tdouble minDistance = Double.POSITIVE_INFINITY;\n\t\t\t\tint closestCluster = -1;\n\t\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\t\tdouble distance = Metric.distance(center[i], point, 1);\n\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\tclosestCluster = i;\n\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\/\/ Sums up all points for the new centroids\n\t\t\t\tassert (closestCluster >= 0 && closestCluster < k);\n\t\t\t\tfor (int j = 0; j < d; j++) {\n\t\t\t\t\tnewCenter[closestCluster][j] += point[0] * point[j + 1];\n\t\t\t\t}\n\t\t\t\tnewCenterWeight[closestCluster] += point[0];\n\t\t\t\tnearestCluster[l] = closestCluster;\n\t\t\t}\n\n\t\t\t\/\/ Calculates the new centroids\n\t\t\tconverged = true;\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tfor (int j = 0; j < d; j++) {\n\t\t\t\t\tif (newCenterWeight[i] != 0.0) {\n\t\t\t\t\t\tdouble newValue = newCenter[i][j] \/ newCenterWeight[i];\n\t\t\t\t\t\tif (newValue != center[i][j]) {\n\t\t\t\t\t\t\tconverged = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcenter[i][j] = newValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} while (!converged);\n\t\t\/\/ Replaces the old centroids with the new ones\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tcentroids.set(i, center[i]);\n\t\t}\n\n\t\t\/\/ Calculates the costs of the solution\n\t\tdouble costs = 0.0;\n\t\tIterator<double[]> lIter = input.iterator();\n\t\tfor (int l = 0; l < size; l++) {\n\t\t\tdouble[] point = lIter.next();\n\t\t\tcosts += point[0]\n\t\t\t\t\t* Metric.distanceSquared(center[nearestCluster[l]], point,\n\t\t\t\t\t\t\t1);\n\t\t}\n\t\treturn costs;\n\t}"}
{"func_code_string":"public static Clustering kMeans_gta(int k, Clustering clustering, Clustering gtClustering) {\n\t\t\n\t\tArrayList<CFCluster> microclusters = new ArrayList<CFCluster>();\n        for (int i = 0; i < clustering.size(); i++) {\n            if (clustering.get(i) instanceof CFCluster) {\n                microclusters.add((CFCluster)clustering.get(i));\n            } else {\n                System.out.println(\"Unsupported Cluster Type:\" + clustering.get(i).getClass() + \". Cluster needs to extend moa.cluster.CFCluster\");\n            }\n        }\n        \n        int n = microclusters.size();\n\t\tassert (k <= n);\n\t\t\n\t\t\/* k-means *\/\n\t\tRandom random = new Random(0);\n\t\tCluster[] centers = new Cluster[k];\n\t\tint K = gtClustering.size();\n\t\t\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tif (i < K) {\t\/\/ GT-aided\n\t\t\t\tcenters[i] = new SphereCluster(gtClustering.get(i).getCenter(), 0);\n\t\t\t} else {\t\t\/\/ Randomized\n\t\t\t\tint rid = random.nextInt(n);\n\t\t\t\tcenters[i] = new SphereCluster(microclusters.get(rid).getCenter(), 0);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn cleanUpKMeans(kMeans(k, centers, microclusters), microclusters);\n\t}","func_code_tokens":["public","static","Clustering","kMeans_gta","(","int","k",",","Clustering","clustering",",","Clustering","gtClustering",")","{","ArrayList","<","CFCluster",">","microclusters","=","new","ArrayList","<","CFCluster",">","(",")",";","for","(","int","i","=","0",";","i","<","clustering",".","size","(",")",";","i","++",")","{","if","(","clustering",".","get","(","i",")","instanceof","CFCluster",")","{","microclusters",".","add","(","(","CFCluster",")","clustering",".","get","(","i",")",")",";","}","else","{","System",".","out",".","println","(","\"Unsupported Cluster Type:\"","+","clustering",".","get","(","i",")",".","getClass","(",")","+","\". Cluster needs to extend moa.cluster.CFCluster\"",")",";","}","}","int","n","=","microclusters",".","size","(",")",";","assert","(","k","<=","n",")",";","\/* k-means *\/","Random","random","=","new","Random","(","0",")",";","Cluster","[","]","centers","=","new","Cluster","[","k","]",";","int","K","=","gtClustering",".","size","(",")",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","if","(","i","<","K",")","{","\/\/ GT-aided","centers","[","i","]","=","new","SphereCluster","(","gtClustering",".","get","(","i",")",".","getCenter","(",")",",","0",")",";","}","else","{","\/\/ Randomized","int","rid","=","random",".","nextInt","(","n",")",";","centers","[","i","]","=","new","SphereCluster","(","microclusters",".","get","(","rid",")",".","getCenter","(",")",",","0",")",";","}","}","return","cleanUpKMeans","(","kMeans","(","k",",","centers",",","microclusters",")",",","microclusters",")",";","}"],"func_documentation_string":"k-means of (micro)clusters, with ground-truth-aided initialization.\n(to produce best results)\n\n@param k\n@param data\n@return (macro)clustering - CFClusters","func_documentation_tokens":["k","-","means","of","(","micro",")","clusters","with","ground","-","truth","-","aided","initialization",".","(","to","produce","best","results",")"],"label":1,"text":"k-means of (micro)clusters, with ground-truth-aided initialization.\n(to produce best results)\n\n@param k\n@param data\n@return (macro)clustering - CFClusters[SEP]public static Clustering kMeans_gta(int k, Clustering clustering, Clustering gtClustering) {\n\t\t\n\t\tArrayList<CFCluster> microclusters = new ArrayList<CFCluster>();\n        for (int i = 0; i < clustering.size(); i++) {\n            if (clustering.get(i) instanceof CFCluster) {\n                microclusters.add((CFCluster)clustering.get(i));\n            } else {\n                System.out.println(\"Unsupported Cluster Type:\" + clustering.get(i).getClass() + \". Cluster needs to extend moa.cluster.CFCluster\");\n            }\n        }\n        \n        int n = microclusters.size();\n\t\tassert (k <= n);\n\t\t\n\t\t\/* k-means *\/\n\t\tRandom random = new Random(0);\n\t\tCluster[] centers = new Cluster[k];\n\t\tint K = gtClustering.size();\n\t\t\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tif (i < K) {\t\/\/ GT-aided\n\t\t\t\tcenters[i] = new SphereCluster(gtClustering.get(i).getCenter(), 0);\n\t\t\t} else {\t\t\/\/ Randomized\n\t\t\t\tint rid = random.nextInt(n);\n\t\t\t\tcenters[i] = new SphereCluster(microclusters.get(rid).getCenter(), 0);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn cleanUpKMeans(kMeans(k, centers, microclusters), microclusters);\n\t}"}
{"func_code_string":"protected static Clustering kMeans(int k, Cluster[] centers, List<? extends Cluster> data) {\n\t\tassert (centers.length == k);\n\t\tassert (k > 0);\n\n\t\tint dimensions = centers[0].getCenter().length;\n\n\t\tArrayList<ArrayList<Cluster>> clustering = new ArrayList<ArrayList<Cluster>>();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tclustering.add(new ArrayList<Cluster>());\n\t\t}\n\n\t\twhile (true) {\n\t\t\t\/\/ Assign points to clusters\n\t\t\tfor (Cluster point : data) {\n\t\t\t\tdouble minDistance = distance(point.getCenter(), centers[0].getCenter());\n\t\t\t\tint closestCluster = 0;\n\t\t\t\tfor (int i = 1; i < k; i++) {\n\t\t\t\t\tdouble distance = distance(point.getCenter(), centers[i].getCenter());\n\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\tclosestCluster = i;\n\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclustering.get(closestCluster).add(point);\n\t\t\t}\n\n\t\t\t\/\/ Calculate new centers and clear clustering lists\n\t\t\tSphereCluster[] newCenters = new SphereCluster[centers.length];\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tnewCenters[i] = calculateCenter(clustering.get(i), dimensions);\n\t\t\t\tclustering.get(i).clear();\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ Convergence check\n\t\t\tboolean converged = true;\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tif (!Arrays.equals(centers[i].getCenter(), newCenters[i].getCenter())) {\n\t\t\t\t\tconverged = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (converged) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tcenters = newCenters;\n\t\t\t}\n\t\t}\n\n\t\treturn new Clustering(centers);\n\t}","func_code_tokens":["protected","static","Clustering","kMeans","(","int","k",",","Cluster","[","]","centers",",","List","<","?","extends","Cluster",">","data",")","{","assert","(","centers",".","length","==","k",")",";","assert","(","k",">","0",")",";","int","dimensions","=","centers","[","0","]",".","getCenter","(",")",".","length",";","ArrayList","<","ArrayList","<","Cluster",">",">","clustering","=","new","ArrayList","<","ArrayList","<","Cluster",">",">","(",")",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","clustering",".","add","(","new","ArrayList","<","Cluster",">","(",")",")",";","}","while","(","true",")","{","\/\/ Assign points to clusters","for","(","Cluster","point",":","data",")","{","double","minDistance","=","distance","(","point",".","getCenter","(",")",",","centers","[","0","]",".","getCenter","(",")",")",";","int","closestCluster","=","0",";","for","(","int","i","=","1",";","i","<","k",";","i","++",")","{","double","distance","=","distance","(","point",".","getCenter","(",")",",","centers","[","i","]",".","getCenter","(",")",")",";","if","(","distance","<","minDistance",")","{","closestCluster","=","i",";","minDistance","=","distance",";","}","}","clustering",".","get","(","closestCluster",")",".","add","(","point",")",";","}","\/\/ Calculate new centers and clear clustering lists","SphereCluster","[","]","newCenters","=","new","SphereCluster","[","centers",".","length","]",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","newCenters","[","i","]","=","calculateCenter","(","clustering",".","get","(","i",")",",","dimensions",")",";","clustering",".","get","(","i",")",".","clear","(",")",";","}","\/\/ Convergence check","boolean","converged","=","true",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","if","(","!","Arrays",".","equals","(","centers","[","i","]",".","getCenter","(",")",",","newCenters","[","i","]",".","getCenter","(",")",")",")","{","converged","=","false",";","break",";","}","}","if","(","converged",")","{","break",";","}","else","{","centers","=","newCenters",";","}","}","return","new","Clustering","(","centers",")",";","}"],"func_documentation_string":"(The Actual Algorithm) k-means of (micro)clusters, with specified initialization points.\n\n@param k\n@param centers - initial centers\n@param data\n@return (macro)clustering - SphereClusters","func_documentation_tokens":["(","The","Actual","Algorithm",")","k","-","means","of","(","micro",")","clusters","with","specified","initialization","points","."],"label":1,"text":"(The Actual Algorithm) k-means of (micro)clusters, with specified initialization points.\n\n@param k\n@param centers - initial centers\n@param data\n@return (macro)clustering - SphereClusters[SEP]protected static Clustering kMeans(int k, Cluster[] centers, List<? extends Cluster> data) {\n\t\tassert (centers.length == k);\n\t\tassert (k > 0);\n\n\t\tint dimensions = centers[0].getCenter().length;\n\n\t\tArrayList<ArrayList<Cluster>> clustering = new ArrayList<ArrayList<Cluster>>();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tclustering.add(new ArrayList<Cluster>());\n\t\t}\n\n\t\twhile (true) {\n\t\t\t\/\/ Assign points to clusters\n\t\t\tfor (Cluster point : data) {\n\t\t\t\tdouble minDistance = distance(point.getCenter(), centers[0].getCenter());\n\t\t\t\tint closestCluster = 0;\n\t\t\t\tfor (int i = 1; i < k; i++) {\n\t\t\t\t\tdouble distance = distance(point.getCenter(), centers[i].getCenter());\n\t\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\t\tclosestCluster = i;\n\t\t\t\t\t\tminDistance = distance;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclustering.get(closestCluster).add(point);\n\t\t\t}\n\n\t\t\t\/\/ Calculate new centers and clear clustering lists\n\t\t\tSphereCluster[] newCenters = new SphereCluster[centers.length];\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tnewCenters[i] = calculateCenter(clustering.get(i), dimensions);\n\t\t\t\tclustering.get(i).clear();\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ Convergence check\n\t\t\tboolean converged = true;\n\t\t\tfor (int i = 0; i < k; i++) {\n\t\t\t\tif (!Arrays.equals(centers[i].getCenter(), newCenters[i].getCenter())) {\n\t\t\t\t\tconverged = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (converged) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tcenters = newCenters;\n\t\t\t}\n\t\t}\n\n\t\treturn new Clustering(centers);\n\t}"}
{"func_code_string":"protected static Clustering cleanUpKMeans(Clustering kMeansResult, ArrayList<CFCluster> microclusters) {\n\t\t\/* Convert k-means result to CFClusters *\/\n\t\tint k = kMeansResult.size();\n\t\tCFCluster[] converted = new CFCluster[k];\n\n\t\tfor (CFCluster mc : microclusters) {\n\t\t    \/\/ Find closest kMeans cluster\n\t\t    double minDistance = Double.MAX_VALUE;\n\t\t    int closestCluster = 0;\n\t\t    for (int i = 0; i < k; i++) {\n\t\t    \tdouble distance = distance(kMeansResult.get(i).getCenter(), mc.getCenter());\n\t\t\t\tif (distance < minDistance) {\n\t\t\t\t    closestCluster = i;\n\t\t\t\t    minDistance = distance;\n\t\t\t\t}\n\t\t    }\n\n\t\t    \/\/ Add to cluster\n\t\t    if ( converted[closestCluster] == null ) {\n\t\t    \tconverted[closestCluster] = (CFCluster)mc.copy();\n\t\t    } else {\n\t\t    \tconverted[closestCluster].add(mc);\n\t\t    }\n\t\t}\n\n\t\t\/\/ Clean up\n\t\tint count = 0;\n\t\tfor (int i = 0; i < converted.length; i++) {\n\t\t    if (converted[i] != null)\n\t\t\tcount++;\n\t\t}\n\n\t\tCFCluster[] cleaned = new CFCluster[count];\n\t\tcount = 0;\n\t\tfor (int i = 0; i < converted.length; i++) {\n\t\t    if (converted[i] != null)\n\t\t\tcleaned[count++] = converted[i];\n\t\t}\n\n\t\treturn new Clustering(cleaned);\n\t}","func_code_tokens":["protected","static","Clustering","cleanUpKMeans","(","Clustering","kMeansResult",",","ArrayList","<","CFCluster",">","microclusters",")","{","\/* Convert k-means result to CFClusters *\/","int","k","=","kMeansResult",".","size","(",")",";","CFCluster","[","]","converted","=","new","CFCluster","[","k","]",";","for","(","CFCluster","mc",":","microclusters",")","{","\/\/ Find closest kMeans cluster","double","minDistance","=","Double",".","MAX_VALUE",";","int","closestCluster","=","0",";","for","(","int","i","=","0",";","i","<","k",";","i","++",")","{","double","distance","=","distance","(","kMeansResult",".","get","(","i",")",".","getCenter","(",")",",","mc",".","getCenter","(",")",")",";","if","(","distance","<","minDistance",")","{","closestCluster","=","i",";","minDistance","=","distance",";","}","}","\/\/ Add to cluster","if","(","converted","[","closestCluster","]","==","null",")","{","converted","[","closestCluster","]","=","(","CFCluster",")","mc",".","copy","(",")",";","}","else","{","converted","[","closestCluster","]",".","add","(","mc",")",";","}","}","\/\/ Clean up","int","count","=","0",";","for","(","int","i","=","0",";","i","<","converted",".","length",";","i","++",")","{","if","(","converted","[","i","]","!=","null",")","count","++",";","}","CFCluster","[","]","cleaned","=","new","CFCluster","[","count","]",";","count","=","0",";","for","(","int","i","=","0",";","i","<","converted",".","length",";","i","++",")","{","if","(","converted","[","i","]","!=","null",")","cleaned","[","count","++","]","=","converted","[","i","]",";","}","return","new","Clustering","(","cleaned",")",";","}"],"func_documentation_string":"Rearrange the k-means result into a set of CFClusters, cleaning up the redundancies.\n\n@param kMeansResult\n@param microclusters\n@return","func_documentation_tokens":["Rearrange","the","k","-","means","result","into","a","set","of","CFClusters","cleaning","up","the","redundancies","."],"label":1,"text":"Rearrange the k-means result into a set of CFClusters, cleaning up the redundancies.\n\n@param kMeansResult\n@param microclusters\n@return[SEP]protected static Clustering cleanUpKMeans(Clustering kMeansResult, ArrayList<CFCluster> microclusters) {\n\t\t\/* Convert k-means result to CFClusters *\/\n\t\tint k = kMeansResult.size();\n\t\tCFCluster[] converted = new CFCluster[k];\n\n\t\tfor (CFCluster mc : microclusters) {\n\t\t    \/\/ Find closest kMeans cluster\n\t\t    double minDistance = Double.MAX_VALUE;\n\t\t    int closestCluster = 0;\n\t\t    for (int i = 0; i < k; i++) {\n\t\t    \tdouble distance = distance(kMeansResult.get(i).getCenter(), mc.getCenter());\n\t\t\t\tif (distance < minDistance) {\n\t\t\t\t    closestCluster = i;\n\t\t\t\t    minDistance = distance;\n\t\t\t\t}\n\t\t    }\n\n\t\t    \/\/ Add to cluster\n\t\t    if ( converted[closestCluster] == null ) {\n\t\t    \tconverted[closestCluster] = (CFCluster)mc.copy();\n\t\t    } else {\n\t\t    \tconverted[closestCluster].add(mc);\n\t\t    }\n\t\t}\n\n\t\t\/\/ Clean up\n\t\tint count = 0;\n\t\tfor (int i = 0; i < converted.length; i++) {\n\t\t    if (converted[i] != null)\n\t\t\tcount++;\n\t\t}\n\n\t\tCFCluster[] cleaned = new CFCluster[count];\n\t\tcount = 0;\n\t\tfor (int i = 0; i < converted.length; i++) {\n\t\t    if (converted[i] != null)\n\t\t\tcleaned[count++] = converted[i];\n\t\t}\n\n\t\treturn new Clustering(cleaned);\n\t}"}
{"func_code_string":"public static <T> List<T> randomSample(Collection<T> collection, int n) {\n\t\tList<T> list = new ArrayList<T>(collection);\n\t\tList<T> sample = new ArrayList<T>(n);\n\t\tRandom random = new Random();\n\t\twhile(n > 0  &&  !list.isEmpty()) {\n\t\t\tint index = random.nextInt(list.size());\n\t\t\tsample.add(list.get(index));\n\t\t\tint indexLast = list.size() - 1;\n\t\t\tT last = list.remove(indexLast);\n\t\t\tif(index < indexLast) {\n\t\t\t\tlist.set(index, last);\n\t\t\t}\n\t\t\tn--;\n\t\t}\n\t\treturn sample;\n\t}","func_code_tokens":["public","static","<","T",">","List","<","T",">","randomSample","(","Collection","<","T",">","collection",",","int","n",")","{","List","<","T",">","list","=","new","ArrayList","<","T",">","(","collection",")",";","List","<","T",">","sample","=","new","ArrayList","<","T",">","(","n",")",";","Random","random","=","new","Random","(",")",";","while","(","n",">","0","&&","!","list",".","isEmpty","(",")",")","{","int","index","=","random",".","nextInt","(","list",".","size","(",")",")",";","sample",".","add","(","list",".","get","(","index",")",")",";","int","indexLast","=","list",".","size","(",")","-","1",";","T","last","=","list",".","remove","(","indexLast",")",";","if","(","index","<","indexLast",")","{","list",".","set","(","index",",","last",")",";","}","n","--",";","}","return","sample",";","}"],"func_documentation_string":"Randomly chooses elements from the collection.\n@param collection The collection.\n@param n The number of elements to choose.\n@param <T> The type of the elements.\n@return A list with the chosen elements.","func_documentation_tokens":["Randomly","chooses","elements","from","the","collection","."],"label":1,"text":"Randomly chooses elements from the collection.\n@param collection The collection.\n@param n The number of elements to choose.\n@param <T> The type of the elements.\n@return A list with the chosen elements.[SEP]public static <T> List<T> randomSample(Collection<T> collection, int n) {\n\t\tList<T> list = new ArrayList<T>(collection);\n\t\tList<T> sample = new ArrayList<T>(n);\n\t\tRandom random = new Random();\n\t\twhile(n > 0  &&  !list.isEmpty()) {\n\t\t\tint index = random.nextInt(list.size());\n\t\t\tsample.add(list.get(index));\n\t\t\tint indexLast = list.size() - 1;\n\t\t\tT last = list.remove(indexLast);\n\t\t\tif(index < indexLast) {\n\t\t\t\tlist.set(index, last);\n\t\t\t}\n\t\t\tn--;\n\t\t}\n\t\treturn sample;\n\t}"}
{"func_code_string":"public static String getEnumName(Enum[] e, int value) {\n        if (e != null) {\n            int toCompareValue;\n            for (Enum en : e) {\n                if (en instanceof EnumReadable) {\n                    toCompareValue = ((EnumReadable) en).value();\n                } else {\n                    toCompareValue = en.ordinal();\n                }\n                if (value == toCompareValue) {\n                    return en.name();\n                }\n            }\n        }\n        return \"\";\n    }","func_code_tokens":["public","static","String","getEnumName","(","Enum","[","]","e",",","int","value",")","{","if","(","e","!=","null",")","{","int","toCompareValue",";","for","(","Enum","en",":","e",")","{","if","(","en","instanceof","EnumReadable",")","{","toCompareValue","=","(","(","EnumReadable",")","en",")",".","value","(",")",";","}","else","{","toCompareValue","=","en",".","ordinal","(",")",";","}","if","(","value","==","toCompareValue",")","{","return","en",".","name","(",")",";","}","}","}","return","\"\"",";","}"],"func_documentation_string":"Gets the enum name.\n\n@param e the e\n@param value the value\n@return the enum name","func_documentation_tokens":["Gets","the","enum","name","."],"label":1,"text":"Gets the enum name.\n\n@param e the e\n@param value the value\n@return the enum name[SEP]public static String getEnumName(Enum[] e, int value) {\n        if (e != null) {\n            int toCompareValue;\n            for (Enum en : e) {\n                if (en instanceof EnumReadable) {\n                    toCompareValue = ((EnumReadable) en).value();\n                } else {\n                    toCompareValue = en.ordinal();\n                }\n                if (value == toCompareValue) {\n                    return en.name();\n                }\n            }\n        }\n        return \"\";\n    }"}
{"func_code_string":"public boolean isCheckBoxChecked(String text)\n\t{\n\t\tif(config.commandLogging){\n\t\t\tLog.d(config.commandLoggingTag, \"isCheckBoxChecked(\\\"\"+text+\"\\\")\");\n\t\t}\n\t\t\n\t\treturn checker.isButtonChecked(CheckBox.class, text);\n\t}","func_code_tokens":["public","boolean","isCheckBoxChecked","(","String","text",")","{","if","(","config",".","commandLogging",")","{","Log",".","d","(","config",".","commandLoggingTag",",","\"isCheckBoxChecked(\\\"\"","+","text","+","\"\\\")\"",")",";","}","return","checker",".","isButtonChecked","(","CheckBox",".","class",",","text",")",";","}"],"func_documentation_string":"Checks if a CheckBox displaying the specified text is checked.\n\n@param text the text that the {@link CheckBox} displays, specified as a regular expression\n@return {@code true} if a {@link CheckBox} displaying the specified text is checked and {@code false} if it is not checked","func_documentation_tokens":["Checks","if","a","CheckBox","displaying","the","specified","text","is","checked","."],"label":1,"text":"Checks if a CheckBox displaying the specified text is checked.\n\n@param text the text that the {@link CheckBox} displays, specified as a regular expression\n@return {@code true} if a {@link CheckBox} displaying the specified text is checked and {@code false} if it is not checked[SEP]public boolean isCheckBoxChecked(String text)\n\t{\n\t\tif(config.commandLogging){\n\t\t\tLog.d(config.commandLoggingTag, \"isCheckBoxChecked(\\\"\"+text+\"\\\")\");\n\t\t}\n\t\t\n\t\treturn checker.isButtonChecked(CheckBox.class, text);\n\t}"}
{"func_code_string":"public static String sort(String list, String sortType, String sortOrder, String delimiter) throws PageException {\n\treturn _sort(toStringArray(listToArray(list, delimiter)), sortType, sortOrder, delimiter);\n    }","func_code_tokens":["public","static","String","sort","(","String","list",",","String","sortType",",","String","sortOrder",",","String","delimiter",")","throws","PageException","{","return","_sort","(","toStringArray","(","listToArray","(","list",",","delimiter",")",")",",","sortType",",","sortOrder",",","delimiter",")",";","}"],"func_documentation_string":"sorts a string list\n\n@param list list to sort\n@param sortType sort type (numeric,text,textnocase)\n@param sortOrder sort order (asc,desc)\n@param delimiter list delimiter\n@return sorted list\n@throws PageException","func_documentation_tokens":["sorts","a","string","list"],"label":1,"text":"sorts a string list\n\n@param list list to sort\n@param sortType sort type (numeric,text,textnocase)\n@param sortOrder sort order (asc,desc)\n@param delimiter list delimiter\n@return sorted list\n@throws PageException[SEP]public static String sort(String list, String sortType, String sortOrder, String delimiter) throws PageException {\n\treturn _sort(toStringArray(listToArray(list, delimiter)), sortType, sortOrder, delimiter);\n    }"}
{"func_code_string":"public int getCoverage1(){\n\t\tif ( myResultsSimilarity1 < 0 ) {\n\t\t\tint distance = ca1Length + ca2Length - 2 * getNrEQR();\n\n\t\t\tint similarity = (ca1Length + ca2Length - distance ) \/ 2;\n\n\t\t\tmyResultsSimilarity1 = Math.round(similarity \/(float) ca1Length * 100);\n\t\t}\n\t\treturn myResultsSimilarity1;\n\t}","func_code_tokens":["public","int","getCoverage1","(",")","{","if","(","myResultsSimilarity1","<","0",")","{","int","distance","=","ca1Length","+","ca2Length","-","2","*","getNrEQR","(",")",";","int","similarity","=","(","ca1Length","+","ca2Length","-","distance",")","\/","2",";","myResultsSimilarity1","=","Math",".","round","(","similarity","\/","(","float",")","ca1Length","*","100",")",";","}","return","myResultsSimilarity1",";","}"],"func_documentation_string":"Get the coverage of protein 1 with the alignment\n\n@return percentage of coverage, between 0 and 100.","func_documentation_tokens":["Get","the","coverage","of","protein","1","with","the","alignment"],"label":0,"text":"Get the coverage of protein 1 with the alignment\n\n@return percentage of coverage, between 0 and 100.[SEP]public int getCoverage1(){\n\t\tif ( myResultsSimilarity1 < 0 ) {\n\t\t\tint distance = ca1Length + ca2Length - 2 * getNrEQR();\n\n\t\t\tint similarity = (ca1Length + ca2Length - distance ) \/ 2;\n\n\t\t\tmyResultsSimilarity1 = Math.round(similarity \/(float) ca1Length * 100);\n\t\t}\n\t\treturn myResultsSimilarity1;\n\t}"}
{"func_code_string":"public void completeGroup() {\n\t\t\/\/ Copy initial set to allow permutations to grow\n\t\tList<List<Integer>> gens = new ArrayList<List<Integer>>(permutations);\n\t\t\/\/ Keep HashSet version of permutations for fast lookup.\n\t\tSet<List<Integer>> known = new HashSet<List<Integer>>(permutations);\n\t\t\/\/breadth-first search through the map of all members\n\t\tList<List<Integer>> currentLevel = new ArrayList<List<Integer>>(permutations);\n\t\twhile( currentLevel.size() > 0) {\n\t\t\tList<List<Integer>> nextLevel = new ArrayList<List<Integer>>();\n\t\t\tfor( List<Integer> p : currentLevel) {\n\t\t\t\tfor(List<Integer> gen : gens) {\n\t\t\t\t\tList<Integer> y = combine(p,gen);\n\t\t\t\t\tif(!known.contains(y)) {\n\t\t\t\t\t\tnextLevel.add(y);\n\t\t\t\t\t\t\/\/bypass addPermutation(y) for performance\n\t\t\t\t\t\tpermutations.add(y);\n\t\t\t\t\t\tknown.add(y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentLevel = nextLevel;\n\t\t}\n\t}","func_code_tokens":["public","void","completeGroup","(",")","{","\/\/ Copy initial set to allow permutations to grow","List","<","List","<","Integer",">>","gens","=","new","ArrayList","<","List","<","Integer",">",">","(","permutations",")",";","\/\/ Keep HashSet version of permutations for fast lookup.","Set","<","List","<","Integer",">",">","known","=","new","HashSet","<","List","<","Integer",">",">","(","permutations",")",";","\/\/breadth-first search through the map of all members","List","<","List","<","Integer",">",">","currentLevel","=","new","ArrayList","<","List","<","Integer",">",">","(","permutations",")",";","while","(","currentLevel",".","size","(",")",">","0",")","{","List","<","List","<","Integer",">>","nextLevel","=","new","ArrayList","<","List","<","Integer",">",">","(",")",";","for","(","List","<","Integer",">","p",":","currentLevel",")","{","for","(","List","<","Integer",">","gen",":","gens",")","{","List","<","Integer",">","y","=","combine","(","p",",","gen",")",";","if","(","!","known",".","contains","(","y",")",")","{","nextLevel",".","add","(","y",")",";","\/\/bypass addPermutation(y) for performance","permutations",".","add","(","y",")",";","known",".","add","(","y",")",";","}","}","}","currentLevel","=","nextLevel",";","}","}"],"func_documentation_string":"Starts with an incomplete set of group generators in `permutations` and\nexpands it to include all possible combinations.\n\nWays to complete group:\n- combinations of permutations pi x pj\n- combinations with itself p^k","func_documentation_tokens":["Starts","with","an","incomplete","set","of","group","generators","in","permutations","and","expands","it","to","include","all","possible","combinations","."],"label":1,"text":"Starts with an incomplete set of group generators in `permutations` and\nexpands it to include all possible combinations.\n\nWays to complete group:\n- combinations of permutations pi x pj\n- combinations with itself p^k[SEP]public void completeGroup() {\n\t\t\/\/ Copy initial set to allow permutations to grow\n\t\tList<List<Integer>> gens = new ArrayList<List<Integer>>(permutations);\n\t\t\/\/ Keep HashSet version of permutations for fast lookup.\n\t\tSet<List<Integer>> known = new HashSet<List<Integer>>(permutations);\n\t\t\/\/breadth-first search through the map of all members\n\t\tList<List<Integer>> currentLevel = new ArrayList<List<Integer>>(permutations);\n\t\twhile( currentLevel.size() > 0) {\n\t\t\tList<List<Integer>> nextLevel = new ArrayList<List<Integer>>();\n\t\t\tfor( List<Integer> p : currentLevel) {\n\t\t\t\tfor(List<Integer> gen : gens) {\n\t\t\t\t\tList<Integer> y = combine(p,gen);\n\t\t\t\t\tif(!known.contains(y)) {\n\t\t\t\t\t\tnextLevel.add(y);\n\t\t\t\t\t\t\/\/bypass addPermutation(y) for performance\n\t\t\t\t\t\tpermutations.add(y);\n\t\t\t\t\t\tknown.add(y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentLevel = nextLevel;\n\t\t}\n\t}"}
{"func_code_string":"public static HttpRequest head(final CharSequence baseUrl,\n      final Map<?, ?> params, final boolean encode) {\n    String url = append(baseUrl, params);\n    return head(encode ? encode(url) : url);\n  }","func_code_tokens":["public","static","HttpRequest","head","(","final","CharSequence","baseUrl",",","final","Map","<","?",",","?",">","params",",","final","boolean","encode",")","{","String","url","=","append","(","baseUrl",",","params",")",";","return","head","(","encode","?","encode","(","url",")",":","url",")",";","}"],"func_documentation_string":"Start a 'HEAD' request to the given URL along with the query params\n\n@param baseUrl\n@param params\nThe query parameters to include as part of the baseUrl\n@param encode\ntrue to encode the full URL\n\n@see #append(CharSequence, Map)\n@see #encode(CharSequence)\n\n@return request","func_documentation_tokens":["Start","a","HEAD","request","to","the","given","URL","along","with","the","query","params"],"label":1,"text":"Start a 'HEAD' request to the given URL along with the query params\n\n@param baseUrl\n@param params\nThe query parameters to include as part of the baseUrl\n@param encode\ntrue to encode the full URL\n\n@see #append(CharSequence, Map)\n@see #encode(CharSequence)\n\n@return request[SEP]public static HttpRequest head(final CharSequence baseUrl,\n      final Map<?, ?> params, final boolean encode) {\n    String url = append(baseUrl, params);\n    return head(encode ? encode(url) : url);\n  }"}
{"func_code_string":"private static String numToString(int num, int width) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        if (len >= width) {\n            return str.substring(len - width, len);\n        }\n        StringBuilder sb = new StringBuilder(width);\n        for (int i = len; i < width; i++) {\n            sb.append('0');\n        }\n        sb.append(str);\n        return sb.toString();\n    }","func_code_tokens":["private","static","String","numToString","(","int","num",",","int","width",")","{","String","str","=","Integer",".","toString","(","num",")",";","int","len","=","str",".","length","(",")",";","if","(","len",">=","width",")","{","return","str",".","substring","(","len","-","width",",","len",")",";","}","StringBuilder","sb","=","new","StringBuilder","(","width",")",";","for","(","int","i","=","len",";","i","<","width",";","i","++",")","{","sb",".","append","(","'","'",")",";","}","sb",".","append","(","str",")",";","return","sb",".","toString","(",")",";","}"],"func_documentation_string":"\/*\nFormat integer number","func_documentation_tokens":["\/","*","Format","integer","number"],"label":0,"text":"\/*\nFormat integer number[SEP]private static String numToString(int num, int width) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        if (len >= width) {\n            return str.substring(len - width, len);\n        }\n        StringBuilder sb = new StringBuilder(width);\n        for (int i = len; i < width; i++) {\n            sb.append('0');\n        }\n        sb.append(str);\n        return sb.toString();\n    }"}
{"func_code_string":"private Object readNewArray(boolean unshared) throws OptionalDataException,\n            ClassNotFoundException, IOException {\n        ObjectStreamClass classDesc = readClassDesc();\n\n        if (classDesc == null) {\n            throw missingClassDescriptor();\n        }\n\n        int newHandle = nextHandle();\n\n        \/\/ Array size\n        int size = input.readInt();\n        Class<?> arrayClass = classDesc.forClass();\n        Class<?> componentType = arrayClass.getComponentType();\n        Object result = Array.newInstance(componentType, size);\n\n        registerObjectRead(result, newHandle, unshared);\n\n        \/\/ Now we have code duplication just because Java is typed. We have to\n        \/\/ read N elements and assign to array positions, but we must typecast\n        \/\/ the array first, and also call different methods depending on the\n        \/\/ elements.\n        if (componentType.isPrimitive()) {\n            if (componentType == int.class) {\n                int[] intArray = (int[]) result;\n                for (int i = 0; i < size; i++) {\n                    intArray[i] = input.readInt();\n                }\n            } else if (componentType == byte.class) {\n                byte[] byteArray = (byte[]) result;\n                input.readFully(byteArray, 0, size);\n            } else if (componentType == char.class) {\n                char[] charArray = (char[]) result;\n                for (int i = 0; i < size; i++) {\n                    charArray[i] = input.readChar();\n                }\n            } else if (componentType == short.class) {\n                short[] shortArray = (short[]) result;\n                for (int i = 0; i < size; i++) {\n                    shortArray[i] = input.readShort();\n                }\n            } else if (componentType == boolean.class) {\n                boolean[] booleanArray = (boolean[]) result;\n                for (int i = 0; i < size; i++) {\n                    booleanArray[i] = input.readBoolean();\n                }\n            } else if (componentType == long.class) {\n                long[] longArray = (long[]) result;\n                for (int i = 0; i < size; i++) {\n                    longArray[i] = input.readLong();\n                }\n            } else if (componentType == float.class) {\n                float[] floatArray = (float[]) result;\n                for (int i = 0; i < size; i++) {\n                    floatArray[i] = input.readFloat();\n                }\n            } else if (componentType == double.class) {\n                double[] doubleArray = (double[]) result;\n                for (int i = 0; i < size; i++) {\n                    doubleArray[i] = input.readDouble();\n                }\n            } else {\n                throw new ClassNotFoundException(\"Wrong base type in \" + classDesc.getName());\n            }\n        } else {\n            \/\/ Array of Objects\n            Object[] objectArray = (Object[]) result;\n            for (int i = 0; i < size; i++) {\n                \/\/ TODO: This place is the opportunity for enhancement\n                \/\/      We can implement writing elements through fast-path,\n                \/\/      without setting up the context (see readObject()) for\n                \/\/      each element with public API\n                objectArray[i] = readObject();\n            }\n        }\n        if (enableResolve) {\n            result = resolveObject(result);\n            registerObjectRead(result, newHandle, false);\n        }\n        return result;\n    }","func_code_tokens":["private","Object","readNewArray","(","boolean","unshared",")","throws","OptionalDataException",",","ClassNotFoundException",",","IOException","{","ObjectStreamClass","classDesc","=","readClassDesc","(",")",";","if","(","classDesc","==","null",")","{","throw","missingClassDescriptor","(",")",";","}","int","newHandle","=","nextHandle","(",")",";","\/\/ Array size","int","size","=","input",".","readInt","(",")",";","Class","<","?",">","arrayClass","=","classDesc",".","forClass","(",")",";","Class","<","?",">","componentType","=","arrayClass",".","getComponentType","(",")",";","Object","result","=","Array",".","newInstance","(","componentType",",","size",")",";","registerObjectRead","(","result",",","newHandle",",","unshared",")",";","\/\/ Now we have code duplication just because Java is typed. We have to","\/\/ read N elements and assign to array positions, but we must typecast","\/\/ the array first, and also call different methods depending on the","\/\/ elements.","if","(","componentType",".","isPrimitive","(",")",")","{","if","(","componentType","==","int",".","class",")","{","int","[","]","intArray","=","(","int","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","intArray","[","i","]","=","input",".","readInt","(",")",";","}","}","else","if","(","componentType","==","byte",".","class",")","{","byte","[","]","byteArray","=","(","byte","[","]",")","result",";","input",".","readFully","(","byteArray",",","0",",","size",")",";","}","else","if","(","componentType","==","char",".","class",")","{","char","[","]","charArray","=","(","char","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","charArray","[","i","]","=","input",".","readChar","(",")",";","}","}","else","if","(","componentType","==","short",".","class",")","{","short","[","]","shortArray","=","(","short","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","shortArray","[","i","]","=","input",".","readShort","(",")",";","}","}","else","if","(","componentType","==","boolean",".","class",")","{","boolean","[","]","booleanArray","=","(","boolean","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","booleanArray","[","i","]","=","input",".","readBoolean","(",")",";","}","}","else","if","(","componentType","==","long",".","class",")","{","long","[","]","longArray","=","(","long","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","longArray","[","i","]","=","input",".","readLong","(",")",";","}","}","else","if","(","componentType","==","float",".","class",")","{","float","[","]","floatArray","=","(","float","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","floatArray","[","i","]","=","input",".","readFloat","(",")",";","}","}","else","if","(","componentType","==","double",".","class",")","{","double","[","]","doubleArray","=","(","double","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","doubleArray","[","i","]","=","input",".","readDouble","(",")",";","}","}","else","{","throw","new","ClassNotFoundException","(","\"Wrong base type in \"","+","classDesc",".","getName","(",")",")",";","}","}","else","{","\/\/ Array of Objects","Object","[","]","objectArray","=","(","Object","[","]",")","result",";","for","(","int","i","=","0",";","i","<","size",";","i","++",")","{","\/\/ TODO: This place is the opportunity for enhancement","\/\/      We can implement writing elements through fast-path,","\/\/      without setting up the context (see readObject()) for","\/\/      each element with public API","objectArray","[","i","]","=","readObject","(",")",";","}","}","if","(","enableResolve",")","{","result","=","resolveObject","(","result",")",";","registerObjectRead","(","result",",","newHandle",",","false",")",";","}","return","result",";","}"],"func_documentation_string":"Read a new array from the receiver. It is assumed the array has not been\nread yet (not a cyclic reference). Return the array read.\n\n@param unshared\nread the object unshared\n@return the array read\n\n@throws IOException\nIf an IO exception happened when reading the array.\n@throws ClassNotFoundException\nIf a class for one of the objects could not be found\n@throws OptionalDataException\nIf optional data could not be found when reading the array.","func_documentation_tokens":["Read","a","new","array","from","the","receiver",".","It","is","assumed","the","array","has","not","been","read","yet","(","not","a","cyclic","reference",")",".","Return","the","array","read","."],"label":0,"text":"Read a new array from the receiver. It is assumed the array has not been\nread yet (not a cyclic reference). Return the array read.\n\n@param unshared\nread the object unshared\n@return the array read\n\n@throws IOException\nIf an IO exception happened when reading the array.\n@throws ClassNotFoundException\nIf a class for one of the objects could not be found\n@throws OptionalDataException\nIf optional data could not be found when reading the array.[SEP]private Object readNewArray(boolean unshared) throws OptionalDataException,\n            ClassNotFoundException, IOException {\n        ObjectStreamClass classDesc = readClassDesc();\n\n        if (classDesc == null) {\n            throw missingClassDescriptor();\n        }\n\n        int newHandle = nextHandle();\n\n        \/\/ Array size\n        int size = input.readInt();\n        Class<?> arrayClass = classDesc.forClass();\n        Class<?> componentType = arrayClass.getComponentType();\n        Object result = Array.newInstance(componentType, size);\n\n        registerObjectRead(result, newHandle, unshared);\n\n        \/\/ Now we have code duplication just because Java is typed. We have to\n        \/\/ read N elements and assign to array positions, but we must typecast\n        \/\/ the array first, and also call different methods depending on the\n        \/\/ elements.\n        if (componentType.isPrimitive()) {\n            if (componentType == int.class) {\n                int[] intArray = (int[]) result;\n                for (int i = 0; i < size; i++) {\n                    intArray[i] = input.readInt();\n                }\n            } else if (componentType == byte.class) {\n                byte[] byteArray = (byte[]) result;\n                input.readFully(byteArray, 0, size);\n            } else if (componentType == char.class) {\n                char[] charArray = (char[]) result;\n                for (int i = 0; i < size; i++) {\n                    charArray[i] = input.readChar();\n                }\n            } else if (componentType == short.class) {\n                short[] shortArray = (short[]) result;\n                for (int i = 0; i < size; i++) {\n                    shortArray[i] = input.readShort();\n                }\n            } else if (componentType == boolean.class) {\n                boolean[] booleanArray = (boolean[]) result;\n                for (int i = 0; i < size; i++) {\n                    booleanArray[i] = input.readBoolean();\n                }\n            } else if (componentType == long.class) {\n                long[] longArray = (long[]) result;\n                for (int i = 0; i < size; i++) {\n                    longArray[i] = input.readLong();\n                }\n            } else if (componentType == float.class) {\n                float[] floatArray = (float[]) result;\n                for (int i = 0; i < size; i++) {\n                    floatArray[i] = input.readFloat();\n                }\n            } else if (componentType == double.class) {\n                double[] doubleArray = (double[]) result;\n                for (int i = 0; i < size; i++) {\n                    doubleArray[i] = input.readDouble();\n                }\n            } else {\n                throw new ClassNotFoundException(\"Wrong base type in \" + classDesc.getName());\n            }\n        } else {\n            \/\/ Array of Objects\n            Object[] objectArray = (Object[]) result;\n            for (int i = 0; i < size; i++) {\n                \/\/ TODO: This place is the opportunity for enhancement\n                \/\/      We can implement writing elements through fast-path,\n                \/\/      without setting up the context (see readObject()) for\n                \/\/      each element with public API\n                objectArray[i] = readObject();\n            }\n        }\n        if (enableResolve) {\n            result = resolveObject(result);\n            registerObjectRead(result, newHandle, false);\n        }\n        return result;\n    }"}
{"func_code_string":"public static void main(String[] args) throws IOException {\n\n        Arguments arguments = new Arguments().parse(args);\n\n        if (arguments.isUseCommonsLang3()) {\n            System.err.println(\"--commons-lang3 is deprecated. Please remove the argument from your command-line arguments.\");\n        }\n\n        Jsonschema2Pojo.generate(arguments);\n    }","func_code_tokens":["public","static","void","main","(","String","[","]","args",")","throws","IOException","{","Arguments","arguments","=","new","Arguments","(",")",".","parse","(","args",")",";","if","(","arguments",".","isUseCommonsLang3","(",")",")","{","System",".","err",".","println","(","\"--commons-lang3 is deprecated. Please remove the argument from your command-line arguments.\"",")",";","}","Jsonschema2Pojo",".","generate","(","arguments",")",";","}"],"func_documentation_string":"Main method, entry point for the application when invoked via the command\nline. Arguments are expected in POSIX format, invoke with --help for\ndetails.\n\n@param args\nIncoming arguments from the command line\n@throws FileNotFoundException\nif the paths specified on the command line are not found\n@throws IOException\nif the application is unable to read data from the paths\nspecified","func_documentation_tokens":["Main","method","entry","point","for","the","application","when","invoked","via","the","command","line",".","Arguments","are","expected","in","POSIX","format","invoke","with","--","help","for","details","."],"label":1,"text":"Main method, entry point for the application when invoked via the command\nline. Arguments are expected in POSIX format, invoke with --help for\ndetails.\n\n@param args\nIncoming arguments from the command line\n@throws FileNotFoundException\nif the paths specified on the command line are not found\n@throws IOException\nif the application is unable to read data from the paths\nspecified[SEP]public static void main(String[] args) throws IOException {\n\n        Arguments arguments = new Arguments().parse(args);\n\n        if (arguments.isUseCommonsLang3()) {\n            System.err.println(\"--commons-lang3 is deprecated. Please remove the argument from your command-line arguments.\");\n        }\n\n        Jsonschema2Pojo.generate(arguments);\n    }"}
{"func_code_string":"public void setExternalArrayData(ExternalArrayData array)\n    {\n        externalData = array;\n\n        if (array == null) {\n            delete(\"length\");\n        } else {\n            \/\/ Define \"length\" to return whatever length the List gives us.\n            defineProperty(\"length\", null,\n                           GET_ARRAY_LENGTH, null, READONLY | DONTENUM);\n        }\n    }","func_code_tokens":["public","void","setExternalArrayData","(","ExternalArrayData","array",")","{","externalData","=","array",";","if","(","array","==","null",")","{","delete","(","\"length\"",")",";","}","else","{","\/\/ Define \"length\" to return whatever length the List gives us.","defineProperty","(","\"length\"",",","null",",","GET_ARRAY_LENGTH",",","null",",","READONLY","|","DONTENUM",")",";","}","}"],"func_documentation_string":"Attach the specified object to this object, and delegate all indexed property lookups to it. In other words,\nif the object has 3 elements, then an attempt to look up or modify \"[0]\", \"[1]\", or \"[2]\" will be delegated\nto this object. Additional indexed properties outside the range specified, and additional non-indexed\nproperties, may still be added. The object specified must implement the ExternalArrayData interface.\n\n@param array the List to use for delegated property access. Set this to null to revert back to regular\nproperty access.\n@since 1.7.6","func_documentation_tokens":["Attach","the","specified","object","to","this","object","and","delegate","all","indexed","property","lookups","to","it",".","In","other","words","if","the","object","has","3","elements","then","an","attempt","to","look","up","or","modify","[","0","]","[","1","]","or","[","2","]","will","be","delegated","to","this","object",".","Additional","indexed","properties","outside","the","range","specified","and","additional","non","-","indexed","properties","may","still","be","added",".","The","object","specified","must","implement","the","ExternalArrayData","interface","."],"label":0,"text":"Attach the specified object to this object, and delegate all indexed property lookups to it. In other words,\nif the object has 3 elements, then an attempt to look up or modify \"[0]\", \"[1]\", or \"[2]\" will be delegated\nto this object. Additional indexed properties outside the range specified, and additional non-indexed\nproperties, may still be added. The object specified must implement the ExternalArrayData interface.\n\n@param array the List to use for delegated property access. Set this to null to revert back to regular\nproperty access.\n@since 1.7.6[SEP]public void setExternalArrayData(ExternalArrayData array)\n    {\n        externalData = array;\n\n        if (array == null) {\n            delete(\"length\");\n        } else {\n            \/\/ Define \"length\" to return whatever length the List gives us.\n            defineProperty(\"length\", null,\n                           GET_ARRAY_LENGTH, null, READONLY | DONTENUM);\n        }\n    }"}
{"func_code_string":"public static File convertPdf2Tiff(File inputPdfFile) throws IOException {\n        if (PDFBOX.equals(System.getProperty(PDF_LIBRARY))) {\n            return PdfBoxUtilities.convertPdf2Tiff(inputPdfFile);\n        } else {\n            try {\n                return PdfGsUtilities.convertPdf2Tiff(inputPdfFile);\n            } catch (Exception e) {\n                System.setProperty(PDF_LIBRARY, PDFBOX);\n                return convertPdf2Tiff(inputPdfFile);\n            }\n        }\n    }","func_code_tokens":["public","static","File","convertPdf2Tiff","(","File","inputPdfFile",")","throws","IOException","{","if","(","PDFBOX",".","equals","(","System",".","getProperty","(","PDF_LIBRARY",")",")",")","{","return","PdfBoxUtilities",".","convertPdf2Tiff","(","inputPdfFile",")",";","}","else","{","try","{","return","PdfGsUtilities",".","convertPdf2Tiff","(","inputPdfFile",")",";","}","catch","(","Exception","e",")","{","System",".","setProperty","(","PDF_LIBRARY",",","PDFBOX",")",";","return","convertPdf2Tiff","(","inputPdfFile",")",";","}","}","}"],"func_documentation_string":"Converts PDF to TIFF format.\n\n@param inputPdfFile input file\n@return a multi-page TIFF image\n@throws IOException","func_documentation_tokens":["Converts","PDF","to","TIFF","format","."],"label":0,"text":"Converts PDF to TIFF format.\n\n@param inputPdfFile input file\n@return a multi-page TIFF image\n@throws IOException[SEP]public static File convertPdf2Tiff(File inputPdfFile) throws IOException {\n        if (PDFBOX.equals(System.getProperty(PDF_LIBRARY))) {\n            return PdfBoxUtilities.convertPdf2Tiff(inputPdfFile);\n        } else {\n            try {\n                return PdfGsUtilities.convertPdf2Tiff(inputPdfFile);\n            } catch (Exception e) {\n                System.setProperty(PDF_LIBRARY, PDFBOX);\n                return convertPdf2Tiff(inputPdfFile);\n            }\n        }\n    }"}
{"func_code_string":"public void setBinomialDistribution(BinomialDistributionType newBinomialDistribution) {\n\t\t((FeatureMap.Internal)getMixed()).set(BpsimPackage.Literals.DOCUMENT_ROOT__BINOMIAL_DISTRIBUTION, newBinomialDistribution);\n\t}","func_code_tokens":["public","void","setBinomialDistribution","(","BinomialDistributionType","newBinomialDistribution",")","{","(","(","FeatureMap",".","Internal",")","getMixed","(",")",")",".","set","(","BpsimPackage",".","Literals",".","DOCUMENT_ROOT__BINOMIAL_DISTRIBUTION",",","newBinomialDistribution",")",";","}"],"func_documentation_string":"<!-- begin-user-doc -->\n<!-- end-user-doc -->\n@generated","func_documentation_tokens":["<!","--","begin","-","user","-","doc","--",">","<!","--","end","-","user","-","doc","--",">"],"label":1,"text":"<!-- begin-user-doc -->\n<!-- end-user-doc -->\n@generated[SEP]public void setBinomialDistribution(BinomialDistributionType newBinomialDistribution) {\n\t\t((FeatureMap.Internal)getMixed()).set(BpsimPackage.Literals.DOCUMENT_ROOT__BINOMIAL_DISTRIBUTION, newBinomialDistribution);\n\t}"}
{"func_code_string":"public static JsonObject csvToJsonObject(List<String> bulkRecordHeader, List<String> record, int columnCount) {\n    ObjectMapper mapper = new ObjectMapper();\n    Map<String, String> resultInfo = new HashMap<>();\n    for (int i = 0; i < columnCount; i++) {\n      resultInfo.put(bulkRecordHeader.get(i), record.get(i));\n    }\n\n    JsonNode json = mapper.valueToTree(resultInfo);\n    JsonElement element = GSON.fromJson(json.toString(), JsonObject.class);\n    return element.getAsJsonObject();\n  }","func_code_tokens":["public","static","JsonObject","csvToJsonObject","(","List","<","String",">","bulkRecordHeader",",","List","<","String",">","record",",","int","columnCount",")","{","ObjectMapper","mapper","=","new","ObjectMapper","(",")",";","Map","<","String",",","String",">","resultInfo","=","new","HashMap","<>","(",")",";","for","(","int","i","=","0",";","i","<","columnCount",";","i","++",")","{","resultInfo",".","put","(","bulkRecordHeader",".","get","(","i",")",",","record",".","get","(","i",")",")",";","}","JsonNode","json","=","mapper",".","valueToTree","(","resultInfo",")",";","JsonElement","element","=","GSON",".","fromJson","(","json",".","toString","(",")",",","JsonObject",".","class",")",";","return","element",".","getAsJsonObject","(",")",";","}"],"func_documentation_string":"Convert CSV record(List<Strings>) to JsonObject using header(column Names)\n@param header record\n@param data record\n@param column Count\n@return JsonObject","func_documentation_tokens":["Convert","CSV","record","(","List<Strings",">",")","to","JsonObject","using","header","(","column","Names",")"],"label":0,"text":"Convert CSV record(List<Strings>) to JsonObject using header(column Names)\n@param header record\n@param data record\n@param column Count\n@return JsonObject[SEP]public static JsonObject csvToJsonObject(List<String> bulkRecordHeader, List<String> record, int columnCount) {\n    ObjectMapper mapper = new ObjectMapper();\n    Map<String, String> resultInfo = new HashMap<>();\n    for (int i = 0; i < columnCount; i++) {\n      resultInfo.put(bulkRecordHeader.get(i), record.get(i));\n    }\n\n    JsonNode json = mapper.valueToTree(resultInfo);\n    JsonElement element = GSON.fromJson(json.toString(), JsonObject.class);\n    return element.getAsJsonObject();\n  }"}
{"func_code_string":"public static File getExecutableLocation(final String exeName) {\n    \/\/\n    \/\/ must add current working directory to the\n    \/\/ from of the path from the \"path\" environment variable\n    final File currentDir = new File(System.getProperty(\"user.dir\"));\n    if (new File(currentDir, exeName).exists()) {\n      return currentDir;\n    }\n    final File[] envPath = CUtil.getPathFromEnvironment(\"PATH\", File.pathSeparator);\n    for (final File element : envPath) {\n      if (new File(element, exeName).exists()) {\n        return element;\n      }\n    }\n    return null;\n  }","func_code_tokens":["public","static","File","getExecutableLocation","(","final","String","exeName",")","{","\/\/","\/\/ must add current working directory to the","\/\/ from of the path from the \"path\" environment variable","final","File","currentDir","=","new","File","(","System",".","getProperty","(","\"user.dir\"",")",")",";","if","(","new","File","(","currentDir",",","exeName",")",".","exists","(",")",")","{","return","currentDir",";","}","final","File","[","]","envPath","=","CUtil",".","getPathFromEnvironment","(","\"PATH\"",",","File",".","pathSeparator",")",";","for","(","final","File","element",":","envPath",")","{","if","(","new","File","(","element",",","exeName",")",".","exists","(",")",")","{","return","element",";","}","}","return","null",";","}"],"func_documentation_string":"Gets the parent directory for the executable file name using the current\ndirectory and system executable path\n\n@param exeName\nName of executable such as \"cl.exe\"\n@return parent directory or null if not located","func_documentation_tokens":["Gets","the","parent","directory","for","the","executable","file","name","using","the","current","directory","and","system","executable","path"],"label":1,"text":"Gets the parent directory for the executable file name using the current\ndirectory and system executable path\n\n@param exeName\nName of executable such as \"cl.exe\"\n@return parent directory or null if not located[SEP]public static File getExecutableLocation(final String exeName) {\n    \/\/\n    \/\/ must add current working directory to the\n    \/\/ from of the path from the \"path\" environment variable\n    final File currentDir = new File(System.getProperty(\"user.dir\"));\n    if (new File(currentDir, exeName).exists()) {\n      return currentDir;\n    }\n    final File[] envPath = CUtil.getPathFromEnvironment(\"PATH\", File.pathSeparator);\n    for (final File element : envPath) {\n      if (new File(element, exeName).exists()) {\n        return element;\n      }\n    }\n    return null;\n  }"}
{"func_code_string":"public static Date getCurrentDateTime() throws ParseException {\n        Calendar currentDate = Calendar.getInstance();\n        SimpleDateFormat formatter = new SimpleDateFormat(DATE_yyyyMMddTHHmmssSSSZ);\n        String dateNow = formatter.format(currentDate.getTime());\n        return getDateFromString(dateNow);\n    }","func_code_tokens":["public","static","Date","getCurrentDateTime","(",")","throws","ParseException","{","Calendar","currentDate","=","Calendar",".","getInstance","(",")",";","SimpleDateFormat","formatter","=","new","SimpleDateFormat","(","DATE_yyyyMMddTHHmmssSSSZ",")",";","String","dateNow","=","formatter",".","format","(","currentDate",".","getTime","(",")",")",";","return","getDateFromString","(","dateNow",")",";","}"],"func_documentation_string":"Method to get the current date time Calendar instance\n\n@return the Date instance\n@throws ParseException","func_documentation_tokens":["Method","to","get","the","current","date","time","Calendar","instance"],"label":1,"text":"Method to get the current date time Calendar instance\n\n@return the Date instance\n@throws ParseException[SEP]public static Date getCurrentDateTime() throws ParseException {\n        Calendar currentDate = Calendar.getInstance();\n        SimpleDateFormat formatter = new SimpleDateFormat(DATE_yyyyMMddTHHmmssSSSZ);\n        String dateNow = formatter.format(currentDate.getTime());\n        return getDateFromString(dateNow);\n    }"}
{"func_code_string":"public static Date getDateWithPrevDays(int noOfDays) throws ParseException {\n        Calendar currentDate = Calendar.getInstance();\n        currentDate.add(Calendar.DATE, -noOfDays);\n        SimpleDateFormat formatter = new SimpleDateFormat(DATE_yyyyMMddTHHmmssSSSZ);\n        String dateNow = formatter.format(currentDate.getTime());\n        return getDateFromString(dateNow);\n    }","func_code_tokens":["public","static","Date","getDateWithPrevDays","(","int","noOfDays",")","throws","ParseException","{","Calendar","currentDate","=","Calendar",".","getInstance","(",")",";","currentDate",".","add","(","Calendar",".","DATE",",","-","noOfDays",")",";","SimpleDateFormat","formatter","=","new","SimpleDateFormat","(","DATE_yyyyMMddTHHmmssSSSZ",")",";","String","dateNow","=","formatter",".","format","(","currentDate",".","getTime","(",")",")",";","return","getDateFromString","(","dateNow",")",";","}"],"func_documentation_string":"Method to get the Date instance for the given days to be subtracted to the current date\n\n@param noOfDays\n@return the Date instance\n@throws ParseException","func_documentation_tokens":["Method","to","get","the","Date","instance","for","the","given","days","to","be","subtracted","to","the","current","date"],"label":1,"text":"Method to get the Date instance for the given days to be subtracted to the current date\n\n@param noOfDays\n@return the Date instance\n@throws ParseException[SEP]public static Date getDateWithPrevDays(int noOfDays) throws ParseException {\n        Calendar currentDate = Calendar.getInstance();\n        currentDate.add(Calendar.DATE, -noOfDays);\n        SimpleDateFormat formatter = new SimpleDateFormat(DATE_yyyyMMddTHHmmssSSSZ);\n        String dateNow = formatter.format(currentDate.getTime());\n        return getDateFromString(dateNow);\n    }"}
{"func_code_string":"public static Object deserialize(String json, TypeReference<?> typeReference) throws SerializationException {\n\t\ttry {\n\t\t\tlogger.debug(\"Json string to deserialize {} \", json);\n\t\t\treturn mapper.readValue(json, typeReference);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"SerializationException {}\", e.getMessage());\n\t\t\tSerializationException serializationException = new SerializationException(e);\n\t\t\tthrow serializationException;\n\t\t}\n\t}","func_code_tokens":["public","static","Object","deserialize","(","String","json",",","TypeReference","<","?",">","typeReference",")","throws","SerializationException","{","try","{","logger",".","debug","(","\"Json string to deserialize {} \"",",","json",")",";","return","mapper",".","readValue","(","json",",","typeReference",")",";","}","catch","(","IOException","e",")","{","logger",".","error","(","\"SerializationException {}\"",",","e",".","getMessage","(",")",")",";","SerializationException","serializationException","=","new","SerializationException","(","e",")",";","throw","serializationException",";","}","}"],"func_documentation_string":"Deserialize String to object of TypeReference\n\n@param json\n@param typeReference\n@return\n@throws SerializationException","func_documentation_tokens":["Deserialize","String","to","object","of","TypeReference"],"label":1,"text":"Deserialize String to object of TypeReference\n\n@param json\n@param typeReference\n@return\n@throws SerializationException[SEP]public static Object deserialize(String json, TypeReference<?> typeReference) throws SerializationException {\n\t\ttry {\n\t\t\tlogger.debug(\"Json string to deserialize {} \", json);\n\t\t\treturn mapper.readValue(json, typeReference);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"SerializationException {}\", e.getMessage());\n\t\t\tSerializationException serializationException = new SerializationException(e);\n\t\t\tthrow serializationException;\n\t\t}\n\t}"}
{"func_code_string":"private void replaceInFile(String oldText, String newText) {\n        StringBuilder oldContent = new StringBuilder();\n\n        try (FileReader fr = new FileReader(file); BufferedReader reader = new BufferedReader(fr)) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                oldContent.append(line);\n                oldContent.append(\"\\r\\n\");\n            }\n        } catch (IOException e) {\n            log.error(e);\n        }\n\n        \/\/ replace a word in a file\n        String newContent = oldContent.toString().replaceAll(oldText, newText);\n\n        try (FileWriter writer = new FileWriter(file)) {\n            writer.write(newContent);\n        } catch (IOException ioe) {\n            log.error(ioe);\n        }\n    }","func_code_tokens":["private","void","replaceInFile","(","String","oldText",",","String","newText",")","{","StringBuilder","oldContent","=","new","StringBuilder","(",")",";","try","(","FileReader","fr","=","new","FileReader","(","file",")",";","BufferedReader","reader","=","new","BufferedReader","(","fr",")",")","{","String","line",";","while","(","(","line","=","reader",".","readLine","(",")",")","!=","null",")","{","oldContent",".","append","(","line",")",";","oldContent",".","append","(","\"\\r\\n\"",")",";","}","}","catch","(","IOException","e",")","{","log",".","error","(","e",")",";","}","\/\/ replace a word in a file","String","newContent","=","oldContent",".","toString","(",")",".","replaceAll","(","oldText",",","newText",")",";","try","(","FileWriter","writer","=","new","FileWriter","(","file",")",")","{","writer",".","write","(","newContent",")",";","}","catch","(","IOException","ioe",")","{","log",".","error","(","ioe",")",";","}","}"],"func_documentation_string":"Replaces an occurrence of a string within a file\n\n@param oldText - the text to be replaced\n@param newText - the text to be replaced with","func_documentation_tokens":["Replaces","an","occurrence","of","a","string","within","a","file"],"label":1,"text":"Replaces an occurrence of a string within a file\n\n@param oldText - the text to be replaced\n@param newText - the text to be replaced with[SEP]private void replaceInFile(String oldText, String newText) {\n        StringBuilder oldContent = new StringBuilder();\n\n        try (FileReader fr = new FileReader(file); BufferedReader reader = new BufferedReader(fr)) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                oldContent.append(line);\n                oldContent.append(\"\\r\\n\");\n            }\n        } catch (IOException e) {\n            log.error(e);\n        }\n\n        \/\/ replace a word in a file\n        String newContent = oldContent.toString().replaceAll(oldText, newText);\n\n        try (FileWriter writer = new FileWriter(file)) {\n            writer.write(newContent);\n        } catch (IOException ioe) {\n            log.error(ioe);\n        }\n    }"}
{"func_code_string":"private String getHtmlForPDFConversion() throws IOException {\n        StringBuilder oldContent = new StringBuilder();\n\n        FileReader fr = new FileReader(file);\n        try (BufferedReader reader = new BufferedReader(fr)) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                oldContent.append(line);\n                oldContent.append(\"\\r\\n\");\n            }\n        }\n\n        \/\/ replace all non convertible elements with empty text or modify for conversion\n        String str = oldContent.toString()\n                .replaceAll(\"<script type='text\/javascript'>(?s).*<\/script>\", \"\")\n                .replaceAll(\"<tr>\\\\s*<th>View Results<\/th>(?s).*?<\/tr>\", \"\")\n                .replaceAll(\"&nbsp;\", \" \");\n\n        String imagePattern = \"(<img(?s).*? src='(.*?)'(?s).*?)<\/img>\";\n        Pattern r = Pattern.compile(imagePattern);\n        Matcher m = r.matcher(str);\n        int imageCount = 0;\n        while (m.find()) {\n            str = str.replaceFirst(\"<a href='javascript:void\\\\(0\\\\)'(?s).*?(<img(?s).*? src='(.*?)'(?s).*?)\" +\n                            \" style(?s).*?<\/img>\",\n                    \"<a href=\\\"#image-\" + imageCount + \"\\\">View Screenshot<\/a>\");\n            str = str.replaceFirst(\"<\/body>\", \"<p style='page-break-before: always' id='image-\" + imageCount++ + \"'><\/p\" +\n                    \">\" +\n                    m.group().replaceAll(\"width='300px' style(?s).*?'>\", \"height='600px' width='1000px'>\") + \"<\/body>\");\n        }\n        return str;\n    }","func_code_tokens":["private","String","getHtmlForPDFConversion","(",")","throws","IOException","{","StringBuilder","oldContent","=","new","StringBuilder","(",")",";","FileReader","fr","=","new","FileReader","(","file",")",";","try","(","BufferedReader","reader","=","new","BufferedReader","(","fr",")",")","{","String","line",";","while","(","(","line","=","reader",".","readLine","(",")",")","!=","null",")","{","oldContent",".","append","(","line",")",";","oldContent",".","append","(","\"\\r\\n\"",")",";","}","}","\/\/ replace all non convertible elements with empty text or modify for conversion","String","str","=","oldContent",".","toString","(",")",".","replaceAll","(","\"<script type='text\/javascript'>(?s).*<\/script>\"",",","\"\"",")",".","replaceAll","(","\"<tr>\\\\s*<th>View Results<\/th>(?s).*?<\/tr>\"",",","\"\"",")",".","replaceAll","(","\"&nbsp;\"",",","\" \"",")",";","String","imagePattern","=","\"(<img(?s).*? src='(.*?)'(?s).*?)<\/img>\"",";","Pattern","r","=","Pattern",".","compile","(","imagePattern",")",";","Matcher","m","=","r",".","matcher","(","str",")",";","int","imageCount","=","0",";","while","(","m",".","find","(",")",")","{","str","=","str",".","replaceFirst","(","\"<a href='javascript:void\\\\(0\\\\)'(?s).*?(<img(?s).*? src='(.*?)'(?s).*?)\"","+","\" style(?s).*?<\/img>\"",",","\"<a href=\\\"#image-\"","+","imageCount","+","\"\\\">View Screenshot<\/a>\"",")",";","str","=","str",".","replaceFirst","(","\"<\/body>\"",",","\"<p style='page-break-before: always' id='image-\"","+","imageCount","++","+","\"'><\/p\"","+","\">\"","+","m",".","group","(",")",".","replaceAll","(","\"width='300px' style(?s).*?'>\"",",","\"height='600px' width='1000px'>\"",")","+","\"<\/body>\"",")",";","}","return","str",";","}"],"func_documentation_string":"Removes all elements that cannot be converted to pdf, this method is to be used\nbefore converting the html file to pdf with openhtmltopdf.pdfboxout.PdfRendererBuilder","func_documentation_tokens":["Removes","all","elements","that","cannot","be","converted","to","pdf","this","method","is","to","be","used","before","converting","the","html","file","to","pdf","with","openhtmltopdf",".","pdfboxout",".","PdfRendererBuilder"],"label":0,"text":"Removes all elements that cannot be converted to pdf, this method is to be used\nbefore converting the html file to pdf with openhtmltopdf.pdfboxout.PdfRendererBuilder[SEP]private String getHtmlForPDFConversion() throws IOException {\n        StringBuilder oldContent = new StringBuilder();\n\n        FileReader fr = new FileReader(file);\n        try (BufferedReader reader = new BufferedReader(fr)) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                oldContent.append(line);\n                oldContent.append(\"\\r\\n\");\n            }\n        }\n\n        \/\/ replace all non convertible elements with empty text or modify for conversion\n        String str = oldContent.toString()\n                .replaceAll(\"<script type='text\/javascript'>(?s).*<\/script>\", \"\")\n                .replaceAll(\"<tr>\\\\s*<th>View Results<\/th>(?s).*?<\/tr>\", \"\")\n                .replaceAll(\"&nbsp;\", \" \");\n\n        String imagePattern = \"(<img(?s).*? src='(.*?)'(?s).*?)<\/img>\";\n        Pattern r = Pattern.compile(imagePattern);\n        Matcher m = r.matcher(str);\n        int imageCount = 0;\n        while (m.find()) {\n            str = str.replaceFirst(\"<a href='javascript:void\\\\(0\\\\)'(?s).*?(<img(?s).*? src='(.*?)'(?s).*?)\" +\n                            \" style(?s).*?<\/img>\",\n                    \"<a href=\\\"#image-\" + imageCount + \"\\\">View Screenshot<\/a>\");\n            str = str.replaceFirst(\"<\/body>\", \"<p style='page-break-before: always' id='image-\" + imageCount++ + \"'><\/p\" +\n                    \">\" +\n                    m.group().replaceAll(\"width='300px' style(?s).*?'>\", \"height='600px' width='1000px'>\") + \"<\/body>\");\n        }\n        return str;\n    }"}
{"func_code_string":"private void generatePdf() {\n        File pdfFile = new File(directory, filename + \".pdf\");\n        try (OutputStream os = new FileOutputStream(pdfFile)) {\n            PdfRendererBuilder builder = new PdfRendererBuilder();\n            builder.withHtmlContent(getHtmlForPDFConversion(), \"file:\/\/\" + pdfFile.getAbsolutePath()\n                    .replaceAll(\" \", \"%20\"));\n            builder.toStream(os);\n            builder.run();\n        } catch (Exception e) {\n            log.error(e);\n        }\n    }","func_code_tokens":["private","void","generatePdf","(",")","{","File","pdfFile","=","new","File","(","directory",",","filename","+","\".pdf\"",")",";","try","(","OutputStream","os","=","new","FileOutputStream","(","pdfFile",")",")","{","PdfRendererBuilder","builder","=","new","PdfRendererBuilder","(",")",";","builder",".","withHtmlContent","(","getHtmlForPDFConversion","(",")",",","\"file:\/\/\"","+","pdfFile",".","getAbsolutePath","(",")",".","replaceAll","(","\" \"",",","\"%20\"",")",")",";","builder",".","toStream","(","os",")",";","builder",".","run","(",")",";","}","catch","(","Exception","e",")","{","log",".","error","(","e",")",";","}","}"],"func_documentation_string":"Generates a pdf report in the same directory as the html report","func_documentation_tokens":["Generates","a","pdf","report","in","the","same","directory","as","the","html","report"],"label":1,"text":"Generates a pdf report in the same directory as the html report[SEP]private void generatePdf() {\n        File pdfFile = new File(directory, filename + \".pdf\");\n        try (OutputStream os = new FileOutputStream(pdfFile)) {\n            PdfRendererBuilder builder = new PdfRendererBuilder();\n            builder.withHtmlContent(getHtmlForPDFConversion(), \"file:\/\/\" + pdfFile.getAbsolutePath()\n                    .replaceAll(\" \", \"%20\"));\n            builder.toStream(os);\n            builder.run();\n        } catch (Exception e) {\n            log.error(e);\n        }\n    }"}
{"func_code_string":"public Integer convertToInt(String value) {\n        Integer result = null;\n        if (value != null) {\n            result = Integer.valueOf(value);\n        }\n        return result;\n    }","func_code_tokens":["public","Integer","convertToInt","(","String","value",")","{","Integer","result","=","null",";","if","(","value","!=","null",")","{","result","=","Integer",".","valueOf","(","value",")",";","}","return","result",";","}"],"func_documentation_string":"Determines integer value of String (so relative checks can be done).\n@param value string to convert to integer.\n@return integer value.","func_documentation_tokens":["Determines","integer","value","of","String","(","so","relative","checks","can","be","done",")","."],"label":0,"text":"Determines integer value of String (so relative checks can be done).\n@param value string to convert to integer.\n@return integer value.[SEP]public Integer convertToInt(String value) {\n        Integer result = null;\n        if (value != null) {\n            result = Integer.valueOf(value);\n        }\n        return result;\n    }"}
{"func_code_string":"public String generateBsn() {\n        String Result1 = \"\";\n        int Nr9 = randomUtil.random(3);\n        int Nr8 = randomUtil.random(10);\n        int Nr7 = randomUtil.random(10);\n        int Nr6 = randomUtil.random(10);\n        int Nr5 = randomUtil.random(10);\n        int Nr4 = randomUtil.random(10);\n        int Nr3 = randomUtil.random(10);\n        int Nr2 = randomUtil.random(10);\n        int Nr1 = 0;\n        int SofiNr = 0;\n        if ((Nr9 == 0) && (Nr8 == 0) && (Nr7 == 0)) {\n            Nr8 = 1;\n        }\n        SofiNr = 9 * Nr9 + 8 * Nr8 + 7 * Nr7 + 6 * Nr6 + 5 * Nr5 + 4 * Nr4 + 3 * Nr3 + 2 * Nr2;\n        Nr1 = floor(SofiNr - (floor(SofiNr \/ 11)) * 11);\n        if (Nr1 > 9) {\n            if (Nr2 > 0) {\n                Nr2 -= 1;\n                Nr1 = 8;\n            } else {\n                Nr2 += 1;\n                Nr1 = 1;\n            }\n        }\n        Result1 += Nr9;\n        Result1 += Nr8;\n        Result1 += Nr7;\n        Result1 += Nr6;\n        Result1 += Nr5;\n        Result1 += Nr4;\n        Result1 += Nr3;\n        Result1 += Nr2;\n        Result1 += Nr1;\n        return Result1;\n    }","func_code_tokens":["public","String","generateBsn","(",")","{","String","Result1","=","\"\"",";","int","Nr9","=","randomUtil",".","random","(","3",")",";","int","Nr8","=","randomUtil",".","random","(","10",")",";","int","Nr7","=","randomUtil",".","random","(","10",")",";","int","Nr6","=","randomUtil",".","random","(","10",")",";","int","Nr5","=","randomUtil",".","random","(","10",")",";","int","Nr4","=","randomUtil",".","random","(","10",")",";","int","Nr3","=","randomUtil",".","random","(","10",")",";","int","Nr2","=","randomUtil",".","random","(","10",")",";","int","Nr1","=","0",";","int","SofiNr","=","0",";","if","(","(","Nr9","==","0",")","&&","(","Nr8","==","0",")","&&","(","Nr7","==","0",")",")","{","Nr8","=","1",";","}","SofiNr","=","9","*","Nr9","+","8","*","Nr8","+","7","*","Nr7","+","6","*","Nr6","+","5","*","Nr5","+","4","*","Nr4","+","3","*","Nr3","+","2","*","Nr2",";","Nr1","=","floor","(","SofiNr","-","(","floor","(","SofiNr","\/","11",")",")","*","11",")",";","if","(","Nr1",">","9",")","{","if","(","Nr2",">","0",")","{","Nr2","-=","1",";","Nr1","=","8",";","}","else","{","Nr2","+=","1",";","Nr1","=","1",";","}","}","Result1","+=","Nr9",";","Result1","+=","Nr8",";","Result1","+=","Nr7",";","Result1","+=","Nr6",";","Result1","+=","Nr5",";","Result1","+=","Nr4",";","Result1","+=","Nr3",";","Result1","+=","Nr2",";","Result1","+=","Nr1",";","return","Result1",";","}"],"func_documentation_string":"Generates random number that could be a BSN.\nBased on: http:\/\/www.testnummers.nl\/bsn.js\n@return random BSN.","func_documentation_tokens":["Generates","random","number","that","could","be","a","BSN",".","Based","on",":","http",":","\/\/","www",".","testnummers",".","nl","\/","bsn",".","js"],"label":1,"text":"Generates random number that could be a BSN.\nBased on: http:\/\/www.testnummers.nl\/bsn.js\n@return random BSN.[SEP]public String generateBsn() {\n        String Result1 = \"\";\n        int Nr9 = randomUtil.random(3);\n        int Nr8 = randomUtil.random(10);\n        int Nr7 = randomUtil.random(10);\n        int Nr6 = randomUtil.random(10);\n        int Nr5 = randomUtil.random(10);\n        int Nr4 = randomUtil.random(10);\n        int Nr3 = randomUtil.random(10);\n        int Nr2 = randomUtil.random(10);\n        int Nr1 = 0;\n        int SofiNr = 0;\n        if ((Nr9 == 0) && (Nr8 == 0) && (Nr7 == 0)) {\n            Nr8 = 1;\n        }\n        SofiNr = 9 * Nr9 + 8 * Nr8 + 7 * Nr7 + 6 * Nr6 + 5 * Nr5 + 4 * Nr4 + 3 * Nr3 + 2 * Nr2;\n        Nr1 = floor(SofiNr - (floor(SofiNr \/ 11)) * 11);\n        if (Nr1 > 9) {\n            if (Nr2 > 0) {\n                Nr2 -= 1;\n                Nr1 = 8;\n            } else {\n                Nr2 += 1;\n                Nr1 = 1;\n            }\n        }\n        Result1 += Nr9;\n        Result1 += Nr8;\n        Result1 += Nr7;\n        Result1 += Nr6;\n        Result1 += Nr5;\n        Result1 += Nr4;\n        Result1 += Nr3;\n        Result1 += Nr2;\n        Result1 += Nr1;\n        return Result1;\n    }"}
{"func_code_string":"public void writeExcelFile() throws IOException, WriteException {\r\n        WritableWorkbook excelWrkBook = null;\r\n        int curDsPointer = 0;\r\n\r\n        try {\r\n            final String[] columnNames = ds.getColumns();\r\n            final List<String> exportOnlyColumnsList = getExportOnlyColumns() != null ? Arrays.asList(exportOnlyColumns) : null;\r\n            final List<String> excludeFromExportColumnsList = getExcludeFromExportColumns() != null ? Arrays.asList(excludeFromExportColumns) : null;\r\n            final List<String> numericColumnList = getNumericColumns() != null ? Arrays.asList(getNumericColumns()) : new ArrayList<>();\r\n            \/\/ get the current position of the DataSet. We have to go to the top\r\n            \/\/ to do this write,\r\n            \/\/ and we will put the pionter back where it was after we are done\r\n            curDsPointer = ds.getIndex();\r\n            ds.goTop();\r\n\r\n            excelWrkBook = Workbook.createWorkbook(xlsFile);\r\n            final WritableSheet wrkSheet = excelWrkBook.createSheet(\"results\", 0);\r\n\r\n            final WritableFont times10ptBold = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD);\r\n            final WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10, WritableFont.NO_BOLD);\r\n            \/\/ write the column headings in the spreadsheet\r\n            WritableCellFormat cellFormat = new WritableCellFormat(times10ptBold);\r\n            int colOffset = 0;\r\n            for (int i = 0; i < columnNames.length; i++) {\r\n                if (exportOnlyColumnsList != null && !exportOnlyColumnsList.contains(columnNames[i])\r\n                        || excludeFromExportColumnsList != null && excludeFromExportColumnsList.contains(columnNames[i])) {\r\n                    colOffset++;\r\n                    continue;\r\n                }\r\n\r\n                final Label xlsTextLbl = new Label(i - colOffset, 0, columnNames[i], cellFormat);\r\n                wrkSheet.addCell(xlsTextLbl);\r\n            }\r\n\r\n            cellFormat = new WritableCellFormat(times10pt);\r\n            int row = 1;\r\n            while (ds.next()) {\r\n                if (!ds.isRecordID(FPConstants.DETAIL_ID)) {\r\n                    continue;\r\n                }\r\n\r\n                colOffset = 0;\r\n                for (int i = 0; i < columnNames.length; i++) {\r\n                    if (exportOnlyColumnsList != null && !exportOnlyColumnsList.contains(columnNames[i])\r\n                            || excludeFromExportColumnsList != null && excludeFromExportColumnsList.contains(columnNames[i])) {\r\n                        colOffset++;\r\n                        continue;\r\n                    }\r\n\r\n                    WritableCell wc = null;\r\n                    if (numericColumnList.contains(columnNames[i])) {\r\n                        wc = new Number(i - colOffset, row, ds.getDouble(columnNames[i]), cellFormat);\r\n                    } else {\r\n                        wc = new Label(i - colOffset, row, ds.getString(columnNames[i]), cellFormat);\r\n                    }\r\n\r\n                    wrkSheet.addCell(wc);\r\n                }\r\n\r\n                row++;\r\n            }\r\n\r\n            excelWrkBook.write();\r\n\r\n        } finally {\r\n            if (curDsPointer > -1) {\r\n                ds.absolute(curDsPointer);\r\n            }\r\n            if (excelWrkBook != null) {\r\n                excelWrkBook.close();\r\n            }\r\n        }\r\n\r\n    }","func_code_tokens":["public","void","writeExcelFile","(",")","throws","IOException",",","WriteException","{","WritableWorkbook","excelWrkBook","=","null",";","int","curDsPointer","=","0",";","try","{","final","String","[","]","columnNames","=","ds",".","getColumns","(",")",";","final","List","<","String",">","exportOnlyColumnsList","=","getExportOnlyColumns","(",")","!=","null","?","Arrays",".","asList","(","exportOnlyColumns",")",":","null",";","final","List","<","String",">","excludeFromExportColumnsList","=","getExcludeFromExportColumns","(",")","!=","null","?","Arrays",".","asList","(","excludeFromExportColumns",")",":","null",";","final","List","<","String",">","numericColumnList","=","getNumericColumns","(",")","!=","null","?","Arrays",".","asList","(","getNumericColumns","(",")",")",":","new","ArrayList","<>","(",")",";","\/\/ get the current position of the DataSet. We have to go to the top\r","\/\/ to do this write,\r","\/\/ and we will put the pionter back where it was after we are done\r","curDsPointer","=","ds",".","getIndex","(",")",";","ds",".","goTop","(",")",";","excelWrkBook","=","Workbook",".","createWorkbook","(","xlsFile",")",";","final","WritableSheet","wrkSheet","=","excelWrkBook",".","createSheet","(","\"results\"",",","0",")",";","final","WritableFont","times10ptBold","=","new","WritableFont","(","WritableFont",".","TIMES",",","10",",","WritableFont",".","BOLD",")",";","final","WritableFont","times10pt","=","new","WritableFont","(","WritableFont",".","TIMES",",","10",",","WritableFont",".","NO_BOLD",")",";","\/\/ write the column headings in the spreadsheet\r","WritableCellFormat","cellFormat","=","new","WritableCellFormat","(","times10ptBold",")",";","int","colOffset","=","0",";","for","(","int","i","=","0",";","i","<","columnNames",".","length",";","i","++",")","{","if","(","exportOnlyColumnsList","!=","null","&&","!","exportOnlyColumnsList",".","contains","(","columnNames","[","i","]",")","||","excludeFromExportColumnsList","!=","null","&&","excludeFromExportColumnsList",".","contains","(","columnNames","[","i","]",")",")","{","colOffset","++",";","continue",";","}","final","Label","xlsTextLbl","=","new","Label","(","i","-","colOffset",",","0",",","columnNames","[","i","]",",","cellFormat",")",";","wrkSheet",".","addCell","(","xlsTextLbl",")",";","}","cellFormat","=","new","WritableCellFormat","(","times10pt",")",";","int","row","=","1",";","while","(","ds",".","next","(",")",")","{","if","(","!","ds",".","isRecordID","(","FPConstants",".","DETAIL_ID",")",")","{","continue",";","}","colOffset","=","0",";","for","(","int","i","=","0",";","i","<","columnNames",".","length",";","i","++",")","{","if","(","exportOnlyColumnsList","!=","null","&&","!","exportOnlyColumnsList",".","contains","(","columnNames","[","i","]",")","||","excludeFromExportColumnsList","!=","null","&&","excludeFromExportColumnsList",".","contains","(","columnNames","[","i","]",")",")","{","colOffset","++",";","continue",";","}","WritableCell","wc","=","null",";","if","(","numericColumnList",".","contains","(","columnNames","[","i","]",")",")","{","wc","=","new","Number","(","i","-","colOffset",",","row",",","ds",".","getDouble","(","columnNames","[","i","]",")",",","cellFormat",")",";","}","else","{","wc","=","new","Label","(","i","-","colOffset",",","row",",","ds",".","getString","(","columnNames","[","i","]",")",",","cellFormat",")",";","}","wrkSheet",".","addCell","(","wc",")",";","}","row","++",";","}","excelWrkBook",".","write","(",")",";","}","finally","{","if","(","curDsPointer",">","-","1",")","{","ds",".","absolute","(","curDsPointer",")",";","}","if","(","excelWrkBook","!=","null",")","{","excelWrkBook",".","close","(",")",";","}","}","}"],"func_documentation_string":"Writes the Excel file to disk\n\n@throws IOException\n@throws WriteException","func_documentation_tokens":["Writes","the","Excel","file","to","disk"],"label":1,"text":"Writes the Excel file to disk\n\n@throws IOException\n@throws WriteException[SEP]public void writeExcelFile() throws IOException, WriteException {\r\n        WritableWorkbook excelWrkBook = null;\r\n        int curDsPointer = 0;\r\n\r\n        try {\r\n            final String[] columnNames = ds.getColumns();\r\n            final List<String> exportOnlyColumnsList = getExportOnlyColumns() != null ? Arrays.asList(exportOnlyColumns) : null;\r\n            final List<String> excludeFromExportColumnsList = getExcludeFromExportColumns() != null ? Arrays.asList(excludeFromExportColumns) : null;\r\n            final List<String> numericColumnList = getNumericColumns() != null ? Arrays.asList(getNumericColumns()) : new ArrayList<>();\r\n            \/\/ get the current position of the DataSet. We have to go to the top\r\n            \/\/ to do this write,\r\n            \/\/ and we will put the pionter back where it was after we are done\r\n            curDsPointer = ds.getIndex();\r\n            ds.goTop();\r\n\r\n            excelWrkBook = Workbook.createWorkbook(xlsFile);\r\n            final WritableSheet wrkSheet = excelWrkBook.createSheet(\"results\", 0);\r\n\r\n            final WritableFont times10ptBold = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD);\r\n            final WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10, WritableFont.NO_BOLD);\r\n            \/\/ write the column headings in the spreadsheet\r\n            WritableCellFormat cellFormat = new WritableCellFormat(times10ptBold);\r\n            int colOffset = 0;\r\n            for (int i = 0; i < columnNames.length; i++) {\r\n                if (exportOnlyColumnsList != null && !exportOnlyColumnsList.contains(columnNames[i])\r\n                        || excludeFromExportColumnsList != null && excludeFromExportColumnsList.contains(columnNames[i])) {\r\n                    colOffset++;\r\n                    continue;\r\n                }\r\n\r\n                final Label xlsTextLbl = new Label(i - colOffset, 0, columnNames[i], cellFormat);\r\n                wrkSheet.addCell(xlsTextLbl);\r\n            }\r\n\r\n            cellFormat = new WritableCellFormat(times10pt);\r\n            int row = 1;\r\n            while (ds.next()) {\r\n                if (!ds.isRecordID(FPConstants.DETAIL_ID)) {\r\n                    continue;\r\n                }\r\n\r\n                colOffset = 0;\r\n                for (int i = 0; i < columnNames.length; i++) {\r\n                    if (exportOnlyColumnsList != null && !exportOnlyColumnsList.contains(columnNames[i])\r\n                            || excludeFromExportColumnsList != null && excludeFromExportColumnsList.contains(columnNames[i])) {\r\n                        colOffset++;\r\n                        continue;\r\n                    }\r\n\r\n                    WritableCell wc = null;\r\n                    if (numericColumnList.contains(columnNames[i])) {\r\n                        wc = new Number(i - colOffset, row, ds.getDouble(columnNames[i]), cellFormat);\r\n                    } else {\r\n                        wc = new Label(i - colOffset, row, ds.getString(columnNames[i]), cellFormat);\r\n                    }\r\n\r\n                    wrkSheet.addCell(wc);\r\n                }\r\n\r\n                row++;\r\n            }\r\n\r\n            excelWrkBook.write();\r\n\r\n        } finally {\r\n            if (curDsPointer > -1) {\r\n                ds.absolute(curDsPointer);\r\n            }\r\n            if (excelWrkBook != null) {\r\n                excelWrkBook.close();\r\n            }\r\n        }\r\n\r\n    }"}
{"func_code_string":"public static Map<String, List<String>> extractHTMLheaders(String html) {\n        Map<String, List<String>> hxtagsMap = new HashMap<>();\n        for(int i=1;i<=6;++i) {\n            hxtagsMap.put(\"H\"+i, new ArrayList<>());\n        }\n                \n        Matcher m = HX_PATTERN.matcher(html);\n        while (m.find()) {\n            if(m.groupCount()==2) {\n                String tagType = m.group(1).toUpperCase(Locale.ENGLISH);\n                String content = m.group(2);\n                hxtagsMap.get(tagType).add(clear(content));\n            }\n        }\n        return hxtagsMap;\n    }","func_code_tokens":["public","static","Map","<","String",",","List","<","String",">",">","extractHTMLheaders","(","String","html",")","{","Map","<","String",",","List","<","String",">",">","hxtagsMap","=","new","HashMap","<>","(",")",";","for","(","int","i","=","1",";","i","<=","6",";","++","i",")","{","hxtagsMap",".","put","(","\"H\"","+","i",",","new","ArrayList","<>","(",")",")",";","}","Matcher","m","=","HX_PATTERN",".","matcher","(","html",")",";","while","(","m",".","find","(",")",")","{","if","(","m",".","groupCount","(",")","==","2",")","{","String","tagType","=","m",".","group","(","1",")",".","toUpperCase","(","Locale",".","ENGLISH",")",";","String","content","=","m",".","group","(","2",")",";","hxtagsMap",".","get","(","tagType",")",".","add","(","clear","(","content",")",")",";","}","}","return","hxtagsMap",";","}"],"func_documentation_string":"Extracts the HTML headers (h1-h6 tags) from an HTML page.\n\n@param html\n@return","func_documentation_tokens":["Extracts","the","HTML","headers","(","h1","-","h6","tags",")","from","an","HTML","page","."],"label":1,"text":"Extracts the HTML headers (h1-h6 tags) from an HTML page.\n\n@param html\n@return[SEP]public static Map<String, List<String>> extractHTMLheaders(String html) {\n        Map<String, List<String>> hxtagsMap = new HashMap<>();\n        for(int i=1;i<=6;++i) {\n            hxtagsMap.put(\"H\"+i, new ArrayList<>());\n        }\n                \n        Matcher m = HX_PATTERN.matcher(html);\n        while (m.find()) {\n            if(m.groupCount()==2) {\n                String tagType = m.group(1).toUpperCase(Locale.ENGLISH);\n                String content = m.group(2);\n                hxtagsMap.get(tagType).add(clear(content));\n            }\n        }\n        return hxtagsMap;\n    }"}
{"func_code_string":"public static double binomial(int k, double p, int n) {\n        if(k<0 ||  p<0 || n<1) {\n            throw new IllegalArgumentException(\"All the parameters must be positive and n larger than 1.\");\n        }\n        \n        k = Math.min(k, n); \n        \n        \/*\n        \/\/Slow and can't handle large numbers\n        $probability=StatsUtilities::combination($n,$k)*pow($p,$k)*pow(1-$p,$n-$k);\n        *\/\n\n        \/\/fast and can handle large numbers\n        \/\/Cdf(k)-Cdf(k-1)\n        double probability = approxBinomialCdf(k,p,n); \n        if(k>0) {\n            probability -= approxBinomialCdf(k-1,p,n);\n        }\n        \n        return probability;\n    }","func_code_tokens":["public","static","double","binomial","(","int","k",",","double","p",",","int","n",")","{","if","(","k","<","0","||","p","<","0","||","n","<","1",")","{","throw","new","IllegalArgumentException","(","\"All the parameters must be positive and n larger than 1.\"",")",";","}","k","=","Math",".","min","(","k",",","n",")",";","\/*\n        \/\/Slow and can't handle large numbers\n        $probability=StatsUtilities::combination($n,$k)*pow($p,$k)*pow(1-$p,$n-$k);\n        *\/","\/\/fast and can handle large numbers","\/\/Cdf(k)-Cdf(k-1)","double","probability","=","approxBinomialCdf","(","k",",","p",",","n",")",";","if","(","k",">","0",")","{","probability","-=","approxBinomialCdf","(","k","-","1",",","p",",","n",")",";","}","return","probability",";","}"],"func_documentation_string":"Returns the probability of k of a specific number of tries n and probability p\n\n@param k\n@param p\n@param n\n@return","func_documentation_tokens":["Returns","the","probability","of","k","of","a","specific","number","of","tries","n","and","probability","p"],"label":1,"text":"Returns the probability of k of a specific number of tries n and probability p\n\n@param k\n@param p\n@param n\n@return[SEP]public static double binomial(int k, double p, int n) {\n        if(k<0 ||  p<0 || n<1) {\n            throw new IllegalArgumentException(\"All the parameters must be positive and n larger than 1.\");\n        }\n        \n        k = Math.min(k, n); \n        \n        \/*\n        \/\/Slow and can't handle large numbers\n        $probability=StatsUtilities::combination($n,$k)*pow($p,$k)*pow(1-$p,$n-$k);\n        *\/\n\n        \/\/fast and can handle large numbers\n        \/\/Cdf(k)-Cdf(k-1)\n        double probability = approxBinomialCdf(k,p,n); \n        if(k>0) {\n            probability -= approxBinomialCdf(k-1,p,n);\n        }\n        \n        return probability;\n    }"}
{"func_code_string":"public static <T> Collection<List<T>> permutations(Collection<T> elements) {\n        Collection<List<T>> result = new ArrayList<>();\n        if (elements.isEmpty()) {\n            result.add(new LinkedList<>());\n            return result;\n        }\n\n        List<T> rest = new LinkedList<>(elements);\n        T head = rest.remove(0);\n        for (List<T> permutations : permutations(rest)) {\n            List<List<T>> subLists = new ArrayList<>();\n            for (int i = 0; i <= permutations.size(); i++) {\n                List<T> subList = new ArrayList<>();\n                subList.addAll(permutations);\n                subList.add(i, head);\n                subLists.add(subList);\n            }\n            result.addAll(subLists);\n        }\n        return result;\n    }","func_code_tokens":["public","static","<","T",">","Collection","<","List","<","T",">",">","permutations","(","Collection","<","T",">","elements",")","{","Collection","<","List","<","T",">>","result","=","new","ArrayList","<>","(",")",";","if","(","elements",".","isEmpty","(",")",")","{","result",".","add","(","new","LinkedList","<>","(",")",")",";","return","result",";","}","List","<","T",">","rest","=","new","LinkedList","<>","(","elements",")",";","T","head","=","rest",".","remove","(","0",")",";","for","(","List","<","T",">","permutations",":","permutations","(","rest",")",")","{","List","<","List","<","T",">>","subLists","=","new","ArrayList","<>","(",")",";","for","(","int","i","=","0",";","i","<=","permutations",".","size","(",")",";","i","++",")","{","List","<","T",">","subList","=","new","ArrayList","<>","(",")",";","subList",".","addAll","(","permutations",")",";","subList",".","add","(","i",",","head",")",";","subLists",".","add","(","subList",")",";","}","result",".","addAll","(","subLists",")",";","}","return","result",";","}"],"func_documentation_string":"Returns the permutations of a collection.\nPorted from:\nhttp:\/\/stackoverflow.com\/questions\/10503392\/java-code-for-permutations-of-a-list-of-numbers\n\n@param <T>\n@param elements\n@return","func_documentation_tokens":["Returns","the","permutations","of","a","collection",".","Ported","from",":","http",":","\/\/","stackoverflow",".","com","\/","questions","\/","10503392","\/","java","-","code","-","for","-","permutations","-","of","-","a","-","list","-","of","-","numbers"],"label":1,"text":"Returns the permutations of a collection.\nPorted from:\nhttp:\/\/stackoverflow.com\/questions\/10503392\/java-code-for-permutations-of-a-list-of-numbers\n\n@param <T>\n@param elements\n@return[SEP]public static <T> Collection<List<T>> permutations(Collection<T> elements) {\n        Collection<List<T>> result = new ArrayList<>();\n        if (elements.isEmpty()) {\n            result.add(new LinkedList<>());\n            return result;\n        }\n\n        List<T> rest = new LinkedList<>(elements);\n        T head = rest.remove(0);\n        for (List<T> permutations : permutations(rest)) {\n            List<List<T>> subLists = new ArrayList<>();\n            for (int i = 0; i <= permutations.size(); i++) {\n                List<T> subList = new ArrayList<>();\n                subList.addAll(permutations);\n                subList.add(i, head);\n                subLists.add(subList);\n            }\n            result.addAll(subLists);\n        }\n        return result;\n    }"}
{"func_code_string":"private static double scoreToPvalue(double score, int n, double p) {\n        \/*\n        if(n<=20) {\n            \/\/calculate it from binomial distribution\n        }\n        *\/\n\n        double z=(score+0.5-n*p)\/Math.sqrt(n*p*(1.0-p));\n\n        return ContinuousDistributions.gaussCdf(z);\n    }","func_code_tokens":["private","static","double","scoreToPvalue","(","double","score",",","int","n",",","double","p",")","{","\/*\n        if(n<=20) {\n            \/\/calculate it from binomial distribution\n        }\n        *\/","double","z","=","(","score","+","0.5","-","n","*","p",")","\/","Math",".","sqrt","(","n","*","p","*","(","1.0","-","p",")",")",";","return","ContinuousDistributions",".","gaussCdf","(","z",")",";","}"],"func_documentation_string":"Returns the Pvalue for a particular score\n\n@param score\n@param n\n@param p\n@return","func_documentation_tokens":["Returns","the","Pvalue","for","a","particular","score"],"label":0,"text":"Returns the Pvalue for a particular score\n\n@param score\n@param n\n@param p\n@return[SEP]private static double scoreToPvalue(double score, int n, double p) {\n        \/*\n        if(n<=20) {\n            \/\/calculate it from binomial distribution\n        }\n        *\/\n\n        double z=(score+0.5-n*p)\/Math.sqrt(n*p*(1.0-p));\n\n        return ContinuousDistributions.gaussCdf(z);\n    }"}
{"func_code_string":"private static int wordsWithThreeSyllables(String strText) {\n        int intLongWordCount = 0;\n        \n        List<String> arrWords = (new WhitespaceTokenizer()).tokenize(strText);\n        int intWordCount = arrWords.size();\n        for (int i = 0; i < intWordCount; ++i) {\n            if(syllableCount(arrWords.get(i)) > 2) {\n                ++intLongWordCount; \/\/it also counts the proper nouns which should be excluded for Fog index, but this is not a major issue\n            }\n        }\n        \n        return intLongWordCount;\n    }","func_code_tokens":["private","static","int","wordsWithThreeSyllables","(","String","strText",")","{","int","intLongWordCount","=","0",";","List","<","String",">","arrWords","=","(","new","WhitespaceTokenizer","(",")",")",".","tokenize","(","strText",")",";","int","intWordCount","=","arrWords",".","size","(",")",";","for","(","int","i","=","0",";","i","<","intWordCount",";","++","i",")","{","if","(","syllableCount","(","arrWords",".","get","(","i",")",")",">","2",")","{","++","intLongWordCount",";","\/\/it also counts the proper nouns which should be excluded for Fog index, but this is not a major issue","}","}","return","intLongWordCount",";","}"],"func_documentation_string":"Returns the number of words with more than three syllables.\n\n@param   strText                  Text to be measured\n@return","func_documentation_tokens":["Returns","the","number","of","words","with","more","than","three","syllables","."],"label":0,"text":"Returns the number of words with more than three syllables.\n\n@param   strText                  Text to be measured\n@return[SEP]private static int wordsWithThreeSyllables(String strText) {\n        int intLongWordCount = 0;\n        \n        List<String> arrWords = (new WhitespaceTokenizer()).tokenize(strText);\n        int intWordCount = arrWords.size();\n        for (int i = 0; i < intWordCount; ++i) {\n            if(syllableCount(arrWords.get(i)) > 2) {\n                ++intLongWordCount; \/\/it also counts the proper nouns which should be excluded for Fog index, but this is not a major issue\n            }\n        }\n        \n        return intLongWordCount;\n    }"}
{"func_code_string":"public String extract(String html, CETR.Parameters parameters) {\n        html = clearText(html); \/\/preprocess the Document by removing irrelevant HTML tags and empty lines and break the document to its lines\n        List<String> rows = extractRows(html); \/\/\n        \n        List<Integer> selectedRowIds = selectRows(rows, parameters);\n        \n        StringBuilder sb = new StringBuilder(html.length());\n        for(Integer rowId : selectedRowIds) {\n            String row = rows.get(rowId);\n            \n            \/\/extract the clear text from the selected row\n            row = StringCleaner.removeExtraSpaces(HTMLParser.extractText(row));\n            if(row.isEmpty()) {\n                continue;\n            }\n            sb.append(row).append(\" \");\n        }\n        \n        return sb.toString().trim();\n    }","func_code_tokens":["public","String","extract","(","String","html",",","CETR",".","Parameters","parameters",")","{","html","=","clearText","(","html",")",";","\/\/preprocess the Document by removing irrelevant HTML tags and empty lines and break the document to its lines","List","<","String",">","rows","=","extractRows","(","html",")",";","\/\/","List","<","Integer",">","selectedRowIds","=","selectRows","(","rows",",","parameters",")",";","StringBuilder","sb","=","new","StringBuilder","(","html",".","length","(",")",")",";","for","(","Integer","rowId",":","selectedRowIds",")","{","String","row","=","rows",".","get","(","rowId",")",";","\/\/extract the clear text from the selected row","row","=","StringCleaner",".","removeExtraSpaces","(","HTMLParser",".","extractText","(","row",")",")",";","if","(","row",".","isEmpty","(",")",")","{","continue",";","}","sb",".","append","(","row",")",".","append","(","\" \"",")",";","}","return","sb",".","toString","(",")",".","trim","(",")",";","}"],"func_documentation_string":"Extracts the main content for an HTML page.\n\n@param html\n@param parameters\n@return","func_documentation_tokens":["Extracts","the","main","content","for","an","HTML","page","."],"label":1,"text":"Extracts the main content for an HTML page.\n\n@param html\n@param parameters\n@return[SEP]public String extract(String html, CETR.Parameters parameters) {\n        html = clearText(html); \/\/preprocess the Document by removing irrelevant HTML tags and empty lines and break the document to its lines\n        List<String> rows = extractRows(html); \/\/\n        \n        List<Integer> selectedRowIds = selectRows(rows, parameters);\n        \n        StringBuilder sb = new StringBuilder(html.length());\n        for(Integer rowId : selectedRowIds) {\n            String row = rows.get(rowId);\n            \n            \/\/extract the clear text from the selected row\n            row = StringCleaner.removeExtraSpaces(HTMLParser.extractText(row));\n            if(row.isEmpty()) {\n                continue;\n            }\n            sb.append(row).append(\" \");\n        }\n        \n        return sb.toString().trim();\n    }"}
{"func_code_string":"public void check() {\n        getDispatcher().beforeCheck(this);\n        \n        RemoteWebElement e = (RemoteWebElement) getElement();\n        while (!e.isSelected()) {\n            e.click();\n        }\n        if (Config.getBoolConfigProperty(ConfigProperty.ENABLE_GUI_LOGGING)) {\n            logUIAction(UIActions.CHECKED);\n        }\n        \n        getDispatcher().afterCheck(this);\n    }","func_code_tokens":["public","void","check","(",")","{","getDispatcher","(",")",".","beforeCheck","(","this",")",";","RemoteWebElement","e","=","(","RemoteWebElement",")","getElement","(",")",";","while","(","!","e",".","isSelected","(",")",")","{","e",".","click","(",")",";","}","if","(","Config",".","getBoolConfigProperty","(","ConfigProperty",".","ENABLE_GUI_LOGGING",")",")","{","logUIAction","(","UIActions",".","CHECKED",")",";","}","getDispatcher","(",")",".","afterCheck","(","this",")",";","}"],"func_documentation_string":"The CheckBox check function It invokes selenium session to handle the check action against the element.","func_documentation_tokens":["The","CheckBox","check","function","It","invokes","selenium","session","to","handle","the","check","action","against","the","element","."],"label":1,"text":"The CheckBox check function It invokes selenium session to handle the check action against the element.[SEP]public void check() {\n        getDispatcher().beforeCheck(this);\n        \n        RemoteWebElement e = (RemoteWebElement) getElement();\n        while (!e.isSelected()) {\n            e.click();\n        }\n        if (Config.getBoolConfigProperty(ConfigProperty.ENABLE_GUI_LOGGING)) {\n            logUIAction(UIActions.CHECKED);\n        }\n        \n        getDispatcher().afterCheck(this);\n    }"}
{"func_code_string":"protected int getCurrentProcessID() throws ProcessHandlerException {\n        int pid;\n        \/\/ Not ideal but using JNA failed on RHEL5.\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        Field jvm = null;\n        try {\n            jvm = runtime.getClass().getDeclaredField(\"jvm\");\n            jvm.setAccessible(true);\n            VMManagement mgmt = (VMManagement) jvm.get(runtime);\n            Method pid_method = mgmt.getClass().getDeclaredMethod(\"getProcessId\");\n            pid_method.setAccessible(true);\n            pid = (Integer) pid_method.invoke(mgmt);\n        } catch (NoSuchFieldException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n            throw new ProcessHandlerException(e);\n        }\n        return pid;\n    }","func_code_tokens":["protected","int","getCurrentProcessID","(",")","throws","ProcessHandlerException","{","int","pid",";","\/\/ Not ideal but using JNA failed on RHEL5.","RuntimeMXBean","runtime","=","ManagementFactory",".","getRuntimeMXBean","(",")",";","Field","jvm","=","null",";","try","{","jvm","=","runtime",".","getClass","(",")",".","getDeclaredField","(","\"jvm\"",")",";","jvm",".","setAccessible","(","true",")",";","VMManagement","mgmt","=","(","VMManagement",")","jvm",".","get","(","runtime",")",";","Method","pid_method","=","mgmt",".","getClass","(",")",".","getDeclaredMethod","(","\"getProcessId\"",")",";","pid_method",".","setAccessible","(","true",")",";","pid","=","(","Integer",")","pid_method",".","invoke","(","mgmt",")",";","}","catch","(","NoSuchFieldException","|","NoSuchMethodException","|","IllegalAccessException","|","InvocationTargetException","e",")","{","throw","new","ProcessHandlerException","(","e",")",";","}","return","pid",";","}"],"func_documentation_string":"Gets the PID for the SeLion-Grid (main) process\n\n@return the PID as an int\n@throws ProcessHandlerException","func_documentation_tokens":["Gets","the","PID","for","the","SeLion","-","Grid","(","main",")","process"],"label":1,"text":"Gets the PID for the SeLion-Grid (main) process\n\n@return the PID as an int\n@throws ProcessHandlerException[SEP]protected int getCurrentProcessID() throws ProcessHandlerException {\n        int pid;\n        \/\/ Not ideal but using JNA failed on RHEL5.\n        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n        Field jvm = null;\n        try {\n            jvm = runtime.getClass().getDeclaredField(\"jvm\");\n            jvm.setAccessible(true);\n            VMManagement mgmt = (VMManagement) jvm.get(runtime);\n            Method pid_method = mgmt.getClass().getDeclaredMethod(\"getProcessId\");\n            pid_method.setAccessible(true);\n            pid = (Integer) pid_method.invoke(mgmt);\n        } catch (NoSuchFieldException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n            throw new ProcessHandlerException(e);\n        }\n        return pid;\n    }"}
{"func_code_string":"public void uncheckCheckboxInCell(int row, int column) {\n        String checkboxLocator = getXPathBase() + \"tr[\" + row + \"]\/td[\" + column + \"]\/input\";\n        CheckBox cb = new CheckBox(checkboxLocator);\n        cb.uncheck();\n    }","func_code_tokens":["public","void","uncheckCheckboxInCell","(","int","row",",","int","column",")","{","String","checkboxLocator","=","getXPathBase","(",")","+","\"tr[\"","+","row","+","\"]\/td[\"","+","column","+","\"]\/input\"",";","CheckBox","cb","=","new","CheckBox","(","checkboxLocator",")",";","cb",".","uncheck","(",")",";","}"],"func_documentation_string":"Untick a checkbox in a cell of a table indicated by the input row and column indices.\n\n@param row\nint number of row for cell\n@param column\nint number of column for cell","func_documentation_tokens":["Untick","a","checkbox","in","a","cell","of","a","table","indicated","by","the","input","row","and","column","indices","."],"label":1,"text":"Untick a checkbox in a cell of a table indicated by the input row and column indices.\n\n@param row\nint number of row for cell\n@param column\nint number of column for cell[SEP]public void uncheckCheckboxInCell(int row, int column) {\n        String checkboxLocator = getXPathBase() + \"tr[\" + row + \"]\/td[\" + column + \"]\/input\";\n        CheckBox cb = new CheckBox(checkboxLocator);\n        cb.uncheck();\n    }"}
{"func_code_string":"public static IPAddressType getAddressType(String ipAddress)\n    {\n    \tif(IPAddressUtil.isIPv4LiteralAddress(ipAddress))\n    \t\treturn IPAddressType.IPV4;\n    \t\n    \tif(IPAddressUtil.isIPv6LiteralAddress(ipAddress))\n    \t\treturn IPAddressType.IPV6;\n    \t\n    \treturn IPAddressType.INVALID;\n    }","func_code_tokens":["public","static","IPAddressType","getAddressType","(","String","ipAddress",")","{","if","(","IPAddressUtil",".","isIPv4LiteralAddress","(","ipAddress",")",")","return","IPAddressType",".","IPV4",";","if","(","IPAddressUtil",".","isIPv6LiteralAddress","(","ipAddress",")",")","return","IPAddressType",".","IPV6",";","return","IPAddressType",".","INVALID",";","}"],"func_documentation_string":"Gets IP address type","func_documentation_tokens":["Gets","IP","address","type"],"label":1,"text":"Gets IP address type[SEP]public static IPAddressType getAddressType(String ipAddress)\n    {\n    \tif(IPAddressUtil.isIPv4LiteralAddress(ipAddress))\n    \t\treturn IPAddressType.IPV4;\n    \t\n    \tif(IPAddressUtil.isIPv6LiteralAddress(ipAddress))\n    \t\treturn IPAddressType.IPV6;\n    \t\n    \treturn IPAddressType.INVALID;\n    }"}
{"func_code_string":"public Priority setPriority(Integer priority) {\n\t\tPriority prop = (priority == null) ? null : new Priority(priority);\n\t\tsetPriority(prop);\n\t\treturn prop;\n\t}","func_code_tokens":["public","Priority","setPriority","(","Integer","priority",")","{","Priority","prop","=","(","priority","==","null",")","?","null",":","new","Priority","(","priority",")",";","setPriority","(","prop",")",";","return","prop",";","}"],"func_documentation_string":"Sets the priority of the event.\n@param priority the priority (\"0\" is undefined, \"1\" is the highest, \"9\"\nis the lowest) or null to remove\n@return the property that was created\n@see <a href=\"http:\/\/tools.ietf.org\/html\/rfc5545#page-89\">RFC 5545\np.89-90<\/a>\n@see <a href=\"http:\/\/tools.ietf.org\/html\/rfc2445#page-85\">RFC 2445\np.85-7<\/a>\n@see <a href=\"http:\/\/www.imc.org\/pdi\/vcal-10.doc\">vCal 1.0 p.33<\/a>","func_documentation_tokens":["Sets","the","priority","of","the","event","."],"label":0,"text":"Sets the priority of the event.\n@param priority the priority (\"0\" is undefined, \"1\" is the highest, \"9\"\nis the lowest) or null to remove\n@return the property that was created\n@see <a href=\"http:\/\/tools.ietf.org\/html\/rfc5545#page-89\">RFC 5545\np.89-90<\/a>\n@see <a href=\"http:\/\/tools.ietf.org\/html\/rfc2445#page-85\">RFC 2445\np.85-7<\/a>\n@see <a href=\"http:\/\/www.imc.org\/pdi\/vcal-10.doc\">vCal 1.0 p.33<\/a>[SEP]public Priority setPriority(Integer priority) {\n\t\tPriority prop = (priority == null) ? null : new Priority(priority);\n\t\tsetPriority(prop);\n\t\treturn prop;\n\t}"}
{"func_code_string":"public static DateTime epoch() {\n\t\t MutableDateTime epoch = new MutableDateTime();\n\t\t \n\t     epoch.setDate(0); \n\t     epoch.setTime(0);\n\t        \n\t     return epoch.toDateTime();\n\t}","func_code_tokens":["public","static","DateTime","epoch","(",")","{","MutableDateTime","epoch","=","new","MutableDateTime","(",")",";","epoch",".","setDate","(","0",")",";","epoch",".","setTime","(","0",")",";","return","epoch",".","toDateTime","(",")",";","}"],"func_documentation_string":"Helper for getting epoch {@link DateTime} object\n\n@return {@link DateTime} representing epoch","func_documentation_tokens":["Helper","for","getting","epoch","{","@link","DateTime","}","object"],"label":0,"text":"Helper for getting epoch {@link DateTime} object\n\n@return {@link DateTime} representing epoch[SEP]public static DateTime epoch() {\n\t\t MutableDateTime epoch = new MutableDateTime();\n\t\t \n\t     epoch.setDate(0); \n\t     epoch.setTime(0);\n\t        \n\t     return epoch.toDateTime();\n\t}"}
{"func_code_string":"public static Location of(final Latitude latitude, final Longitude longitude) {\n\t\treturn new Location(latitude, longitude, null);\n\t}","func_code_tokens":["public","static","Location","of","(","final","Latitude","latitude",",","final","Longitude","longitude",")","{","return","new","Location","(","latitude",",","longitude",",","null",")",";","}"],"func_documentation_string":"Create a new <em>location<\/em> object from the given {@code latitude}\nand {@code longitude}.\n\n@param latitude the latitude of the location, maybe {@code null}\n@param longitude the longitude of the location, maybe {@code null}\n@return a new location object from the given input data","func_documentation_tokens":["Create","a","new","<em",">","location<","\/","em",">","object","from","the","given","{","@code","latitude","}","and","{","@code","longitude","}","."],"label":0,"text":"Create a new <em>location<\/em> object from the given {@code latitude}\nand {@code longitude}.\n\n@param latitude the latitude of the location, maybe {@code null}\n@param longitude the longitude of the location, maybe {@code null}\n@return a new location object from the given input data[SEP]public static Location of(final Latitude latitude, final Longitude longitude) {\n\t\treturn new Location(latitude, longitude, null);\n\t}"}
{"func_code_string":"public static void writeCsv(List<String[]> csvData, String fileName) throws IOException {\n    Preconditions.checkNotNull(csvData, \"Null CSV data\");\n    Preconditions.checkNotNull(fileName, \"Null file name\");\n\n    CSVWriter writer = null;\n    try {\n      writer = new CSVWriter(Files.newWriter(new File(fileName), StandardCharsets.UTF_8));\n      for (String[] line : csvData) {\n        writer.writeNext(line);\n      }\n    } finally {\n      if (writer != null) {\n        writer.close();\n      }\n    }\n  }","func_code_tokens":["public","static","void","writeCsv","(","List","<","String","[","]",">","csvData",",","String","fileName",")","throws","IOException","{","Preconditions",".","checkNotNull","(","csvData",",","\"Null CSV data\"",")",";","Preconditions",".","checkNotNull","(","fileName",",","\"Null file name\"",")",";","CSVWriter","writer","=","null",";","try","{","writer","=","new","CSVWriter","(","Files",".","newWriter","(","new","File","(","fileName",")",",","StandardCharsets",".","UTF_8",")",")",";","for","(","String","[","]","line",":","csvData",")","{","writer",".","writeNext","(","line",")",";","}","}","finally","{","if","(","writer","!=","null",")","{","writer",".","close","(",")",";","}","}","}"],"func_documentation_string":"Writes the CSV data located in {@code csvData} to the file located at\n{@code fileName}.\n\n@param csvData the CSV data including the header\n@param fileName the file to write the CSV data to\n@throws IOException if there was an error writing to the file\n@throws NullPointerException if {@code csvData == null} or {@code fileName == null}","func_documentation_tokens":["Writes","the","CSV","data","located","in","{","@code","csvData","}","to","the","file","located","at","{","@code","fileName","}","."],"label":1,"text":"Writes the CSV data located in {@code csvData} to the file located at\n{@code fileName}.\n\n@param csvData the CSV data including the header\n@param fileName the file to write the CSV data to\n@throws IOException if there was an error writing to the file\n@throws NullPointerException if {@code csvData == null} or {@code fileName == null}[SEP]public static void writeCsv(List<String[]> csvData, String fileName) throws IOException {\n    Preconditions.checkNotNull(csvData, \"Null CSV data\");\n    Preconditions.checkNotNull(fileName, \"Null file name\");\n\n    CSVWriter writer = null;\n    try {\n      writer = new CSVWriter(Files.newWriter(new File(fileName), StandardCharsets.UTF_8));\n      for (String[] line : csvData) {\n        writer.writeNext(line);\n      }\n    } finally {\n      if (writer != null) {\n        writer.close();\n      }\n    }\n  }"}
{"func_code_string":"public static String reverse(String str) {\n      if (str == null) {\n          return null;\n      }\n      return new StringBuffer(str).reverse().toString();\n  }","func_code_tokens":["public","static","String","reverse","(","String","str",")","{","if","(","str","==","null",")","{","return","null",";","}","return","new","StringBuffer","(","str",")",".","reverse","(",")",".","toString","(",")",";","}"],"func_documentation_string":"<p>Reverses a String as per {@link StringBuffer#reverse()}.<\/p>\n\n<p>A <code>null<\/code> String returns <code>null<\/code>.<\/p>\n\n<pre>\nGosuStringUtil.reverse(null)  = null\nGosuStringUtil.reverse(\"\")    = \"\"\nGosuStringUtil.reverse(\"bat\") = \"tab\"\n<\/pre>\n\n@param str  the String to reverse, may be null\n@return the reversed String, <code>null<\/code> if null String input","func_documentation_tokens":["<p",">","Reverses","a","String","as","per","{","@link","StringBuffer#reverse","()","}",".","<","\/","p",">"],"label":1,"text":"<p>Reverses a String as per {@link StringBuffer#reverse()}.<\/p>\n\n<p>A <code>null<\/code> String returns <code>null<\/code>.<\/p>\n\n<pre>\nGosuStringUtil.reverse(null)  = null\nGosuStringUtil.reverse(\"\")    = \"\"\nGosuStringUtil.reverse(\"bat\") = \"tab\"\n<\/pre>\n\n@param str  the String to reverse, may be null\n@return the reversed String, <code>null<\/code> if null String input[SEP]public static String reverse(String str) {\n      if (str == null) {\n          return null;\n      }\n      return new StringBuffer(str).reverse().toString();\n  }"}
{"func_code_string":"static String replaceSlashes(final String target) {\n\t\tString replaced = target;\n\t\tif (replaced != null) {\n\t\t\treplaced = replaced.replaceAll(\"\/+\", \"\/\");\n\t\t}\n\t\treturn replaced;\n\t}","func_code_tokens":["static","String","replaceSlashes","(","final","String","target",")","{","String","replaced","=","target",";","if","(","replaced","!=","null",")","{","replaced","=","replaced",".","replaceAll","(","\"\/+\"",",","\"\/\"",")",";","}","return","replaced",";","}"],"func_documentation_string":"Replaces multiple subsequent slashes with one slash. E.g. \/\/\/\/a\/\/path\/\/\nwill becaome \/a\/path\/\n\n@param target target sring to be replaced\n@return a string where the subsequent slashes are replaced with one slash","func_documentation_tokens":["Replaces","multiple","subsequent","slashes","with","one","slash",".","E",".","g",".","\/\/\/\/","a","\/\/","path","\/\/","will","becaome","\/","a","\/","path","\/"],"label":0,"text":"Replaces multiple subsequent slashes with one slash. E.g. \/\/\/\/a\/\/path\/\/\nwill becaome \/a\/path\/\n\n@param target target sring to be replaced\n@return a string where the subsequent slashes are replaced with one slash[SEP]static String replaceSlashes(final String target) {\n\t\tString replaced = target;\n\t\tif (replaced != null) {\n\t\t\treplaced = replaced.replaceAll(\"\/+\", \"\/\");\n\t\t}\n\t\treturn replaced;\n\t}"}
{"func_code_string":"public Query aroundLatitudeLongitude(float latitude, float longitude, int radius) {\n    aroundLatLong = \"aroundLatLng=\" + latitude + \",\" + longitude;\n    aroundRadius = radius;\n    return this;\n  }","func_code_tokens":["public","Query","aroundLatitudeLongitude","(","float","latitude",",","float","longitude",",","int","radius",")","{","aroundLatLong","=","\"aroundLatLng=\"","+","latitude","+","\",\"","+","longitude",";","aroundRadius","=","radius",";","return","this",";","}"],"func_documentation_string":"Search for entries around a given latitude\/longitude.\n\n@param radius set the maximum distance in meters. Note: at indexing, geoloc\nof an object should be set with _geoloc attribute containing\nlat and lng attributes (for example\n{\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})","func_documentation_tokens":["Search","for","entries","around","a","given","latitude","\/","longitude","."],"label":0,"text":"Search for entries around a given latitude\/longitude.\n\n@param radius set the maximum distance in meters. Note: at indexing, geoloc\nof an object should be set with _geoloc attribute containing\nlat and lng attributes (for example\n{\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})[SEP]public Query aroundLatitudeLongitude(float latitude, float longitude, int radius) {\n    aroundLatLong = \"aroundLatLng=\" + latitude + \",\" + longitude;\n    aroundRadius = radius;\n    return this;\n  }"}
{"func_code_string":"public void error(Throwable error, Map<String, Object> custom) {\n    error(error, custom, null);\n  }","func_code_tokens":["public","void","error","(","Throwable","error",",","Map","<","String",",","Object",">","custom",")","{","error","(","error",",","custom",",","null",")",";","}"],"func_documentation_string":"Record an error with extra information attached.\n\n@param error  the error.\n@param custom the extra information.","func_documentation_tokens":["Record","an","error","with","extra","information","attached","."],"label":0,"text":"Record an error with extra information attached.\n\n@param error  the error.\n@param custom the extra information.[SEP]public void error(Throwable error, Map<String, Object> custom) {\n    error(error, custom, null);\n  }"}
{"func_code_string":"public int getDimension(DependencyPath path) {\n        String endToken = path.last().word();\n\n        \/\/ Extract out how the current word is related to the last word in the\n        \/\/ path.  \n        String relation = path.getRelation(path.length() - 1);\n        return getDimensionInternal(endToken + \"+\" + relation);\n    }","func_code_tokens":["public","int","getDimension","(","DependencyPath","path",")","{","String","endToken","=","path",".","last","(",")",".","word","(",")",";","\/\/ Extract out how the current word is related to the last word in the","\/\/ path.  ","String","relation","=","path",".","getRelation","(","path",".","length","(",")","-","1",")",";","return","getDimensionInternal","(","endToken","+","\"+\"","+","relation",")",";","}"],"func_documentation_string":"Returns the dimension number corresponding to the term at the end of the\nprovided path.\n\n@param path a path whose end represents a semantic connection\n\n@return the dimension for the occurrence of the last word in the path","func_documentation_tokens":["Returns","the","dimension","number","corresponding","to","the","term","at","the","end","of","the","provided","path","."],"label":0,"text":"Returns the dimension number corresponding to the term at the end of the\nprovided path.\n\n@param path a path whose end represents a semantic connection\n\n@return the dimension for the occurrence of the last word in the path[SEP]public int getDimension(DependencyPath path) {\n        String endToken = path.last().word();\n\n        \/\/ Extract out how the current word is related to the last word in the\n        \/\/ path.  \n        String relation = path.getRelation(path.length() - 1);\n        return getDimensionInternal(endToken + \"+\" + relation);\n    }"}
{"func_code_string":"public TernaryVector generate() {\n        HashSet<Integer> pos = new HashSet<Integer>();\n        HashSet<Integer> neg = new HashSet<Integer>();\n        \n        \/\/ Randomly decide how many bits to set in the index vector based on the\n        \/\/ variance.\n        int bitsToSet = numVectorValues +\n            (int)(RANDOM.nextDouble() * variance *\n                  ((RANDOM.nextDouble() > .5) ? 1 : -1));\n\n        for (int i = 0; i < bitsToSet; ++i) {\n            boolean picked = false;\n            \/\/ loop to ensure we actually pick the full number of bits\n            while (!picked) {\n                \/\/ pick some random index\n                int index = RANDOM.nextInt(indexVectorLength);\n                    \n                \/\/ check that we haven't already added this index\n                if (pos.contains(index) || neg.contains(index))\n                    continue;\n                    \n                \/\/ decide positive or negative\n                ((RANDOM.nextDouble() > .5) ? pos : neg).add(index);\n                picked = true;\n            }\n        }\n            \n        int[] positive = new int[pos.size()];\n        int[] negative = new int[neg.size()];\n\n        Iterator<Integer> it = pos.iterator();\n        for (int i = 0; i < positive.length; ++i) \n            positive[i] = it.next();\n\n        it = neg.iterator();\n        for (int i = 0; i < negative.length; ++i) \n            negative[i] = it.next();                \n\n        \/\/ sort so we can use a binary search in getValue()\n        Arrays.sort(positive);\n        Arrays.sort(negative);\n        return new TernaryVector(indexVectorLength, positive, negative);\n    }","func_code_tokens":["public","TernaryVector","generate","(",")","{","HashSet","<","Integer",">","pos","=","new","HashSet","<","Integer",">","(",")",";","HashSet","<","Integer",">","neg","=","new","HashSet","<","Integer",">","(",")",";","\/\/ Randomly decide how many bits to set in the index vector based on the","\/\/ variance.","int","bitsToSet","=","numVectorValues","+","(","int",")","(","RANDOM",".","nextDouble","(",")","*","variance","*","(","(","RANDOM",".","nextDouble","(",")",">",".5",")","?","1",":","-","1",")",")",";","for","(","int","i","=","0",";","i","<","bitsToSet",";","++","i",")","{","boolean","picked","=","false",";","\/\/ loop to ensure we actually pick the full number of bits","while","(","!","picked",")","{","\/\/ pick some random index","int","index","=","RANDOM",".","nextInt","(","indexVectorLength",")",";","\/\/ check that we haven't already added this index","if","(","pos",".","contains","(","index",")","||","neg",".","contains","(","index",")",")","continue",";","\/\/ decide positive or negative","(","(","RANDOM",".","nextDouble","(",")",">",".5",")","?","pos",":","neg",")",".","add","(","index",")",";","picked","=","true",";","}","}","int","[","]","positive","=","new","int","[","pos",".","size","(",")","]",";","int","[","]","negative","=","new","int","[","neg",".","size","(",")","]",";","Iterator","<","Integer",">","it","=","pos",".","iterator","(",")",";","for","(","int","i","=","0",";","i","<","positive",".","length",";","++","i",")","positive","[","i","]","=","it",".","next","(",")",";","it","=","neg",".","iterator","(",")",";","for","(","int","i","=","0",";","i","<","negative",".","length",";","++","i",")","negative","[","i","]","=","it",".","next","(",")",";","\/\/ sort so we can use a binary search in getValue()","Arrays",".","sort","(","positive",")",";","Arrays",".","sort","(","negative",")",";","return","new","TernaryVector","(","indexVectorLength",",","positive",",","negative",")",";","}"],"func_documentation_string":"Creates an {@code TernaryVector} with the provided length.\n\n@param length the length of the index vector\n\n@return an index vector","func_documentation_tokens":["Creates","an","{","@code","TernaryVector","}","with","the","provided","length","."],"label":1,"text":"Creates an {@code TernaryVector} with the provided length.\n\n@param length the length of the index vector\n\n@return an index vector[SEP]public TernaryVector generate() {\n        HashSet<Integer> pos = new HashSet<Integer>();\n        HashSet<Integer> neg = new HashSet<Integer>();\n        \n        \/\/ Randomly decide how many bits to set in the index vector based on the\n        \/\/ variance.\n        int bitsToSet = numVectorValues +\n            (int)(RANDOM.nextDouble() * variance *\n                  ((RANDOM.nextDouble() > .5) ? 1 : -1));\n\n        for (int i = 0; i < bitsToSet; ++i) {\n            boolean picked = false;\n            \/\/ loop to ensure we actually pick the full number of bits\n            while (!picked) {\n                \/\/ pick some random index\n                int index = RANDOM.nextInt(indexVectorLength);\n                    \n                \/\/ check that we haven't already added this index\n                if (pos.contains(index) || neg.contains(index))\n                    continue;\n                    \n                \/\/ decide positive or negative\n                ((RANDOM.nextDouble() > .5) ? pos : neg).add(index);\n                picked = true;\n            }\n        }\n            \n        int[] positive = new int[pos.size()];\n        int[] negative = new int[neg.size()];\n\n        Iterator<Integer> it = pos.iterator();\n        for (int i = 0; i < positive.length; ++i) \n            positive[i] = it.next();\n\n        it = neg.iterator();\n        for (int i = 0; i < negative.length; ++i) \n            negative[i] = it.next();                \n\n        \/\/ sort so we can use a binary search in getValue()\n        Arrays.sort(positive);\n        Arrays.sort(negative);\n        return new TernaryVector(indexVectorLength, positive, negative);\n    }"}
{"func_code_string":"public String getDateStringOrSuppliedString(String emptyDateString) {\n        LocalDate date = getDate();\n        return (date == null) ? emptyDateString : date.toString();\n    }","func_code_tokens":["public","String","getDateStringOrSuppliedString","(","String","emptyDateString",")","{","LocalDate","date","=","getDate","(",")",";","return","(","date","==","null",")","?","emptyDateString",":","date",".","toString","(",")",";","}"],"func_documentation_string":"getDateStringOrSuppliedString, This returns the last valid date in an ISO-8601 formatted\nstring \"uuuu-MM-dd\". For any CE years that are between 0 and 9999 inclusive, the output will\nhave a fixed length of 10 characters. Years before or after that range will output longer\nstrings. If the last valid date is empty, this will return the value of emptyDateString.","func_documentation_tokens":["getDateStringOrSuppliedString","This","returns","the","last","valid","date","in","an","ISO","-","8601","formatted","string","uuuu","-","MM","-","dd",".","For","any","CE","years","that","are","between","0","and","9999","inclusive","the","output","will","have","a","fixed","length","of","10","characters",".","Years","before","or","after","that","range","will","output","longer","strings",".","If","the","last","valid","date","is","empty","this","will","return","the","value","of","emptyDateString","."],"label":0,"text":"getDateStringOrSuppliedString, This returns the last valid date in an ISO-8601 formatted\nstring \"uuuu-MM-dd\". For any CE years that are between 0 and 9999 inclusive, the output will\nhave a fixed length of 10 characters. Years before or after that range will output longer\nstrings. If the last valid date is empty, this will return the value of emptyDateString.[SEP]public String getDateStringOrSuppliedString(String emptyDateString) {\n        LocalDate date = getDate();\n        return (date == null) ? emptyDateString : date.toString();\n    }"}
{"func_code_string":"public void setHidden(final boolean hidden) {\n        if (hidden)\n            attrMixin.setAttribute(HIDDEN, Boolean.toString(true));\n        else\n            attrMixin.removeAttribute(HIDDEN);\n    }","func_code_tokens":["public","void","setHidden","(","final","boolean","hidden",")","{","if","(","hidden",")","attrMixin",".","setAttribute","(","HIDDEN",",","Boolean",".","toString","(","true",")",")",";","else","attrMixin",".","removeAttribute","(","HIDDEN",")",";","}"],"func_documentation_string":"Hides the option if set to <code>true<\/code>.<br>\n<br>\nDefaults to <code>false<\/code>.\n\n@param hidden","func_documentation_tokens":["Hides","the","option","if","set","to","<code",">","true<","\/","code",">",".","<br",">","<br",">","Defaults","to","<code",">","false<","\/","code",">","."],"label":0,"text":"Hides the option if set to <code>true<\/code>.<br>\n<br>\nDefaults to <code>false<\/code>.\n\n@param hidden[SEP]public void setHidden(final boolean hidden) {\n        if (hidden)\n            attrMixin.setAttribute(HIDDEN, Boolean.toString(true));\n        else\n            attrMixin.removeAttribute(HIDDEN);\n    }"}
{"func_code_string":"@SuppressWarnings(\"unchecked\")\n\tpublic JSONNavi<T> array() {\n\t\tif (failure)\n\t\t\treturn this;\n\t\tif (current == null && readonly)\n\t\t\tfailure(\"Can not create Array child in readonly\", null);\n\t\tif (current != null) {\n\t\t\tif (isArray())\n\t\t\t\treturn this;\n\t\t\tif (isObject())\n\t\t\t\tfailure(\"can not use Object feature on Array.\", null);\n\t\t\tfailure(\"Can not use current possition as Object\", null);\n\t\t} else {\n\t\t\tcurrent = mapper.createArray();\n\t\t}\n\t\tif (root == null)\n\t\t\troot = (T) current;\n\t\telse\n\t\t\tstore();\n\t\treturn this;\n\t}","func_code_tokens":["@","SuppressWarnings","(","\"unchecked\"",")","public","JSONNavi","<","T",">","array","(",")","{","if","(","failure",")","return","this",";","if","(","current","==","null","&&","readonly",")","failure","(","\"Can not create Array child in readonly\"",",","null",")",";","if","(","current","!=","null",")","{","if","(","isArray","(",")",")","return","this",";","if","(","isObject","(",")",")","failure","(","\"can not use Object feature on Array.\"",",","null",")",";","failure","(","\"Can not use current possition as Object\"",",","null",")",";","}","else","{","current","=","mapper",".","createArray","(",")",";","}","if","(","root","==","null",")","root","=","(","T",")","current",";","else","store","(",")",";","return","this",";","}"],"func_documentation_string":"Set current value as Json Array You can also skip this call Arrays can be\ncreate automatically.","func_documentation_tokens":["Set","current","value","as","Json","Array","You","can","also","skip","this","call","Arrays","can","be","create","automatically","."],"label":0,"text":"Set current value as Json Array You can also skip this call Arrays can be\ncreate automatically.[SEP]@SuppressWarnings(\"unchecked\")\n\tpublic JSONNavi<T> array() {\n\t\tif (failure)\n\t\t\treturn this;\n\t\tif (current == null && readonly)\n\t\t\tfailure(\"Can not create Array child in readonly\", null);\n\t\tif (current != null) {\n\t\t\tif (isArray())\n\t\t\t\treturn this;\n\t\t\tif (isObject())\n\t\t\t\tfailure(\"can not use Object feature on Array.\", null);\n\t\t\tfailure(\"Can not use current possition as Object\", null);\n\t\t} else {\n\t\t\tcurrent = mapper.createArray();\n\t\t}\n\t\tif (root == null)\n\t\t\troot = (T) current;\n\t\telse\n\t\t\tstore();\n\t\treturn this;\n\t}"}
{"func_code_string":"public JsonResponse apiPost(ApiParams data, ApiFileParams fileParams) throws IOException {\n        return httpRequestJson(HttpRequestMethod.POST, data, fileParams);\n    }","func_code_tokens":["public","JsonResponse","apiPost","(","ApiParams","data",",","ApiFileParams","fileParams",")","throws","IOException","{","return","httpRequestJson","(","HttpRequestMethod",".","POST",",","data",",","fileParams",")",";","}"],"func_documentation_string":"HTTP POST Request with Interface implementation of ApiParams and ApiFileParams\n@param data\n@param fileParams\n@throws IOException","func_documentation_tokens":["HTTP","POST","Request","with","Interface","implementation","of","ApiParams","and","ApiFileParams"],"label":1,"text":"HTTP POST Request with Interface implementation of ApiParams and ApiFileParams\n@param data\n@param fileParams\n@throws IOException[SEP]public JsonResponse apiPost(ApiParams data, ApiFileParams fileParams) throws IOException {\n        return httpRequestJson(HttpRequestMethod.POST, data, fileParams);\n    }"}
{"func_code_string":"public static void innerHtml(HTMLElement element, SafeHtml html) {\n        if (element != null) {\n            element.innerHTML = html.asString();\n        }\n    }","func_code_tokens":["public","static","void","innerHtml","(","HTMLElement","element",",","SafeHtml","html",")","{","if","(","element","!=","null",")","{","element",".","innerHTML","=","html",".","asString","(",")",";","}","}"],"func_documentation_string":"Convenience method to set the inner HTML of the given element.","func_documentation_tokens":["Convenience","method","to","set","the","inner","HTML","of","the","given","element","."],"label":0,"text":"Convenience method to set the inner HTML of the given element.[SEP]public static void innerHtml(HTMLElement element, SafeHtml html) {\n        if (element != null) {\n            element.innerHTML = html.asString();\n        }\n    }"}
{"func_code_string":"public void setSimilarityClass(String className)\n   {\n      try\n      {\n         Class<?> similarityClass = ClassLoading.forName(className, this);\n         similarity = (Similarity)similarityClass.newInstance();\n      }\n      catch (ClassNotFoundException e)\n      {\n         log.warn(\"Invalid Similarity class: \" + className, e);\n      }\n      catch (InstantiationException e)\n      {\n         log.warn(\"Invalid Similarity class: \" + className, e);\n      }\n      catch (IllegalAccessException e)\n      {\n         log.warn(\"Invalid Similarity class: \" + className, e);\n      }\n   }","func_code_tokens":["public","void","setSimilarityClass","(","String","className",")","{","try","{","Class","<","?",">","similarityClass","=","ClassLoading",".","forName","(","className",",","this",")",";","similarity","=","(","Similarity",")","similarityClass",".","newInstance","(",")",";","}","catch","(","ClassNotFoundException","e",")","{","log",".","warn","(","\"Invalid Similarity class: \"","+","className",",","e",")",";","}","catch","(","InstantiationException","e",")","{","log",".","warn","(","\"Invalid Similarity class: \"","+","className",",","e",")",";","}","catch","(","IllegalAccessException","e",")","{","log",".","warn","(","\"Invalid Similarity class: \"","+","className",",","e",")",";","}","}"],"func_documentation_string":"Sets the similarity implementation, which will be used for indexing and\nsearching. The implementation must extend {@link Similarity}.\n\n@param className\na {@link Similarity} implementation.","func_documentation_tokens":["Sets","the","similarity","implementation","which","will","be","used","for","indexing","and","searching",".","The","implementation","must","extend","{","@link","Similarity","}","."],"label":0,"text":"Sets the similarity implementation, which will be used for indexing and\nsearching. The implementation must extend {@link Similarity}.\n\n@param className\na {@link Similarity} implementation.[SEP]public void setSimilarityClass(String className)\n   {\n      try\n      {\n         Class<?> similarityClass = ClassLoading.forName(className, this);\n         similarity = (Similarity)similarityClass.newInstance();\n      }\n      catch (ClassNotFoundException e)\n      {\n         log.warn(\"Invalid Similarity class: \" + className, e);\n      }\n      catch (InstantiationException e)\n      {\n         log.warn(\"Invalid Similarity class: \" + className, e);\n      }\n      catch (IllegalAccessException e)\n      {\n         log.warn(\"Invalid Similarity class: \" + className, e);\n      }\n   }"}
{"func_code_string":"public static String getStatusDescription(int status)\n   {\n      String description = \"\";\n\n      Integer statusKey = new Integer(status);\n      if (statusDescriptions.containsKey(statusKey))\n      {\n         description = statusDescriptions.get(statusKey);\n      }\n\n      return String.format(\"%s %d %s\", WebDavConst.HTTPVER, status, description);\n   }","func_code_tokens":["public","static","String","getStatusDescription","(","int","status",")","{","String","description","=","\"\"",";","Integer","statusKey","=","new","Integer","(","status",")",";","if","(","statusDescriptions",".","containsKey","(","statusKey",")",")","{","description","=","statusDescriptions",".","get","(","statusKey",")",";","}","return","String",".","format","(","\"%s %d %s\"",",","WebDavConst",".","HTTPVER",",","status",",","description",")",";","}"],"func_documentation_string":"Returns status description by it's code.\n\n@param status Status code\n@return Status Description","func_documentation_tokens":["Returns","status","description","by","it","s","code","."],"label":1,"text":"Returns status description by it's code.\n\n@param status Status code\n@return Status Description[SEP]public static String getStatusDescription(int status)\n   {\n      String description = \"\";\n\n      Integer statusKey = new Integer(status);\n      if (statusDescriptions.containsKey(statusKey))\n      {\n         description = statusDescriptions.get(statusKey);\n      }\n\n      return String.format(\"%s %d %s\", WebDavConst.HTTPVER, status, description);\n   }"}
{"func_code_string":"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n   {\n      orderNumber = in.readInt();\n\n      \/\/ read canonical file path\n      int size = in.readInt();\n      if (size > 0)\n      {\n         byte[] buf = new byte[size];\n         in.readFully(buf);\n\n         File f = new File(new String(buf, \"UTF-8\"));\n         \/\/ validate if exists\n         if (PrivilegedFileHelper.exists(f))\n         {\n            file = f;\n         }\n         else\n         {\n            file = null;\n         }\n      }\n      else\n      {\n         \/\/ should not occurs but since we have a way to recover, it should not be\n         \/\/ an issue\n         file = null;\n      }\n   }","func_code_tokens":["public","void","readExternal","(","ObjectInput","in",")","throws","IOException",",","ClassNotFoundException","{","orderNumber","=","in",".","readInt","(",")",";","\/\/ read canonical file path","int","size","=","in",".","readInt","(",")",";","if","(","size",">","0",")","{","byte","[","]","buf","=","new","byte","[","size","]",";","in",".","readFully","(","buf",")",";","File","f","=","new","File","(","new","String","(","buf",",","\"UTF-8\"",")",")",";","\/\/ validate if exists","if","(","PrivilegedFileHelper",".","exists","(","f",")",")","{","file","=","f",";","}","else","{","file","=","null",";","}","}","else","{","\/\/ should not occurs but since we have a way to recover, it should not be","\/\/ an issue","file","=","null",";","}","}"],"func_documentation_string":"{@inheritDoc}","func_documentation_tokens":["{"],"label":0,"text":"{@inheritDoc}[SEP]public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException\n   {\n      orderNumber = in.readInt();\n\n      \/\/ read canonical file path\n      int size = in.readInt();\n      if (size > 0)\n      {\n         byte[] buf = new byte[size];\n         in.readFully(buf);\n\n         File f = new File(new String(buf, \"UTF-8\"));\n         \/\/ validate if exists\n         if (PrivilegedFileHelper.exists(f))\n         {\n            file = f;\n         }\n         else\n         {\n            file = null;\n         }\n      }\n      else\n      {\n         \/\/ should not occurs but since we have a way to recover, it should not be\n         \/\/ an issue\n         file = null;\n      }\n   }"}
{"func_code_string":"@Nonnull\n  private static ESuccess _copyFileViaChannel (@Nonnull final File aSrcFile, @Nonnull final File aDestFile)\n  {\n    final FileChannel aSrcChannel = FileChannelHelper.getFileReadChannel (aSrcFile);\n    if (aSrcChannel == null)\n      return ESuccess.FAILURE;\n\n    try\n    {\n      final FileChannel aDstChannel = FileChannelHelper.getFileWriteChannel (aDestFile, EAppend.TRUNCATE);\n      if (aDstChannel == null)\n        return ESuccess.FAILURE;\n\n      try\n      {\n        FileLock aSrcLock = null;\n        FileLock aDestLock = null;\n        try\n        {\n          final long nBytesToRead = aSrcChannel.size ();\n\n          \/\/ Shared read lock and exclusive write lock\n          aSrcLock = aSrcChannel.lock (0, nBytesToRead, true);\n          aDestLock = aDstChannel.lock ();\n\n          \/\/ Main copying - the loop version is much quicker than then\n          \/\/ transferTo with full size!\n          long nBytesWritten = 0;\n          final long nChunkSize = 1L * CGlobal.BYTES_PER_MEGABYTE;\n          while (nBytesWritten < nBytesToRead)\n            nBytesWritten += aSrcChannel.transferTo (nBytesWritten, nChunkSize, aDstChannel);\n\n          if (nBytesToRead != nBytesWritten)\n          {\n            if (LOGGER.isErrorEnabled ())\n              LOGGER.error (\"Failed to copy file. Meant to read \" + nBytesToRead + \" bytes but wrote \" + nBytesWritten);\n            return ESuccess.FAILURE;\n          }\n          return ESuccess.SUCCESS;\n        }\n        catch (final IOException ex)\n        {\n          throw new IllegalStateException (\"Failed to copy from \" + aSrcFile + \" to \" + aDestFile, ex);\n        }\n        finally\n        {\n          \/\/ Unlock\n          ChannelHelper.release (aDestLock);\n          ChannelHelper.release (aSrcLock);\n        }\n      }\n      finally\n      {\n        ChannelHelper.close (aDstChannel);\n      }\n    }\n    finally\n    {\n      ChannelHelper.close (aSrcChannel);\n    }\n  }","func_code_tokens":["@","Nonnull","private","static","ESuccess","_copyFileViaChannel","(","@","Nonnull","final","File","aSrcFile",",","@","Nonnull","final","File","aDestFile",")","{","final","FileChannel","aSrcChannel","=","FileChannelHelper",".","getFileReadChannel","(","aSrcFile",")",";","if","(","aSrcChannel","==","null",")","return","ESuccess",".","FAILURE",";","try","{","final","FileChannel","aDstChannel","=","FileChannelHelper",".","getFileWriteChannel","(","aDestFile",",","EAppend",".","TRUNCATE",")",";","if","(","aDstChannel","==","null",")","return","ESuccess",".","FAILURE",";","try","{","FileLock","aSrcLock","=","null",";","FileLock","aDestLock","=","null",";","try","{","final","long","nBytesToRead","=","aSrcChannel",".","size","(",")",";","\/\/ Shared read lock and exclusive write lock","aSrcLock","=","aSrcChannel",".","lock","(","0",",","nBytesToRead",",","true",")",";","aDestLock","=","aDstChannel",".","lock","(",")",";","\/\/ Main copying - the loop version is much quicker than then","\/\/ transferTo with full size!","long","nBytesWritten","=","0",";","final","long","nChunkSize","=","1L","*","CGlobal",".","BYTES_PER_MEGABYTE",";","while","(","nBytesWritten","<","nBytesToRead",")","nBytesWritten","+=","aSrcChannel",".","transferTo","(","nBytesWritten",",","nChunkSize",",","aDstChannel",")",";","if","(","nBytesToRead","!=","nBytesWritten",")","{","if","(","LOGGER",".","isErrorEnabled","(",")",")","LOGGER",".","error","(","\"Failed to copy file. Meant to read \"","+","nBytesToRead","+","\" bytes but wrote \"","+","nBytesWritten",")",";","return","ESuccess",".","FAILURE",";","}","return","ESuccess",".","SUCCESS",";","}","catch","(","final","IOException","ex",")","{","throw","new","IllegalStateException","(","\"Failed to copy from \"","+","aSrcFile","+","\" to \"","+","aDestFile",",","ex",")",";","}","finally","{","\/\/ Unlock","ChannelHelper",".","release","(","aDestLock",")",";","ChannelHelper",".","release","(","aSrcLock",")",";","}","}","finally","{","ChannelHelper",".","close","(","aDstChannel",")",";","}","}","finally","{","ChannelHelper",".","close","(","aSrcChannel",")",";","}","}"],"func_documentation_string":"Copy the content of the source file to the destination file using\n{@link FileChannel}. This version seems to fail with UNC paths.\n\n@param aSrcFile\nSource file. May not be <code>null<\/code>.\n@param aDestFile\nDestination file. May not be <code>null<\/code>.\n@return {@link ESuccess}","func_documentation_tokens":["Copy","the","content","of","the","source","file","to","the","destination","file","using","{","@link","FileChannel","}",".","This","version","seems","to","fail","with","UNC","paths","."],"label":0,"text":"Copy the content of the source file to the destination file using\n{@link FileChannel}. This version seems to fail with UNC paths.\n\n@param aSrcFile\nSource file. May not be <code>null<\/code>.\n@param aDestFile\nDestination file. May not be <code>null<\/code>.\n@return {@link ESuccess}[SEP]@Nonnull\n  private static ESuccess _copyFileViaChannel (@Nonnull final File aSrcFile, @Nonnull final File aDestFile)\n  {\n    final FileChannel aSrcChannel = FileChannelHelper.getFileReadChannel (aSrcFile);\n    if (aSrcChannel == null)\n      return ESuccess.FAILURE;\n\n    try\n    {\n      final FileChannel aDstChannel = FileChannelHelper.getFileWriteChannel (aDestFile, EAppend.TRUNCATE);\n      if (aDstChannel == null)\n        return ESuccess.FAILURE;\n\n      try\n      {\n        FileLock aSrcLock = null;\n        FileLock aDestLock = null;\n        try\n        {\n          final long nBytesToRead = aSrcChannel.size ();\n\n          \/\/ Shared read lock and exclusive write lock\n          aSrcLock = aSrcChannel.lock (0, nBytesToRead, true);\n          aDestLock = aDstChannel.lock ();\n\n          \/\/ Main copying - the loop version is much quicker than then\n          \/\/ transferTo with full size!\n          long nBytesWritten = 0;\n          final long nChunkSize = 1L * CGlobal.BYTES_PER_MEGABYTE;\n          while (nBytesWritten < nBytesToRead)\n            nBytesWritten += aSrcChannel.transferTo (nBytesWritten, nChunkSize, aDstChannel);\n\n          if (nBytesToRead != nBytesWritten)\n          {\n            if (LOGGER.isErrorEnabled ())\n              LOGGER.error (\"Failed to copy file. Meant to read \" + nBytesToRead + \" bytes but wrote \" + nBytesWritten);\n            return ESuccess.FAILURE;\n          }\n          return ESuccess.SUCCESS;\n        }\n        catch (final IOException ex)\n        {\n          throw new IllegalStateException (\"Failed to copy from \" + aSrcFile + \" to \" + aDestFile, ex);\n        }\n        finally\n        {\n          \/\/ Unlock\n          ChannelHelper.release (aDestLock);\n          ChannelHelper.release (aSrcLock);\n        }\n      }\n      finally\n      {\n        ChannelHelper.close (aDstChannel);\n      }\n    }\n    finally\n    {\n      ChannelHelper.close (aSrcChannel);\n    }\n  }"}
{"func_code_string":"public static Date getDay(String string) {\n\t\tif (string == null) {\n\t\t\treturn null;\n\t\t}\n\t\tDate date = null;\n\t\ttry {\n\t\t\tdate = (new SimpleDateFormat(\"dd-MMM-yyyy\").parse(string));\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\treturn null;\n\t\t}\n\t\treturn date;\n\t}","func_code_tokens":["public","static","Date","getDay","(","String","string",")","{","if","(","string","==","null",")","{","return","null",";","}","Date","date","=","null",";","try","{","date","=","(","new","SimpleDateFormat","(","\"dd-MMM-yyyy\"",")",".","parse","(","string",")",")",";","}","catch","(","ParseException","ex",")","{","return","null",";","}","return","date",";","}"],"func_documentation_string":"Returns the day given a string in format dd-MMM-yyyy.","func_documentation_tokens":["Returns","the","day","given","a","string","in","format","dd","-","MMM","-","yyyy","."],"label":1,"text":"Returns the day given a string in format dd-MMM-yyyy.[SEP]public static Date getDay(String string) {\n\t\tif (string == null) {\n\t\t\treturn null;\n\t\t}\n\t\tDate date = null;\n\t\ttry {\n\t\t\tdate = (new SimpleDateFormat(\"dd-MMM-yyyy\").parse(string));\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\treturn null;\n\t\t}\n\t\treturn date;\n\t}"}
{"func_code_string":"private Coordinate[] getOrderedNodes( Coordinate c, Coordinate coordinate1, Coordinate coordinate2, Coordinate coordinate3 ) {\n        double d = distance3d(c, coordinate1, null);\n        Coordinate nearest = coordinate1;\n        Coordinate c2 = coordinate2;\n        Coordinate c3 = coordinate3;\n\n        double d2 = distance3d(c, coordinate2, null);\n        if (d2 < d) {\n            nearest = coordinate2;\n            d = d2;\n            c2 = coordinate1;\n            c3 = coordinate3;\n        }\n        double d3 = distance3d(c, coordinate3, null);\n        if (d3 < d) {\n            nearest = coordinate3;\n            c2 = coordinate1;\n            c3 = coordinate2;\n        }\n        return new Coordinate[]{nearest, c2, c3};\n    }","func_code_tokens":["private","Coordinate","[","]","getOrderedNodes","(","Coordinate","c",",","Coordinate","coordinate1",",","Coordinate","coordinate2",",","Coordinate","coordinate3",")","{","double","d","=","distance3d","(","c",",","coordinate1",",","null",")",";","Coordinate","nearest","=","coordinate1",";","Coordinate","c2","=","coordinate2",";","Coordinate","c3","=","coordinate3",";","double","d2","=","distance3d","(","c",",","coordinate2",",","null",")",";","if","(","d2","<","d",")","{","nearest","=","coordinate2",";","d","=","d2",";","c2","=","coordinate1",";","c3","=","coordinate3",";","}","double","d3","=","distance3d","(","c",",","coordinate3",",","null",")",";","if","(","d3","<","d",")","{","nearest","=","coordinate3",";","c2","=","coordinate1",";","c3","=","coordinate2",";","}","return","new","Coordinate","[","]","{","nearest",",","c2",",","c3","}",";","}"],"func_documentation_string":"Order coordinates to have the first coordinate in the array as the nearest to a given\ncoordinate 'c'. The second and third are not ordered, but randomly added.\n\n@param c\n@param coordinate1\n@param coordinate2\n@param coordinate3\n@return","func_documentation_tokens":["Order","coordinates","to","have","the","first","coordinate","in","the","array","as","the","nearest","to","a","given","coordinate","c",".","The","second","and","third","are","not","ordered","but","randomly","added","."],"label":0,"text":"Order coordinates to have the first coordinate in the array as the nearest to a given\ncoordinate 'c'. The second and third are not ordered, but randomly added.\n\n@param c\n@param coordinate1\n@param coordinate2\n@param coordinate3\n@return[SEP]private Coordinate[] getOrderedNodes( Coordinate c, Coordinate coordinate1, Coordinate coordinate2, Coordinate coordinate3 ) {\n        double d = distance3d(c, coordinate1, null);\n        Coordinate nearest = coordinate1;\n        Coordinate c2 = coordinate2;\n        Coordinate c3 = coordinate3;\n\n        double d2 = distance3d(c, coordinate2, null);\n        if (d2 < d) {\n            nearest = coordinate2;\n            d = d2;\n            c2 = coordinate1;\n            c3 = coordinate3;\n        }\n        double d3 = distance3d(c, coordinate3, null);\n        if (d3 < d) {\n            nearest = coordinate3;\n            c2 = coordinate1;\n            c3 = coordinate2;\n        }\n        return new Coordinate[]{nearest, c2, c3};\n    }"}
{"func_code_string":"public Matrix multiply(double k)\n    {\n        double pv[][] = new double[nRows][nCols]; \/\/ product values\n\n        \/\/ Compute values of the product.\n        for (int r = 0; r < nRows; ++r) {\n            for (int c = 0; c < nCols; ++c) {\n                pv[r][c] = k*values[r][c];\n            }\n        }\n\n        return new Matrix(pv);\n    }","func_code_tokens":["public","Matrix","multiply","(","double","k",")","{","double","pv","[","]","[","]","=","new","double","[","nRows","]","[","nCols","]",";","\/\/ product values","\/\/ Compute values of the product.","for","(","int","r","=","0",";","r","<","nRows",";","++","r",")","{","for","(","int","c","=","0",";","c","<","nCols",";","++","c",")","{","pv","[","r","]","[","c","]","=","k","*","values","[","r","]","[","c","]",";","}","}","return","new","Matrix","(","pv",")",";","}"],"func_documentation_string":"Multiply this matrix by a constant.\n@param k the constant\n@return the product matrix","func_documentation_tokens":["Multiply","this","matrix","by","a","constant","."],"label":1,"text":"Multiply this matrix by a constant.\n@param k the constant\n@return the product matrix[SEP]public Matrix multiply(double k)\n    {\n        double pv[][] = new double[nRows][nCols]; \/\/ product values\n\n        \/\/ Compute values of the product.\n        for (int r = 0; r < nRows; ++r) {\n            for (int c = 0; c < nCols; ++c) {\n                pv[r][c] = k*values[r][c];\n            }\n        }\n\n        return new Matrix(pv);\n    }"}
{"func_code_string":"public Matrix multiply(Matrix m) throws MatrixException\n    {\n        \/\/ Validate m's dimensions.\n        if (nCols != m.nRows) {\n            throw new MatrixException(\n                                MatrixException.INVALID_DIMENSIONS);\n        }\n\n        double pv[][] = new double[nRows][m.nCols];  \/\/ product values\n\n        \/\/ Compute values of the product.\n        for (int r = 0; r < nRows; ++r) {\n            for (int c = 0; c < m.nCols; ++c) {\n                double dot = 0;\n                for (int k = 0; k < nCols; ++k) {\n                    dot += values[r][k] * m.values[k][c];\n                }\n                pv[r][c] = dot;\n            }\n        }\n\n        return new Matrix(pv);\n    }","func_code_tokens":["public","Matrix","multiply","(","Matrix","m",")","throws","MatrixException","{","\/\/ Validate m's dimensions.","if","(","nCols","!=","m",".","nRows",")","{","throw","new","MatrixException","(","MatrixException",".","INVALID_DIMENSIONS",")",";","}","double","pv","[","]","[","]","=","new","double","[","nRows","]","[","m",".","nCols","]",";","\/\/ product values","\/\/ Compute values of the product.","for","(","int","r","=","0",";","r","<","nRows",";","++","r",")","{","for","(","int","c","=","0",";","c","<","m",".","nCols",";","++","c",")","{","double","dot","=","0",";","for","(","int","k","=","0",";","k","<","nCols",";","++","k",")","{","dot","+=","values","[","r","]","[","k","]","*","m",".","values","[","k","]","[","c","]",";","}","pv","[","r","]","[","c","]","=","dot",";","}","}","return","new","Matrix","(","pv",")",";","}"],"func_documentation_string":"Multiply this matrix by another matrix.\n@param m the matrix multiplier\n@return the product matrix\n@throws numbercruncher.MatrixException for invalid size","func_documentation_tokens":["Multiply","this","matrix","by","another","matrix","."],"label":1,"text":"Multiply this matrix by another matrix.\n@param m the matrix multiplier\n@return the product matrix\n@throws numbercruncher.MatrixException for invalid size[SEP]public Matrix multiply(Matrix m) throws MatrixException\n    {\n        \/\/ Validate m's dimensions.\n        if (nCols != m.nRows) {\n            throw new MatrixException(\n                                MatrixException.INVALID_DIMENSIONS);\n        }\n\n        double pv[][] = new double[nRows][m.nCols];  \/\/ product values\n\n        \/\/ Compute values of the product.\n        for (int r = 0; r < nRows; ++r) {\n            for (int c = 0; c < m.nCols; ++c) {\n                double dot = 0;\n                for (int k = 0; k < nCols; ++k) {\n                    dot += values[r][k] * m.values[k][c];\n                }\n                pv[r][c] = dot;\n            }\n        }\n\n        return new Matrix(pv);\n    }"}
{"func_code_string":"public static double[] linearReg(double[] xData, double[] yData) {\n        sameArrayLen(xData, yData);\n        double sumYValue = 0;\n        double meanYValue = 0;\n        double sumXValue = 0;\n        double meanXValue = 0;\n        double sumX = 0;\n        double sumY = 0;\n        double prod = 0;\n        double NODATA = -9999;\n        int nstat = xData.length;\n        double[] regCoef = new double[3]; \/\/(intercept, gradient, r?)\n        int counter = 0;\n        \/\/calculating sums\n        for (int i = 0; i < nstat; i++) {\n            if ((yData[i] != NODATA) && (xData[i] != NODATA)) {\n                sumYValue += yData[i];\n                sumXValue += xData[i];\n                counter++;\n            }\n        }\n        \/\/calculating means\n        meanYValue = sumYValue \/ counter;\n        meanXValue = sumXValue \/ counter;\n\n        \/\/calculating regression coefficients\n        for (int i = 0; i < nstat; i++) {\n            if ((yData[i] != NODATA) && (xData[i] != NODATA)) {\n                sumX += Math.pow((xData[i] - meanXValue), 2);\n                sumY += Math.pow((yData[i] - meanYValue), 2);\n                prod += ((xData[i] - meanXValue) * (yData[i] - meanYValue));\n            }\n        }\n        if (sumX > 0 && sumY > 0) {\n            regCoef[1] = prod \/ sumX;  \/\/gradient\n            regCoef[0] = meanYValue - regCoef[1] * meanXValue; \/\/intercept\n            regCoef[2] = Math.pow((prod \/ Math.sqrt(sumX * sumY)), 2); \/\/r?\n        } else {\n            regCoef[1] = 0;\n            regCoef[0] = 0;\n            regCoef[2] = 0;\n        }\n        return regCoef;\n    }","func_code_tokens":["public","static","double","[","]","linearReg","(","double","[","]","xData",",","double","[","]","yData",")","{","sameArrayLen","(","xData",",","yData",")",";","double","sumYValue","=","0",";","double","meanYValue","=","0",";","double","sumXValue","=","0",";","double","meanXValue","=","0",";","double","sumX","=","0",";","double","sumY","=","0",";","double","prod","=","0",";","double","NODATA","=","-","9999",";","int","nstat","=","xData",".","length",";","double","[","]","regCoef","=","new","double","[","3","]",";","\/\/(intercept, gradient, r?)","int","counter","=","0",";","\/\/calculating sums","for","(","int","i","=","0",";","i","<","nstat",";","i","++",")","{","if","(","(","yData","[","i","]","!=","NODATA",")","&&","(","xData","[","i","]","!=","NODATA",")",")","{","sumYValue","+=","yData","[","i","]",";","sumXValue","+=","xData","[","i","]",";","counter","++",";","}","}","\/\/calculating means","meanYValue","=","sumYValue","\/","counter",";","meanXValue","=","sumXValue","\/","counter",";","\/\/calculating regression coefficients","for","(","int","i","=","0",";","i","<","nstat",";","i","++",")","{","if","(","(","yData","[","i","]","!=","NODATA",")","&&","(","xData","[","i","]","!=","NODATA",")",")","{","sumX","+=","Math",".","pow","(","(","xData","[","i","]","-","meanXValue",")",",","2",")",";","sumY","+=","Math",".","pow","(","(","yData","[","i","]","-","meanYValue",")",",","2",")",";","prod","+=","(","(","xData","[","i","]","-","meanXValue",")","*","(","yData","[","i","]","-","meanYValue",")",")",";","}","}","if","(","sumX",">","0","&&","sumY",">","0",")","{","regCoef","[","1","]","=","prod","\/","sumX",";","\/\/gradient","regCoef","[","0","]","=","meanYValue","-","regCoef","[","1","]","*","meanXValue",";","\/\/intercept","regCoef","[","2","]","=","Math",".","pow","(","(","prod","\/","Math",".","sqrt","(","sumX","*","sumY",")",")",",","2",")",";","\/\/r?","}","else","{","regCoef","[","1","]","=","0",";","regCoef","[","0","]","=","0",";","regCoef","[","2","]","=","0",";","}","return","regCoef",";","}"],"func_documentation_string":"Calcs coefficients of linear regression between x, y data\n@param xData the independent data array (x)\n@param yData the dependent data array (y)\n@return (intercept, gradient, r?)","func_documentation_tokens":["Calcs","coefficients","of","linear","regression","between","x","y","data"],"label":1,"text":"Calcs coefficients of linear regression between x, y data\n@param xData the independent data array (x)\n@param yData the dependent data array (y)\n@return (intercept, gradient, r?)[SEP]public static double[] linearReg(double[] xData, double[] yData) {\n        sameArrayLen(xData, yData);\n        double sumYValue = 0;\n        double meanYValue = 0;\n        double sumXValue = 0;\n        double meanXValue = 0;\n        double sumX = 0;\n        double sumY = 0;\n        double prod = 0;\n        double NODATA = -9999;\n        int nstat = xData.length;\n        double[] regCoef = new double[3]; \/\/(intercept, gradient, r?)\n        int counter = 0;\n        \/\/calculating sums\n        for (int i = 0; i < nstat; i++) {\n            if ((yData[i] != NODATA) && (xData[i] != NODATA)) {\n                sumYValue += yData[i];\n                sumXValue += xData[i];\n                counter++;\n            }\n        }\n        \/\/calculating means\n        meanYValue = sumYValue \/ counter;\n        meanXValue = sumXValue \/ counter;\n\n        \/\/calculating regression coefficients\n        for (int i = 0; i < nstat; i++) {\n            if ((yData[i] != NODATA) && (xData[i] != NODATA)) {\n                sumX += Math.pow((xData[i] - meanXValue), 2);\n                sumY += Math.pow((yData[i] - meanYValue), 2);\n                prod += ((xData[i] - meanXValue) * (yData[i] - meanYValue));\n            }\n        }\n        if (sumX > 0 && sumY > 0) {\n            regCoef[1] = prod \/ sumX;  \/\/gradient\n            regCoef[0] = meanYValue - regCoef[1] * meanXValue; \/\/intercept\n            regCoef[2] = Math.pow((prod \/ Math.sqrt(sumX * sumY)), 2); \/\/r?\n        } else {\n            regCoef[1] = 0;\n            regCoef[0] = 0;\n            regCoef[2] = 0;\n        }\n        return regCoef;\n    }"}
{"func_code_string":"private void parseCommandLineArgs(String[] args) throws ConfigurationException {\r\n        if (args == null || args.length == 0) {\r\n            return;\r\n        }\r\n        logger.info(\"Parsing command line arguments\");\r\n        m_commandLineArgs = args;\r\n        \r\n        try {\r\n            for (int inx = 0; inx < args.length; inx++) {\r\n                String arg = args[inx];\r\n                if (arg.equals(\"-?\") || arg.equalsIgnoreCase(\"-h\") || arg.equalsIgnoreCase(\"-help\")) {\r\n                    System.out.println(\"See documentation and doradus.yaml for help.\");\r\n                    System.exit(0);\r\n                }\r\n                Utils.require(arg.charAt(0) == '-', \"Unrecognized argument: %s\", arg);\r\n                Utils.require(inx + 1 < args.length, \"A value is expected after: %s\", arg);\r\n                String name = arg.substring(1);\r\n                String value = args[++inx];\r\n                setCommandLineParam(name, value);\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Failed to parse command line arguments\", e);\r\n            throw new ConfigurationException(\"Failed to parse command line arguments\", e);\r\n        }\r\n    }","func_code_tokens":["private","void","parseCommandLineArgs","(","String","[","]","args",")","throws","ConfigurationException","{","if","(","args","==","null","||","args",".","length","==","0",")","{","return",";","}","logger",".","info","(","\"Parsing command line arguments\"",")",";","m_commandLineArgs","=","args",";","try","{","for","(","int","inx","=","0",";","inx","<","args",".","length",";","inx","++",")","{","String","arg","=","args","[","inx","]",";","if","(","arg",".","equals","(","\"-?\"",")","||","arg",".","equalsIgnoreCase","(","\"-h\"",")","||","arg",".","equalsIgnoreCase","(","\"-help\"",")",")","{","System",".","out",".","println","(","\"See documentation and doradus.yaml for help.\"",")",";","System",".","exit","(","0",")",";","}","Utils",".","require","(","arg",".","charAt","(","0",")","==","'","'",",","\"Unrecognized argument: %s\"",",","arg",")",";","Utils",".","require","(","inx","+","1","<","args",".","length",",","\"A value is expected after: %s\"",",","arg",")",";","String","name","=","arg",".","substring","(","1",")",";","String","value","=","args","[","++","inx","]",";","setCommandLineParam","(","name",",","value",")",";","}","}","catch","(","Exception","e",")","{","logger",".","error","(","\"Failed to parse command line arguments\"",",","e",")",";","throw","new","ConfigurationException","(","\"Failed to parse command line arguments\"",",","e",")",";","}","}"],"func_documentation_string":"Overrides the loaded\/default settings by command line arguments.","func_documentation_tokens":["Overrides","the","loaded","\/","default","settings","by","command","line","arguments","."],"label":1,"text":"Overrides the loaded\/default settings by command line arguments.[SEP]private void parseCommandLineArgs(String[] args) throws ConfigurationException {\r\n        if (args == null || args.length == 0) {\r\n            return;\r\n        }\r\n        logger.info(\"Parsing command line arguments\");\r\n        m_commandLineArgs = args;\r\n        \r\n        try {\r\n            for (int inx = 0; inx < args.length; inx++) {\r\n                String arg = args[inx];\r\n                if (arg.equals(\"-?\") || arg.equalsIgnoreCase(\"-h\") || arg.equalsIgnoreCase(\"-help\")) {\r\n                    System.out.println(\"See documentation and doradus.yaml for help.\");\r\n                    System.exit(0);\r\n                }\r\n                Utils.require(arg.charAt(0) == '-', \"Unrecognized argument: %s\", arg);\r\n                Utils.require(inx + 1 < args.length, \"A value is expected after: %s\", arg);\r\n                String name = arg.substring(1);\r\n                String value = args[++inx];\r\n                setCommandLineParam(name, value);\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Failed to parse command line arguments\", e);\r\n            throw new ConfigurationException(\"Failed to parse command line arguments\", e);\r\n        }\r\n    }"}
{"func_code_string":"@Override\n\tpublic String getRequestValue(final Request request) {\n\t\tif (isPresent(request)) {\n\t\t\t\/\/ User entered a valid date\n\t\t\tString dateParam = request.getParameter(getId() + \"-date\");\n\t\t\tif (dateParam == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t\/\/ Validate Transfer Date Format - YYYY-MM-DD\n\t\t\tif (dateParam.length() != INTERNAL_DATE_TOTAL_CHARS || dateParam.charAt(\n\t\t\t\t\tINTERNAL_DASH1_POS) != '-'\n\t\t\t\t\t|| dateParam.charAt(INTERNAL_DASH2_POS) != '-') {\n\t\t\t\tLOG.warn(\"Date parameter is not in the format yyyy-MM-dd (\" + dateParam\n\t\t\t\t\t\t+ \") and will be treated as null.\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t\/\/ Transform YYYY-MM-DD to YYYYMMDD\n\t\t\tStringBuffer buf = new StringBuffer(DATE_TOTAL_CHARS);\n\t\t\tbuf.append(dateParam.substring(INTERNAL_YEAR_START, INTERNAL_YEAR_END));\n\t\t\tbuf.append(dateParam.substring(INTERNAL_MONTH_START, INTERNAL_MONTH_END));\n\t\t\tbuf.append(dateParam.substring(INTERNAL_DAY_START, INTERNAL_DAY_END));\n\n\t\t\tString dateFormat = buf.toString();\n\n\t\t\t\/\/ Validate the date\n\t\t\tif (!isValidPartialDateStringFormat(dateFormat, THEME_PADDING_CHAR)) {\n\t\t\t\tLOG.warn(\"Date parameter (\"\n\t\t\t\t\t\t+ dateParam\n\t\t\t\t\t\t+ \") could not be transformed from YYYY-MM-DD to the format YYYYMMDD and will be treated as null.\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t\/\/ Convert from Theme padding character to the correct padding character\n\t\t\treturn dateFormat.replace(THEME_PADDING_CHAR, getPaddingChar());\n\t\t} else {\n\t\t\treturn getValue();\n\t\t}\n\t}","func_code_tokens":["@","Override","public","String","getRequestValue","(","final","Request","request",")","{","if","(","isPresent","(","request",")",")","{","\/\/ User entered a valid date","String","dateParam","=","request",".","getParameter","(","getId","(",")","+","\"-date\"",")",";","if","(","dateParam","==","null",")","{","return","null",";","}","\/\/ Validate Transfer Date Format - YYYY-MM-DD","if","(","dateParam",".","length","(",")","!=","INTERNAL_DATE_TOTAL_CHARS","||","dateParam",".","charAt","(","INTERNAL_DASH1_POS",")","!=","'","'","||","dateParam",".","charAt","(","INTERNAL_DASH2_POS",")","!=","'","'",")","{","LOG",".","warn","(","\"Date parameter is not in the format yyyy-MM-dd (\"","+","dateParam","+","\") and will be treated as null.\"",")",";","return","null",";","}","\/\/ Transform YYYY-MM-DD to YYYYMMDD","StringBuffer","buf","=","new","StringBuffer","(","DATE_TOTAL_CHARS",")",";","buf",".","append","(","dateParam",".","substring","(","INTERNAL_YEAR_START",",","INTERNAL_YEAR_END",")",")",";","buf",".","append","(","dateParam",".","substring","(","INTERNAL_MONTH_START",",","INTERNAL_MONTH_END",")",")",";","buf",".","append","(","dateParam",".","substring","(","INTERNAL_DAY_START",",","INTERNAL_DAY_END",")",")",";","String","dateFormat","=","buf",".","toString","(",")",";","\/\/ Validate the date","if","(","!","isValidPartialDateStringFormat","(","dateFormat",",","THEME_PADDING_CHAR",")",")","{","LOG",".","warn","(","\"Date parameter (\"","+","dateParam","+","\") could not be transformed from YYYY-MM-DD to the format YYYYMMDD and will be treated as null.\"",")",";","return","null",";","}","\/\/ Convert from Theme padding character to the correct padding character","return","dateFormat",".","replace","(","THEME_PADDING_CHAR",",","getPaddingChar","(",")",")",";","}","else","{","return","getValue","(",")",";","}","}"],"func_documentation_string":"{@inheritDoc}","func_documentation_tokens":["{"],"label":1,"text":"{@inheritDoc}[SEP]@Override\n\tpublic String getRequestValue(final Request request) {\n\t\tif (isPresent(request)) {\n\t\t\t\/\/ User entered a valid date\n\t\t\tString dateParam = request.getParameter(getId() + \"-date\");\n\t\t\tif (dateParam == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t\/\/ Validate Transfer Date Format - YYYY-MM-DD\n\t\t\tif (dateParam.length() != INTERNAL_DATE_TOTAL_CHARS || dateParam.charAt(\n\t\t\t\t\tINTERNAL_DASH1_POS) != '-'\n\t\t\t\t\t|| dateParam.charAt(INTERNAL_DASH2_POS) != '-') {\n\t\t\t\tLOG.warn(\"Date parameter is not in the format yyyy-MM-dd (\" + dateParam\n\t\t\t\t\t\t+ \") and will be treated as null.\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t\/\/ Transform YYYY-MM-DD to YYYYMMDD\n\t\t\tStringBuffer buf = new StringBuffer(DATE_TOTAL_CHARS);\n\t\t\tbuf.append(dateParam.substring(INTERNAL_YEAR_START, INTERNAL_YEAR_END));\n\t\t\tbuf.append(dateParam.substring(INTERNAL_MONTH_START, INTERNAL_MONTH_END));\n\t\t\tbuf.append(dateParam.substring(INTERNAL_DAY_START, INTERNAL_DAY_END));\n\n\t\t\tString dateFormat = buf.toString();\n\n\t\t\t\/\/ Validate the date\n\t\t\tif (!isValidPartialDateStringFormat(dateFormat, THEME_PADDING_CHAR)) {\n\t\t\t\tLOG.warn(\"Date parameter (\"\n\t\t\t\t\t\t+ dateParam\n\t\t\t\t\t\t+ \") could not be transformed from YYYY-MM-DD to the format YYYYMMDD and will be treated as null.\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t\/\/ Convert from Theme padding character to the correct padding character\n\t\t\treturn dateFormat.replace(THEME_PADDING_CHAR, getPaddingChar());\n\t\t} else {\n\t\t\treturn getValue();\n\t\t}\n\t}"}
{"func_code_string":"private void convertHTMLCode(ArrayList<ArrayList<TextPiece>> wordsByPage) {\r\n\tDocInfo docInfo = new DocInfo();\r\n\tString[] html2Char = docInfo.getHtml2CharMapping(); \/\/ Only define this\r\n\t\t\t\t\t\t\t    \/\/ mapping string\r\n\t\t\t\t\t\t\t    \/\/ when we detect\r\n\t\t\t\t\t\t\t    \/\/ the files in HTML\r\n\t\t\t\t\t\t\t    \/\/ codes\r\n\tint pageNum = 0;\r\n\r\n\tfor (ArrayList<TextPiece> wordsOfAPage : wordsByPage) {\r\n\t    pageNum++;\r\n\t    for (int i = 0; i < wordsOfAPage.size(); i++) {\r\n\t\tTextPiece currentWord = wordsOfAPage.get(i);\r\n\t\tString realText = \"\";\r\n\t\tString textinHTMLCode = currentWord.getText();\r\n\r\n\t    }\r\n\t}\r\n    }","func_code_tokens":["private","void","convertHTMLCode","(","ArrayList","<","ArrayList","<","TextPiece",">",">","wordsByPage",")","{","DocInfo","docInfo","=","new","DocInfo","(",")",";","String","[","]","html2Char","=","docInfo",".","getHtml2CharMapping","(",")",";","\/\/ Only define this\r","\/\/ mapping string\r","\/\/ when we detect\r","\/\/ the files in HTML\r","\/\/ codes\r","int","pageNum","=","0",";","for","(","ArrayList","<","TextPiece",">","wordsOfAPage",":","wordsByPage",")","{","pageNum","++",";","for","(","int","i","=","0",";","i","<","wordsOfAPage",".","size","(",")",";","i","++",")","{","TextPiece","currentWord","=","wordsOfAPage",".","get","(","i",")",";","String","realText","=","\"\"",";","String","textinHTMLCode","=","currentWord",".","getText","(",")",";","}","}","}"],"func_documentation_string":"TODO: NOT finished yet Converts HTML code back to the real characters;\n\n@param wordsByPage\nthe extracted texts in the word level in a document","func_documentation_tokens":["TODO",":","NOT","finished","yet","Converts","HTML","code","back","to","the","real","characters",";"],"label":0,"text":"TODO: NOT finished yet Converts HTML code back to the real characters;\n\n@param wordsByPage\nthe extracted texts in the word level in a document[SEP]private void convertHTMLCode(ArrayList<ArrayList<TextPiece>> wordsByPage) {\r\n\tDocInfo docInfo = new DocInfo();\r\n\tString[] html2Char = docInfo.getHtml2CharMapping(); \/\/ Only define this\r\n\t\t\t\t\t\t\t    \/\/ mapping string\r\n\t\t\t\t\t\t\t    \/\/ when we detect\r\n\t\t\t\t\t\t\t    \/\/ the files in HTML\r\n\t\t\t\t\t\t\t    \/\/ codes\r\n\tint pageNum = 0;\r\n\r\n\tfor (ArrayList<TextPiece> wordsOfAPage : wordsByPage) {\r\n\t    pageNum++;\r\n\t    for (int i = 0; i < wordsOfAPage.size(); i++) {\r\n\t\tTextPiece currentWord = wordsOfAPage.get(i);\r\n\t\tString realText = \"\";\r\n\t\tString textinHTMLCode = currentWord.getText();\r\n\r\n\t    }\r\n\t}\r\n    }"}
{"func_code_string":"public static void replaceFile(String fileName, final Map<String, List<Replacer>> profiles, Charset charset)\n      throws Exception, FileNotFoundException {\n    File file = new File(fileName);\n    if (file.isFile() && !file.isHidden()) {\n      List<Replacer> replacers = profiles.get(Strings.substringAfterLast(fileName, \".\"));\n      if (null == replacers) { return; }\n      logger.info(\"processing {}\", fileName);\n      String filecontent = Files.readFileToString(file, charset);\n      filecontent = Replacer.process(filecontent, replacers);\n      writeToFile(filecontent, fileName, charset);\n    } else {\n      String[] subFiles = file.list(new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n          if (dir.isDirectory()) return true;\n          boolean matched = false;\n          for (String key : profiles.keySet()) {\n            matched = name.endsWith(key);\n            if (matched) return true;\n          }\n          return false;\n        }\n      });\n      if (null != subFiles) {\n        for (int i = 0; i < subFiles.length; i++) {\n          replaceFile(fileName + '\/' + subFiles[i], profiles, charset);\n        }\n      }\n    }\n  }","func_code_tokens":["public","static","void","replaceFile","(","String","fileName",",","final","Map","<","String",",","List","<","Replacer",">",">","profiles",",","Charset","charset",")","throws","Exception",",","FileNotFoundException","{","File","file","=","new","File","(","fileName",")",";","if","(","file",".","isFile","(",")","&&","!","file",".","isHidden","(",")",")","{","List","<","Replacer",">","replacers","=","profiles",".","get","(","Strings",".","substringAfterLast","(","fileName",",","\".\"",")",")",";","if","(","null","==","replacers",")","{","return",";","}","logger",".","info","(","\"processing {}\"",",","fileName",")",";","String","filecontent","=","Files",".","readFileToString","(","file",",","charset",")",";","filecontent","=","Replacer",".","process","(","filecontent",",","replacers",")",";","writeToFile","(","filecontent",",","fileName",",","charset",")",";","}","else","{","String","[","]","subFiles","=","file",".","list","(","new","FilenameFilter","(",")","{","public","boolean","accept","(","File","dir",",","String","name",")","{","if","(","dir",".","isDirectory","(",")",")","return","true",";","boolean","matched","=","false",";","for","(","String","key",":","profiles",".","keySet","(",")",")","{","matched","=","name",".","endsWith","(","key",")",";","if","(","matched",")","return","true",";","}","return","false",";","}","}",")",";","if","(","null","!=","subFiles",")","{","for","(","int","i","=","0",";","i","<","subFiles",".","length",";","i","++",")","{","replaceFile","(","fileName","+","'","'","+","subFiles","[","i","]",",","profiles",",","charset",")",";","}","}","}","}"],"func_documentation_string":"<p>\nreplaceFile.\n<\/p>\n\n@param fileName a {@link java.lang.String} object.\n@param profiles a {@link java.util.Map} object.\n@param charset a {@link java.lang.String} object.\n@throws java.lang.Exception if any.\n@throws java.io.FileNotFoundException if any.","func_documentation_tokens":["<p",">","replaceFile",".","<","\/","p",">"],"label":0,"text":"<p>\nreplaceFile.\n<\/p>\n\n@param fileName a {@link java.lang.String} object.\n@param profiles a {@link java.util.Map} object.\n@param charset a {@link java.lang.String} object.\n@throws java.lang.Exception if any.\n@throws java.io.FileNotFoundException if any.[SEP]public static void replaceFile(String fileName, final Map<String, List<Replacer>> profiles, Charset charset)\n      throws Exception, FileNotFoundException {\n    File file = new File(fileName);\n    if (file.isFile() && !file.isHidden()) {\n      List<Replacer> replacers = profiles.get(Strings.substringAfterLast(fileName, \".\"));\n      if (null == replacers) { return; }\n      logger.info(\"processing {}\", fileName);\n      String filecontent = Files.readFileToString(file, charset);\n      filecontent = Replacer.process(filecontent, replacers);\n      writeToFile(filecontent, fileName, charset);\n    } else {\n      String[] subFiles = file.list(new FilenameFilter() {\n        public boolean accept(File dir, String name) {\n          if (dir.isDirectory()) return true;\n          boolean matched = false;\n          for (String key : profiles.keySet()) {\n            matched = name.endsWith(key);\n            if (matched) return true;\n          }\n          return false;\n        }\n      });\n      if (null != subFiles) {\n        for (int i = 0; i < subFiles.length; i++) {\n          replaceFile(fileName + '\/' + subFiles[i], profiles, charset);\n        }\n      }\n    }\n  }"}
{"func_code_string":"public static void extractZip(File zip, File toDir) throws IOException{\n\t\tif(!toDir.exists()) {\n\t\t\tthrow new IOException(\"Directory '\" + toDir + \"' does not exist.\");\n\t\t}\n\n\t\ttry (ZipFile zipFile = new ZipFile(zip)) {\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tZipEntry entry = entries.nextElement();\n\n\t\t\t\tFile target = new File(toDir, entry.getName());\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\t\/\/ Assume directories are stored parents first then children.\n\t\t\t\t\t\/\/logger.info(\"Extracting directory: \" + entry.getName());\n\t\t\t\t\t\/\/ This is not robust, just for demonstration purposes.\n\t\t\t\t\tif(!target.mkdirs()) {\n\t\t\t\t\t\tlogger.warning(\"Could not create directory \" + target);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t\/\/ zips can contain nested files in sub-dirs without separate entries for the directories\n\t\t\t\tif(!target.getParentFile().exists() && !target.getParentFile().mkdirs()) {\n\t\t\t\t\tlogger.warning(\"Could not create directory \" + target.getParentFile());\n\t\t\t\t}\n\n\t\t\t\t\/\/logger.info(\"Extracting file: \" + entry.getName());\n\t\t\t\ttry (InputStream inputStream = zipFile.getInputStream(entry)) {\n\t\t\t\t\ttry (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target))) {\n\t\t\t\t\t\tIOUtils.copy(inputStream, outputStream);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FileNotFoundException | NoSuchFileException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\tthrow new IOException(\"While extracting file \" + zip + \" to \" + toDir, e);\n\t\t}\n\t}","func_code_tokens":["public","static","void","extractZip","(","File","zip",",","File","toDir",")","throws","IOException","{","if","(","!","toDir",".","exists","(",")",")","{","throw","new","IOException","(","\"Directory '\"","+","toDir","+","\"' does not exist.\"",")",";","}","try","(","ZipFile","zipFile","=","new","ZipFile","(","zip",")",")","{","Enumeration","<","?","extends","ZipEntry",">","entries","=","zipFile",".","entries","(",")",";","while","(","entries",".","hasMoreElements","(",")",")","{","ZipEntry","entry","=","entries",".","nextElement","(",")",";","File","target","=","new","File","(","toDir",",","entry",".","getName","(",")",")",";","if","(","entry",".","isDirectory","(",")",")","{","\/\/ Assume directories are stored parents first then children.","\/\/logger.info(\"Extracting directory: \" + entry.getName());","\/\/ This is not robust, just for demonstration purposes.","if","(","!","target",".","mkdirs","(",")",")","{","logger",".","warning","(","\"Could not create directory \"","+","target",")",";","}","continue",";","}","\/\/ zips can contain nested files in sub-dirs without separate entries for the directories","if","(","!","target",".","getParentFile","(",")",".","exists","(",")","&&","!","target",".","getParentFile","(",")",".","mkdirs","(",")",")","{","logger",".","warning","(","\"Could not create directory \"","+","target",".","getParentFile","(",")",")",";","}","\/\/logger.info(\"Extracting file: \" + entry.getName());","try","(","InputStream","inputStream","=","zipFile",".","getInputStream","(","entry",")",")","{","try","(","BufferedOutputStream","outputStream","=","new","BufferedOutputStream","(","new","FileOutputStream","(","target",")",")",")","{","IOUtils",".","copy","(","inputStream",",","outputStream",")",";","}","}","}","}","catch","(","FileNotFoundException","|","NoSuchFileException","e",")","{","throw","e",";","}","catch","(","IOException","e",")","{","throw","new","IOException","(","\"While extracting file \"","+","zip","+","\" to \"","+","toDir",",","e",")",";","}","}"],"func_documentation_string":"Extracts all files in the specified ZIP file and stores them in the\ndenoted directory. The directory needs to exist before running this method.\n\nNote: nested ZIP files are not extracted here.\n\n@param zip The zip-file to process\n@param toDir Target directory, should already exist.\n\n@throws IOException Thrown if files can not be read or any other error occurs while handling the Zip-files","func_documentation_tokens":["Extracts","all","files","in","the","specified","ZIP","file","and","stores","them","in","the","denoted","directory",".","The","directory","needs","to","exist","before","running","this","method","."],"label":1,"text":"Extracts all files in the specified ZIP file and stores them in the\ndenoted directory. The directory needs to exist before running this method.\n\nNote: nested ZIP files are not extracted here.\n\n@param zip The zip-file to process\n@param toDir Target directory, should already exist.\n\n@throws IOException Thrown if files can not be read or any other error occurs while handling the Zip-files[SEP]public static void extractZip(File zip, File toDir) throws IOException{\n\t\tif(!toDir.exists()) {\n\t\t\tthrow new IOException(\"Directory '\" + toDir + \"' does not exist.\");\n\t\t}\n\n\t\ttry (ZipFile zipFile = new ZipFile(zip)) {\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tZipEntry entry = entries.nextElement();\n\n\t\t\t\tFile target = new File(toDir, entry.getName());\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\t\/\/ Assume directories are stored parents first then children.\n\t\t\t\t\t\/\/logger.info(\"Extracting directory: \" + entry.getName());\n\t\t\t\t\t\/\/ This is not robust, just for demonstration purposes.\n\t\t\t\t\tif(!target.mkdirs()) {\n\t\t\t\t\t\tlogger.warning(\"Could not create directory \" + target);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t\/\/ zips can contain nested files in sub-dirs without separate entries for the directories\n\t\t\t\tif(!target.getParentFile().exists() && !target.getParentFile().mkdirs()) {\n\t\t\t\t\tlogger.warning(\"Could not create directory \" + target.getParentFile());\n\t\t\t\t}\n\n\t\t\t\t\/\/logger.info(\"Extracting file: \" + entry.getName());\n\t\t\t\ttry (InputStream inputStream = zipFile.getInputStream(entry)) {\n\t\t\t\t\ttry (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target))) {\n\t\t\t\t\t\tIOUtils.copy(inputStream, outputStream);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FileNotFoundException | NoSuchFileException e) {\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\tthrow new IOException(\"While extracting file \" + zip + \" to \" + toDir, e);\n\t\t}\n\t}"}
{"func_code_string":"public static void extractZip(InputStream zip, final File toDir) throws IOException{\n\t\tif(!toDir.exists()) {\n\t\t\tthrow new IOException(\"Directory '\" + toDir + \"' does not exist.\");\n\t\t}\n\n\t\t\/\/ Use the ZipFileVisitor to walk all the entries in the Zip-Stream and create\n\t\t\/\/ directories and files accordingly\n\t\tnew ZipFileVisitor() {\n\t\t\t@Override\n\t\t\tpublic void visit(ZipEntry entry, InputStream data) throws IOException {\n\t\t\t\tFile target = new File(toDir, entry.getName());\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\t\/\/ Assume directories are stored parents first then children.\n\t\t\t\t\t\/\/logger.info(\"Extracting directory: \" + entry.getName() + \" to \" + target);\n\t\t\t\t\t\/\/ This is not robust, just for demonstration purposes.\n\t\t\t\t\tif(!target.mkdirs()) {\n\t\t\t\t\t\tlogger.warning(\"Could not create directory \" + target);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t\/\/ zips can contain nested files in sub-dirs without separate entries for the directories\n\t\t\t\tif(!target.getParentFile().exists() && !target.getParentFile().mkdirs()) {\n\t\t\t\t\tlogger.warning(\"Could not create directory \" + target.getParentFile());\n\t\t\t\t}\n\n\t\t\t\t\/\/ it seems we cannot use IOUtils\/FileUtils to copy as they close the stream\n\t\t\t\tint size;\n\t\t\t\tbyte[] buffer = new byte[2048];\n\t\t\t\ttry (OutputStream fout = new BufferedOutputStream(new FileOutputStream(target), buffer.length)) {\n\t                while ((size = data.read(buffer, 0, buffer.length)) != -1) {\n\t                    fout.write(buffer, 0, size);\n\t                }\n\t\t\t\t}\n\t\t\t}\n\t\t}.walk(zip);\n\t}","func_code_tokens":["public","static","void","extractZip","(","InputStream","zip",",","final","File","toDir",")","throws","IOException","{","if","(","!","toDir",".","exists","(",")",")","{","throw","new","IOException","(","\"Directory '\"","+","toDir","+","\"' does not exist.\"",")",";","}","\/\/ Use the ZipFileVisitor to walk all the entries in the Zip-Stream and create","\/\/ directories and files accordingly","new","ZipFileVisitor","(",")","{","@","Override","public","void","visit","(","ZipEntry","entry",",","InputStream","data",")","throws","IOException","{","File","target","=","new","File","(","toDir",",","entry",".","getName","(",")",")",";","if","(","entry",".","isDirectory","(",")",")","{","\/\/ Assume directories are stored parents first then children.","\/\/logger.info(\"Extracting directory: \" + entry.getName() + \" to \" + target);","\/\/ This is not robust, just for demonstration purposes.","if","(","!","target",".","mkdirs","(",")",")","{","logger",".","warning","(","\"Could not create directory \"","+","target",")",";","}","return",";","}","\/\/ zips can contain nested files in sub-dirs without separate entries for the directories","if","(","!","target",".","getParentFile","(",")",".","exists","(",")","&&","!","target",".","getParentFile","(",")",".","mkdirs","(",")",")","{","logger",".","warning","(","\"Could not create directory \"","+","target",".","getParentFile","(",")",")",";","}","\/\/ it seems we cannot use IOUtils\/FileUtils to copy as they close the stream","int","size",";","byte","[","]","buffer","=","new","byte","[","2048","]",";","try","(","OutputStream","fout","=","new","BufferedOutputStream","(","new","FileOutputStream","(","target",")",",","buffer",".","length",")",")","{","while","(","(","size","=","data",".","read","(","buffer",",","0",",","buffer",".","length",")",")","!=","-","1",")","{","fout",".","write","(","buffer",",","0",",","size",")",";","}","}","}","}",".","walk","(","zip",")",";","}"],"func_documentation_string":"Extracts all files in the ZIP file passed as InputStream and stores them in the\ndenoted directory. The directory needs to exist before running this method.\n\nNote: nested ZIP files are not extracted here.\n\n@param zip An {@link InputStream} to read zipped files from\n@param toDir Target directory, should already exist.\n\n@throws IOException Thrown if files can not be read or any other error occurs while handling the Zip-files","func_documentation_tokens":["Extracts","all","files","in","the","ZIP","file","passed","as","InputStream","and","stores","them","in","the","denoted","directory",".","The","directory","needs","to","exist","before","running","this","method","."],"label":1,"text":"Extracts all files in the ZIP file passed as InputStream and stores them in the\ndenoted directory. The directory needs to exist before running this method.\n\nNote: nested ZIP files are not extracted here.\n\n@param zip An {@link InputStream} to read zipped files from\n@param toDir Target directory, should already exist.\n\n@throws IOException Thrown if files can not be read or any other error occurs while handling the Zip-files[SEP]public static void extractZip(InputStream zip, final File toDir) throws IOException{\n\t\tif(!toDir.exists()) {\n\t\t\tthrow new IOException(\"Directory '\" + toDir + \"' does not exist.\");\n\t\t}\n\n\t\t\/\/ Use the ZipFileVisitor to walk all the entries in the Zip-Stream and create\n\t\t\/\/ directories and files accordingly\n\t\tnew ZipFileVisitor() {\n\t\t\t@Override\n\t\t\tpublic void visit(ZipEntry entry, InputStream data) throws IOException {\n\t\t\t\tFile target = new File(toDir, entry.getName());\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\t\/\/ Assume directories are stored parents first then children.\n\t\t\t\t\t\/\/logger.info(\"Extracting directory: \" + entry.getName() + \" to \" + target);\n\t\t\t\t\t\/\/ This is not robust, just for demonstration purposes.\n\t\t\t\t\tif(!target.mkdirs()) {\n\t\t\t\t\t\tlogger.warning(\"Could not create directory \" + target);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t\/\/ zips can contain nested files in sub-dirs without separate entries for the directories\n\t\t\t\tif(!target.getParentFile().exists() && !target.getParentFile().mkdirs()) {\n\t\t\t\t\tlogger.warning(\"Could not create directory \" + target.getParentFile());\n\t\t\t\t}\n\n\t\t\t\t\/\/ it seems we cannot use IOUtils\/FileUtils to copy as they close the stream\n\t\t\t\tint size;\n\t\t\t\tbyte[] buffer = new byte[2048];\n\t\t\t\ttry (OutputStream fout = new BufferedOutputStream(new FileOutputStream(target), buffer.length)) {\n\t                while ((size = data.read(buffer, 0, buffer.length)) != -1) {\n\t                    fout.write(buffer, 0, size);\n\t                }\n\t\t\t\t}\n\t\t\t}\n\t\t}.walk(zip);\n\t}"}
{"func_code_string":"public <S> T manyToOneWithoutControl(final S source) {\r\n\t\ttry{ return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestinationWithoutControl(source); }\r\n\t\tcatch (Exception e) { return logAndReturnNull(e); }\r\n\t}","func_code_tokens":["public","<","S",">","T","manyToOneWithoutControl","(","final","S","source",")","{","try","{","return","this",".","<","T",",","S",">","getJMapper","(","relationalManyToOneMapper",",","source",")",".","getDestinationWithoutControl","(","source",")",";","}","catch","(","Exception","e",")","{","return","logAndReturnNull","(","e",")",";","}","}"],"func_documentation_string":"This method returns a new instance of Configured Class with this setting:\n<table summary =\"\">\n<tr>\n<td><code>NullPointerControl<\/code><\/td><td><code>NOT_ANY<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Destination<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Source<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr>\n<\/table>\n@param source instance of Target Class type that contains the data\n@return new instance of Configured Class\n@see NullPointerControl\n@see MappingType","func_documentation_tokens":["This","method","returns","a","new","instance","of","Configured","Class","with","this","setting",":","<table","summary","=",">","<tr",">","<td",">","<code",">","NullPointerControl<","\/","code",">","<","\/","td",">","<td",">","<code",">","NOT_ANY<","\/","code",">","<","\/","td",">","<","\/","tr",">","<tr",">","<td",">","<code",">","MappingType<","\/","code",">","of","Destination<","\/","td",">","<td",">","<code",">","ALL_FIELDS<","\/","code",">","<","\/","td",">","<","\/","tr",">","<tr",">","<td",">","<code",">","MappingType<","\/","code",">","of","Source<","\/","td",">","<td",">","<code",">","ALL_FIELDS<","\/","code",">","<","\/","td",">","<","\/","tr",">","<","\/","table",">"],"label":0,"text":"This method returns a new instance of Configured Class with this setting:\n<table summary =\"\">\n<tr>\n<td><code>NullPointerControl<\/code><\/td><td><code>NOT_ANY<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Destination<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Source<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr>\n<\/table>\n@param source instance of Target Class type that contains the data\n@return new instance of Configured Class\n@see NullPointerControl\n@see MappingType[SEP]public <S> T manyToOneWithoutControl(final S source) {\r\n\t\ttry{ return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestinationWithoutControl(source); }\r\n\t\tcatch (Exception e) { return logAndReturnNull(e); }\r\n\t}"}
{"func_code_string":"public static void xmlConversionTypeIncorrect(String conversionName,String xmlPath,String className,String type){\r\n\t\tthrow new XmlConversionTypeException(MSG.INSTANCE.message(xmlConversionTypeException,conversionName,xmlPath,className,type));\r\n\t}","func_code_tokens":["public","static","void","xmlConversionTypeIncorrect","(","String","conversionName",",","String","xmlPath",",","String","className",",","String","type",")","{","throw","new","XmlConversionTypeException","(","MSG",".","INSTANCE",".","message","(","xmlConversionTypeException",",","conversionName",",","xmlPath",",","className",",","type",")",")",";","}"],"func_documentation_string":"Thrown if conversion type is wrong.\n@param conversionName conversion name\n@param xmlPath xml path\n@param className class name\n@param type type","func_documentation_tokens":["Thrown","if","conversion","type","is","wrong","."],"label":0,"text":"Thrown if conversion type is wrong.\n@param conversionName conversion name\n@param xmlPath xml path\n@param className class name\n@param type type[SEP]public static void xmlConversionTypeIncorrect(String conversionName,String xmlPath,String className,String type){\r\n\t\tthrow new XmlConversionTypeException(MSG.INSTANCE.message(xmlConversionTypeException,conversionName,xmlPath,className,type));\r\n\t}"}
{"func_code_string":"public D getDestinationWithoutControl(D destination,final S source){\r\n        try {\r\n            return mapper.vVNotAllAll(destination, source);\r\n        } catch (Exception e) { \r\n        \tJmapperLog.error(e); \r\n        }\r\n        return null;\r\n\t}","func_code_tokens":["public","D","getDestinationWithoutControl","(","D","destination",",","final","S","source",")","{","try","{","return","mapper",".","vVNotAllAll","(","destination",",","source",")",";","}","catch","(","Exception","e",")","{","JmapperLog",".","error","(","e",")",";","}","return","null",";","}"],"func_documentation_string":"This Method returns the destination given in input enriched with data contained in source given in input<br>\nwith this setting:\n<table summary = \"\">\n<tr>\n<td><code>NullPointerControl<\/code><\/td><td><code>NOT_ANY<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Destination<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Source<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr>\n<\/table>\n@param destination instance to enrich\n@param source instance that contains the data\n@return destination enriched\n@see NullPointerControl\n@see MappingType","func_documentation_tokens":["This","Method","returns","the","destination","given","in","input","enriched","with","data","contained","in","source","given","in","input<br",">","with","this","setting",":","<table","summary","=",">","<tr",">","<td",">","<code",">","NullPointerControl<","\/","code",">","<","\/","td",">","<td",">","<code",">","NOT_ANY<","\/","code",">","<","\/","td",">","<","\/","tr",">","<tr",">","<td",">","<code",">","MappingType<","\/","code",">","of","Destination<","\/","td",">","<td",">","<code",">","ALL_FIELDS<","\/","code",">","<","\/","td",">","<","\/","tr",">","<tr",">","<td",">","<code",">","MappingType<","\/","code",">","of","Source<","\/","td",">","<td",">","<code",">","ALL_FIELDS<","\/","code",">","<","\/","td",">","<","\/","tr",">","<","\/","table",">"],"label":0,"text":"This Method returns the destination given in input enriched with data contained in source given in input<br>\nwith this setting:\n<table summary = \"\">\n<tr>\n<td><code>NullPointerControl<\/code><\/td><td><code>NOT_ANY<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Destination<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr><tr>\n<td><code>MappingType<\/code> of Source<\/td><td><code>ALL_FIELDS<\/code><\/td>\n<\/tr>\n<\/table>\n@param destination instance to enrich\n@param source instance that contains the data\n@return destination enriched\n@see NullPointerControl\n@see MappingType[SEP]public D getDestinationWithoutControl(D destination,final S source){\r\n        try {\r\n            return mapper.vVNotAllAll(destination, source);\r\n        } catch (Exception e) { \r\n        \tJmapperLog.error(e); \r\n        }\r\n        return null;\r\n\t}"}
{"func_code_string":"private static byte[] writeCsv(String[] columnHeaders, String[][] rows) throws IOException {\n    try (ByteArrayOutputStream csvStream = new ByteArrayOutputStream(); OutputStreamWriter streamWriter = new OutputStreamWriter(csvStream, Charset.forName(\"UTF-8\"))) {\n      CSVWriter csvWriter = new CSVWriter(streamWriter, ',');\n\n      csvWriter.writeNext(columnHeaders);\n      \n      for (String[] row : rows) {\n        csvWriter.writeNext(row);\n      }\n\n      csvWriter.close();\n      \n      return csvStream.toByteArray();\n    }\n  }","func_code_tokens":["private","static","byte","[","]","writeCsv","(","String","[","]","columnHeaders",",","String","[","]","[","]","rows",")","throws","IOException","{","try","(","ByteArrayOutputStream","csvStream","=","new","ByteArrayOutputStream","(",")",";","OutputStreamWriter","streamWriter","=","new","OutputStreamWriter","(","csvStream",",","Charset",".","forName","(","\"UTF-8\"",")",")",")","{","CSVWriter","csvWriter","=","new","CSVWriter","(","streamWriter",",","'","'",")",";","csvWriter",".","writeNext","(","columnHeaders",")",";","for","(","String","[","]","row",":","rows",")","{","csvWriter",".","writeNext","(","row",")",";","}","csvWriter",".","close","(",")",";","return","csvStream",".","toByteArray","(",")",";","}","}"],"func_documentation_string":"Writes a CSV file\n\n@param columnHeaders headers\n@param rows rows\n@return CSV file\n@throws IOException throws IOException when CSV writing fails","func_documentation_tokens":["Writes","a","CSV","file"],"label":1,"text":"Writes a CSV file\n\n@param columnHeaders headers\n@param rows rows\n@return CSV file\n@throws IOException throws IOException when CSV writing fails[SEP]private static byte[] writeCsv(String[] columnHeaders, String[][] rows) throws IOException {\n    try (ByteArrayOutputStream csvStream = new ByteArrayOutputStream(); OutputStreamWriter streamWriter = new OutputStreamWriter(csvStream, Charset.forName(\"UTF-8\"))) {\n      CSVWriter csvWriter = new CSVWriter(streamWriter, ',');\n\n      csvWriter.writeNext(columnHeaders);\n      \n      for (String[] row : rows) {\n        csvWriter.writeNext(row);\n      }\n\n      csvWriter.close();\n      \n      return csvStream.toByteArray();\n    }\n  }"}
{"func_code_string":"public void doAESEncryption() throws Exception{\n\t\tif(!initAESDone)\n\t\t\tinitAES();\n\t\tcipher = Cipher.getInstance(\"AES\/CBC\/PKCS5Padding\");\n\t\t\/\/System.out.println(secretKey.getEncoded());\n\t\tcipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\t\tAlgorithmParameters params = cipher.getParameters();\n\t\tiv = params.getParameterSpec(IvParameterSpec.class).getIV();\n\t\tsecretCipher = cipher.doFinal(secretPlain);\n\t\tclearPlain();\n\t}","func_code_tokens":["public","void","doAESEncryption","(",")","throws","Exception","{","if","(","!","initAESDone",")","initAES","(",")",";","cipher","=","Cipher",".","getInstance","(","\"AES\/CBC\/PKCS5Padding\"",")",";","\/\/System.out.println(secretKey.getEncoded());","cipher",".","init","(","Cipher",".","ENCRYPT_MODE",",","secretKey",")",";","AlgorithmParameters","params","=","cipher",".","getParameters","(",")",";","iv","=","params",".","getParameterSpec","(","IvParameterSpec",".","class",")",".","getIV","(",")",";","secretCipher","=","cipher",".","doFinal","(","secretPlain",")",";","clearPlain","(",")",";","}"],"func_documentation_string":"clears all plaintext passwords and secrets. password, secret and initAES must all be set before re-using\n@throws Exception","func_documentation_tokens":["clears","all","plaintext","passwords","and","secrets",".","password","secret","and","initAES","must","all","be","set","before","re","-","using"],"label":1,"text":"clears all plaintext passwords and secrets. password, secret and initAES must all be set before re-using\n@throws Exception[SEP]public void doAESEncryption() throws Exception{\n\t\tif(!initAESDone)\n\t\t\tinitAES();\n\t\tcipher = Cipher.getInstance(\"AES\/CBC\/PKCS5Padding\");\n\t\t\/\/System.out.println(secretKey.getEncoded());\n\t\tcipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\t\tAlgorithmParameters params = cipher.getParameters();\n\t\tiv = params.getParameterSpec(IvParameterSpec.class).getIV();\n\t\tsecretCipher = cipher.doFinal(secretPlain);\n\t\tclearPlain();\n\t}"}
{"func_code_string":"private String formatDate(Date value)\n   {\n      return (value == null ? null : m_formats.getDateFormat().format(value));\n   }","func_code_tokens":["private","String","formatDate","(","Date","value",")","{","return","(","value","==","null","?","null",":","m_formats",".","getDateFormat","(",")",".","format","(","value",")",")",";","}"],"func_documentation_string":"This method is called to format a date.\n\n@param value date value\n@return formatted date value","func_documentation_tokens":["This","method","is","called","to","format","a","date","."],"label":1,"text":"This method is called to format a date.\n\n@param value date value\n@return formatted date value[SEP]private String formatDate(Date value)\n   {\n      return (value == null ? null : m_formats.getDateFormat().format(value));\n   }"}
{"func_code_string":"public ArrayList<Duration> segmentWork(ProjectCalendar projectCalendar, List<TimephasedWork> work, TimescaleUnits rangeUnits, List<DateRange> dateList)\n   {\n      ArrayList<Duration> result = new ArrayList<Duration>(dateList.size());\n      int lastStartIndex = 0;\n\n      \/\/\n      \/\/ Iterate through the list of dates range we are interested in.\n      \/\/ Each date range in this list corresponds to a column\n      \/\/ shown on the \"timescale\" view by MS Project\n      \/\/\n      for (DateRange range : dateList)\n      {\n         \/\/\n         \/\/ If the current date range does not intersect with any of the\n         \/\/ assignment date ranges in the list, then we show a zero\n         \/\/ duration for this date range.\n         \/\/\n         int startIndex = lastStartIndex == -1 ? -1 : getStartIndex(range, work, lastStartIndex);\n         if (startIndex == -1)\n         {\n            result.add(Duration.getInstance(0, TimeUnit.HOURS));\n         }\n         else\n         {\n            \/\/\n            \/\/ We have found an assignment which intersects with the current\n            \/\/ date range, call the method below to determine how\n            \/\/ much time from this resource assignment can be allocated\n            \/\/ to the current date range.\n            \/\/\n            result.add(getRangeDuration(projectCalendar, rangeUnits, range, work, startIndex));\n            lastStartIndex = startIndex;\n         }\n      }\n\n      return result;\n   }","func_code_tokens":["public","ArrayList","<","Duration",">","segmentWork","(","ProjectCalendar","projectCalendar",",","List","<","TimephasedWork",">","work",",","TimescaleUnits","rangeUnits",",","List","<","DateRange",">","dateList",")","{","ArrayList","<","Duration",">","result","=","new","ArrayList","<","Duration",">","(","dateList",".","size","(",")",")",";","int","lastStartIndex","=","0",";","\/\/","\/\/ Iterate through the list of dates range we are interested in.","\/\/ Each date range in this list corresponds to a column","\/\/ shown on the \"timescale\" view by MS Project","\/\/","for","(","DateRange","range",":","dateList",")","{","\/\/","\/\/ If the current date range does not intersect with any of the","\/\/ assignment date ranges in the list, then we show a zero","\/\/ duration for this date range.","\/\/","int","startIndex","=","lastStartIndex","==","-","1","?","-","1",":","getStartIndex","(","range",",","work",",","lastStartIndex",")",";","if","(","startIndex","==","-","1",")","{","result",".","add","(","Duration",".","getInstance","(","0",",","TimeUnit",".","HOURS",")",")",";","}","else","{","\/\/","\/\/ We have found an assignment which intersects with the current","\/\/ date range, call the method below to determine how","\/\/ much time from this resource assignment can be allocated","\/\/ to the current date range.","\/\/","result",".","add","(","getRangeDuration","(","projectCalendar",",","rangeUnits",",","range",",","work",",","startIndex",")",")",";","lastStartIndex","=","startIndex",";","}","}","return","result",";","}"],"func_documentation_string":"This is the main entry point used to convert the internal representation\nof timephased work into an external form which can\nbe displayed to the user.\n\n@param projectCalendar calendar used by the resource assignment\n@param work timephased resource assignment data\n@param rangeUnits timescale units\n@param dateList timescale date ranges\n@return list of durations, one per timescale date range","func_documentation_tokens":["This","is","the","main","entry","point","used","to","convert","the","internal","representation","of","timephased","work","into","an","external","form","which","can","be","displayed","to","the","user","."],"label":0,"text":"This is the main entry point used to convert the internal representation\nof timephased work into an external form which can\nbe displayed to the user.\n\n@param projectCalendar calendar used by the resource assignment\n@param work timephased resource assignment data\n@param rangeUnits timescale units\n@param dateList timescale date ranges\n@return list of durations, one per timescale date range[SEP]public ArrayList<Duration> segmentWork(ProjectCalendar projectCalendar, List<TimephasedWork> work, TimescaleUnits rangeUnits, List<DateRange> dateList)\n   {\n      ArrayList<Duration> result = new ArrayList<Duration>(dateList.size());\n      int lastStartIndex = 0;\n\n      \/\/\n      \/\/ Iterate through the list of dates range we are interested in.\n      \/\/ Each date range in this list corresponds to a column\n      \/\/ shown on the \"timescale\" view by MS Project\n      \/\/\n      for (DateRange range : dateList)\n      {\n         \/\/\n         \/\/ If the current date range does not intersect with any of the\n         \/\/ assignment date ranges in the list, then we show a zero\n         \/\/ duration for this date range.\n         \/\/\n         int startIndex = lastStartIndex == -1 ? -1 : getStartIndex(range, work, lastStartIndex);\n         if (startIndex == -1)\n         {\n            result.add(Duration.getInstance(0, TimeUnit.HOURS));\n         }\n         else\n         {\n            \/\/\n            \/\/ We have found an assignment which intersects with the current\n            \/\/ date range, call the method below to determine how\n            \/\/ much time from this resource assignment can be allocated\n            \/\/ to the current date range.\n            \/\/\n            result.add(getRangeDuration(projectCalendar, rangeUnits, range, work, startIndex));\n            lastStartIndex = startIndex;\n         }\n      }\n\n      return result;\n   }"}
{"func_code_string":"public String getCsv() {\n\n        StringWriter writer = new StringWriter();\n        try (CSVWriter csv = new CSVWriter(writer)) {\n            List<String> headers = new ArrayList<>();\n            for (String col : m_columns) {\n                headers.add(col);\n            }\n            csv.writeNext(headers.toArray(new String[] {}));\n            for (List<Object> row : m_data) {\n                List<String> colCsv = new ArrayList<>();\n                for (Object col : row) {\n                    colCsv.add(String.valueOf(col));\n                }\n                csv.writeNext(colCsv.toArray(new String[] {}));\n            }\n            return writer.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }","func_code_tokens":["public","String","getCsv","(",")","{","StringWriter","writer","=","new","StringWriter","(",")",";","try","(","CSVWriter","csv","=","new","CSVWriter","(","writer",")",")","{","List","<","String",">","headers","=","new","ArrayList","<>","(",")",";","for","(","String","col",":","m_columns",")","{","headers",".","add","(","col",")",";","}","csv",".","writeNext","(","headers",".","toArray","(","new","String","[","]","{","}",")",")",";","for","(","List","<","Object",">","row",":","m_data",")","{","List","<","String",">","colCsv","=","new","ArrayList","<>","(",")",";","for","(","Object","col",":","row",")","{","colCsv",".","add","(","String",".","valueOf","(","col",")",")",";","}","csv",".","writeNext","(","colCsv",".","toArray","(","new","String","[","]","{","}",")",")",";","}","return","writer",".","toString","(",")",";","}","catch","(","IOException","e",")","{","return","null",";","}","}"],"func_documentation_string":"Converts the results to CSV data.\n\n@return the CSV data","func_documentation_tokens":["Converts","the","results","to","CSV","data","."],"label":1,"text":"Converts the results to CSV data.\n\n@return the CSV data[SEP]public String getCsv() {\n\n        StringWriter writer = new StringWriter();\n        try (CSVWriter csv = new CSVWriter(writer)) {\n            List<String> headers = new ArrayList<>();\n            for (String col : m_columns) {\n                headers.add(col);\n            }\n            csv.writeNext(headers.toArray(new String[] {}));\n            for (List<Object> row : m_data) {\n                List<String> colCsv = new ArrayList<>();\n                for (Object col : row) {\n                    colCsv.add(String.valueOf(col));\n                }\n                csv.writeNext(colCsv.toArray(new String[] {}));\n            }\n            return writer.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }"}
{"func_code_string":"private static boolean matchRuleRegex(String regex, String value) {\n\n        if (value == null) {\n            value = \"\";\n        }\n\n        if (regex == null) {\n            return true;\n        }\n        if ((regex.length() > 0) && (regex.charAt(0) == '!')) {\n            return !value.matches(regex.substring(1));\n        } else {\n            return value.matches(regex);\n        }\n    }","func_code_tokens":["private","static","boolean","matchRuleRegex","(","String","regex",",","String","value",")","{","if","(","value","==","null",")","{","value","=","\"\"",";","}","if","(","regex","==","null",")","{","return","true",";","}","if","(","(","regex",".","length","(",")",">","0",")","&&","(","regex",".","charAt","(","0",")","==","'","'",")",")","{","return","!","value",".","matches","(","regex",".","substring","(","1",")",")",";","}","else","{","return","value",".","matches","(","regex",")",";","}","}"],"func_documentation_string":"Matches a string against a regex, and inverts the match if the regex starts with a '!'.<p>\n\n@param regex the regular expression\n@param value the string to be matched\n\n@return true if the validation succeeded","func_documentation_tokens":["Matches","a","string","against","a","regex","and","inverts","the","match","if","the","regex","starts","with","a","!",".","<p",">"],"label":0,"text":"Matches a string against a regex, and inverts the match if the regex starts with a '!'.<p>\n\n@param regex the regular expression\n@param value the string to be matched\n\n@return true if the validation succeeded[SEP]private static boolean matchRuleRegex(String regex, String value) {\n\n        if (value == null) {\n            value = \"\";\n        }\n\n        if (regex == null) {\n            return true;\n        }\n        if ((regex.length() > 0) && (regex.charAt(0) == '!')) {\n            return !value.matches(regex.substring(1));\n        } else {\n            return value.matches(regex);\n        }\n    }"}
{"func_code_string":"protected Widget addMarker(String text) {\n\n        Label label = new Label(text);\n        label.addStyleName(CSS.marker());\n        getListItemWidget().addButton(label);\n        return label;\n    }","func_code_tokens":["protected","Widget","addMarker","(","String","text",")","{","Label","label","=","new","Label","(","text",")",";","label",".","addStyleName","(","CSS",".","marker","(",")",")",";","getListItemWidget","(",")",".","addButton","(","label",")",";","return","label",";","}"],"func_documentation_string":"Helper method for adding the marker widget.<p>\n\n@param text the text for the marker widget\n\n@return the new marker widget","func_documentation_tokens":["Helper","method","for","adding","the","marker","widget",".","<p",">"],"label":1,"text":"Helper method for adding the marker widget.<p>\n\n@param text the text for the marker widget\n\n@return the new marker widget[SEP]protected Widget addMarker(String text) {\n\n        Label label = new Label(text);\n        label.addStyleName(CSS.marker());\n        getListItemWidget().addButton(label);\n        return label;\n    }"}
{"func_code_string":"public static String stripHtml(String html) {\n\n        if (html == null) {\n            return null;\n        }\n        Element el = DOM.createDiv();\n        el.setInnerHTML(html);\n        return el.getInnerText();\n    }","func_code_tokens":["public","static","String","stripHtml","(","String","html",")","{","if","(","html","==","null",")","{","return","null",";","}","Element","el","=","DOM",".","createDiv","(",")",";","el",".","setInnerHTML","(","html",")",";","return","el",".","getInnerText","(",")",";","}"],"func_documentation_string":"Returns the text content to any HTML.\n\n@param html the HTML\n\n@return the text content","func_documentation_tokens":["Returns","the","text","content","to","any","HTML","."],"label":0,"text":"Returns the text content to any HTML.\n\n@param html the HTML\n\n@return the text content[SEP]public static String stripHtml(String html) {\n\n        if (html == null) {\n            return null;\n        }\n        Element el = DOM.createDiv();\n        el.setInnerHTML(html);\n        return el.getInnerText();\n    }"}
{"func_code_string":"private CmsSearchIndexSource createDummyIndexSource() {\n\n        CmsSearchIndexSource result = new CmsSearchIndexSource();\n        result.setName(\"default\");\n        result.setIndexerClassName(\"org.opencms.search.CmsVfsIndexer\");\n        result.addDocumentType(\"html\");\n        result.addDocumentType(\"generic\");\n        result.addDocumentType(\"pdf\");\n        \/\/ add search index source to config:\n        m_searchManager.addSearchIndexSource(result);\n        return result;\n    }","func_code_tokens":["private","CmsSearchIndexSource","createDummyIndexSource","(",")","{","CmsSearchIndexSource","result","=","new","CmsSearchIndexSource","(",")",";","result",".","setName","(","\"default\"",")",";","result",".","setIndexerClassName","(","\"org.opencms.search.CmsVfsIndexer\"",")",";","result",".","addDocumentType","(","\"html\"",")",";","result",".","addDocumentType","(","\"generic\"",")",";","result",".","addDocumentType","(","\"pdf\"",")",";","\/\/ add search index source to config:","m_searchManager",".","addSearchIndexSource","(","result",")",";","return","result",";","}"],"func_documentation_string":"Creates a dummy index source.<p>\n\n@return the dummy search index source","func_documentation_tokens":["Creates","a","dummy","index","source",".","<p",">"],"label":0,"text":"Creates a dummy index source.<p>\n\n@return the dummy search index source[SEP]private CmsSearchIndexSource createDummyIndexSource() {\n\n        CmsSearchIndexSource result = new CmsSearchIndexSource();\n        result.setName(\"default\");\n        result.setIndexerClassName(\"org.opencms.search.CmsVfsIndexer\");\n        result.addDocumentType(\"html\");\n        result.addDocumentType(\"generic\");\n        result.addDocumentType(\"pdf\");\n        \/\/ add search index source to config:\n        m_searchManager.addSearchIndexSource(result);\n        return result;\n    }"}
{"func_code_string":"protected String getJavaExecutablePath() {\n        String executableName = isWindows() ? \"bin\/java.exe\" : \"bin\/java\";\n        return PROPERTIES.getJavaHome().resolve(executableName).toAbsolutePath().toString();\n    }","func_code_tokens":["protected","String","getJavaExecutablePath","(",")","{","String","executableName","=","isWindows","(",")","?","\"bin\/java.exe\"",":","\"bin\/java\"",";","return","PROPERTIES",".","getJavaHome","(",")",".","resolve","(","executableName",")",".","toAbsolutePath","(",")",".","toString","(",")",";","}"],"func_documentation_string":"Returns the path to java executable.","func_documentation_tokens":["Returns","the","path","to","java","executable","."],"label":1,"text":"Returns the path to java executable.[SEP]protected String getJavaExecutablePath() {\n        String executableName = isWindows() ? \"bin\/java.exe\" : \"bin\/java\";\n        return PROPERTIES.getJavaHome().resolve(executableName).toAbsolutePath().toString();\n    }"}
{"func_code_string":"public void sortIndices(SortCoupledArray_F64 sorter ) {\n        if( sorter == null )\n            sorter = new SortCoupledArray_F64();\n\n        sorter.quick(col_idx,numCols+1,nz_rows,nz_values);\n        indicesSorted = true;\n    }","func_code_tokens":["public","void","sortIndices","(","SortCoupledArray_F64","sorter",")","{","if","(","sorter","==","null",")","sorter","=","new","SortCoupledArray_F64","(",")",";","sorter",".","quick","(","col_idx",",","numCols","+","1",",","nz_rows",",","nz_values",")",";","indicesSorted","=","true",";","}"],"func_documentation_string":"Sorts the row indices in ascending order.\n@param sorter (Optional) Used to sort rows.  If null a new instance will be declared internally.","func_documentation_tokens":["Sorts","the","row","indices","in","ascending","order","."],"label":0,"text":"Sorts the row indices in ascending order.\n@param sorter (Optional) Used to sort rows.  If null a new instance will be declared internally.[SEP]public void sortIndices(SortCoupledArray_F64 sorter ) {\n        if( sorter == null )\n            sorter = new SortCoupledArray_F64();\n\n        sorter.quick(col_idx,numCols+1,nz_rows,nz_values);\n        indicesSorted = true;\n    }"}
{"func_code_string":"public static <T> Observable<T> map(Observable<?> fromObservable, final T toValue) {\n        if (fromObservable != null) {\n            return fromObservable.subscribeOn(Schedulers.io())\n                    .map(new RXMapper<T>(toValue));\n        } else {\n            return Observable.empty();\n        }\n    }","func_code_tokens":["public","static","<","T",">","Observable","<","T",">","map","(","Observable","<","?",">","fromObservable",",","final","T","toValue",")","{","if","(","fromObservable","!=","null",")","{","return","fromObservable",".","subscribeOn","(","Schedulers",".","io","(",")",")",".","map","(","new","RXMapper","<","T",">","(","toValue",")",")",";","}","else","{","return","Observable",".","empty","(",")",";","}","}"],"func_documentation_string":"Shortcut for mapping the output of an arbitrary observable to one returning an instance of a specific type, using the IO scheduler.\n@param fromObservable the source observable\n@param toValue the value to emit to the observer\n@param <T> the type of the value to emit\n@return an observable emitting the specified value","func_documentation_tokens":["Shortcut","for","mapping","the","output","of","an","arbitrary","observable","to","one","returning","an","instance","of","a","specific","type","using","the","IO","scheduler","."],"label":1,"text":"Shortcut for mapping the output of an arbitrary observable to one returning an instance of a specific type, using the IO scheduler.\n@param fromObservable the source observable\n@param toValue the value to emit to the observer\n@param <T> the type of the value to emit\n@return an observable emitting the specified value[SEP]public static <T> Observable<T> map(Observable<?> fromObservable, final T toValue) {\n        if (fromObservable != null) {\n            return fromObservable.subscribeOn(Schedulers.io())\n                    .map(new RXMapper<T>(toValue));\n        } else {\n            return Observable.empty();\n        }\n    }"}
{"func_code_string":"private String listToCSV(List<String> list) {\n        String csvStr = \"\";\n        for (String item : list) {\n            csvStr += \",\" + item;\n        }\n\n        return csvStr.length() > 1 ? csvStr.substring(1) : csvStr;\n    }","func_code_tokens":["private","String","listToCSV","(","List","<","String",">","list",")","{","String","csvStr","=","\"\"",";","for","(","String","item",":","list",")","{","csvStr","+=","\",\"","+","item",";","}","return","csvStr",".","length","(",")",">","1","?","csvStr",".","substring","(","1",")",":","csvStr",";","}"],"func_documentation_string":"Concat a List into a CSV String.\n@param list list to concat\n@return csv string","func_documentation_tokens":["Concat","a","List","into","a","CSV","String","."],"label":0,"text":"Concat a List into a CSV String.\n@param list list to concat\n@return csv string[SEP]private String listToCSV(List<String> list) {\n        String csvStr = \"\";\n        for (String item : list) {\n            csvStr += \",\" + item;\n        }\n\n        return csvStr.length() > 1 ? csvStr.substring(1) : csvStr;\n    }"}
{"func_code_string":"public static <T, U> Function<T, U> memoize(final Function<T, U> function) {\n    return new Memoizer<T, U>().doMemoize(function);\n  }","func_code_tokens":["public","static","<","T",",","U",">","Function","<","T",",","U",">","memoize","(","final","Function","<","T",",","U",">","function",")","{","return","new","Memoizer","<","T",",","U",">","(",")",".","doMemoize","(","function",")",";","}"],"func_documentation_string":"<p>memoize.<\/p>\n\n@param function a {@link java.util.function.Function} object.\n@param <T> a T object.\n@param <U> a U object.\n@return a {@link java.util.function.Function} object.","func_documentation_tokens":["<p",">","memoize",".","<","\/","p",">"],"label":0,"text":"<p>memoize.<\/p>\n\n@param function a {@link java.util.function.Function} object.\n@param <T> a T object.\n@param <U> a U object.\n@return a {@link java.util.function.Function} object.[SEP]public static <T, U> Function<T, U> memoize(final Function<T, U> function) {\n    return new Memoizer<T, U>().doMemoize(function);\n  }"}
{"func_code_string":"@Override\n  public List<Assignment> assign(Collection<String> suiteNames, int slaves, long seed) {\n    \/\/ Read hints first.\n    final Map<String,List<Long>> hints = ExecutionTimesReport.mergeHints(resources, suiteNames);\n\n    \/\/ Preprocess and sort costs. Take the median for each suite's measurements as the \n    \/\/ weight to avoid extreme measurements from screwing up the average.\n    final List<SuiteHint> costs = new ArrayList<>();\n    for (String suiteName : suiteNames) {\n      final List<Long> suiteHint = hints.get(suiteName);\n      if (suiteHint != null) {\n        \/\/ Take the median for each suite's measurements as the weight\n        \/\/ to avoid extreme measurements from screwing up the average.\n        Collections.sort(suiteHint);\n        final Long median = suiteHint.get(suiteHint.size() \/ 2);\n        costs.add(new SuiteHint(suiteName, median));\n      }\n    }\n    Collections.sort(costs, SuiteHint.DESCENDING_BY_WEIGHT);\n\n    \/\/ Apply the assignment heuristic.\n    final PriorityQueue<SlaveLoad> pq = new PriorityQueue<SlaveLoad>(\n        slaves, SlaveLoad.ASCENDING_BY_ESTIMATED_FINISH);\n    for (int i = 0; i < slaves; i++) {\n      pq.add(new SlaveLoad(i));\n    }\n\n    final List<Assignment> assignments = new ArrayList<>();\n    for (SuiteHint hint : costs) {\n      SlaveLoad slave = pq.remove();\n      slave.estimatedFinish += hint.cost;\n      pq.add(slave);\n\n      owner.log(\"Expected execution time for \" + hint.suiteName + \": \" +\n          Duration.toHumanDuration(hint.cost),\n          Project.MSG_DEBUG);\n\n      assignments.add(new Assignment(hint.suiteName, slave.id, (int) hint.cost));\n    }\n\n    \/\/ Dump estimated execution times.\n    TreeMap<Integer, SlaveLoad> ordered = new TreeMap<Integer, SlaveLoad>();\n    while (!pq.isEmpty()) {\n      SlaveLoad slave = pq.remove();\n      ordered.put(slave.id, slave);\n    }\n    for (Integer id : ordered.keySet()) {\n      final SlaveLoad slave = ordered.get(id);\n      owner.log(String.format(Locale.ROOT, \n          \"Expected execution time on JVM J%d: %8.2fs\",\n          slave.id,\n          slave.estimatedFinish \/ 1000.0f), \n          verbose ? Project.MSG_INFO : Project.MSG_DEBUG);\n    }\n\n    return assignments;\n  }","func_code_tokens":["@","Override","public","List","<","Assignment",">","assign","(","Collection","<","String",">","suiteNames",",","int","slaves",",","long","seed",")","{","\/\/ Read hints first.","final","Map","<","String",",","List","<","Long",">",">","hints","=","ExecutionTimesReport",".","mergeHints","(","resources",",","suiteNames",")",";","\/\/ Preprocess and sort costs. Take the median for each suite's measurements as the ","\/\/ weight to avoid extreme measurements from screwing up the average.","final","List","<","SuiteHint",">","costs","=","new","ArrayList","<>","(",")",";","for","(","String","suiteName",":","suiteNames",")","{","final","List","<","Long",">","suiteHint","=","hints",".","get","(","suiteName",")",";","if","(","suiteHint","!=","null",")","{","\/\/ Take the median for each suite's measurements as the weight","\/\/ to avoid extreme measurements from screwing up the average.","Collections",".","sort","(","suiteHint",")",";","final","Long","median","=","suiteHint",".","get","(","suiteHint",".","size","(",")","\/","2",")",";","costs",".","add","(","new","SuiteHint","(","suiteName",",","median",")",")",";","}","}","Collections",".","sort","(","costs",",","SuiteHint",".","DESCENDING_BY_WEIGHT",")",";","\/\/ Apply the assignment heuristic.","final","PriorityQueue","<","SlaveLoad",">","pq","=","new","PriorityQueue","<","SlaveLoad",">","(","slaves",",","SlaveLoad",".","ASCENDING_BY_ESTIMATED_FINISH",")",";","for","(","int","i","=","0",";","i","<","slaves",";","i","++",")","{","pq",".","add","(","new","SlaveLoad","(","i",")",")",";","}","final","List","<","Assignment",">","assignments","=","new","ArrayList","<>","(",")",";","for","(","SuiteHint","hint",":","costs",")","{","SlaveLoad","slave","=","pq",".","remove","(",")",";","slave",".","estimatedFinish","+=","hint",".","cost",";","pq",".","add","(","slave",")",";","owner",".","log","(","\"Expected execution time for \"","+","hint",".","suiteName","+","\": \"","+","Duration",".","toHumanDuration","(","hint",".","cost",")",",","Project",".","MSG_DEBUG",")",";","assignments",".","add","(","new","Assignment","(","hint",".","suiteName",",","slave",".","id",",","(","int",")","hint",".","cost",")",")",";","}","\/\/ Dump estimated execution times.","TreeMap","<","Integer",",","SlaveLoad",">","ordered","=","new","TreeMap","<","Integer",",","SlaveLoad",">","(",")",";","while","(","!","pq",".","isEmpty","(",")",")","{","SlaveLoad","slave","=","pq",".","remove","(",")",";","ordered",".","put","(","slave",".","id",",","slave",")",";","}","for","(","Integer","id",":","ordered",".","keySet","(",")",")","{","final","SlaveLoad","slave","=","ordered",".","get","(","id",")",";","owner",".","log","(","String",".","format","(","Locale",".","ROOT",",","\"Expected execution time on JVM J%d: %8.2fs\"",",","slave",".","id",",","slave",".","estimatedFinish","\/","1000.0f",")",",","verbose","?","Project",".","MSG_INFO",":","Project",".","MSG_DEBUG",")",";","}","return","assignments",";","}"],"func_documentation_string":"Assign based on execution time history. The algorithm is a greedy heuristic\nassigning the longest remaining test to the slave with the\nshortest-completion time so far. This is not optimal but fast and provides\na decent average assignment.","func_documentation_tokens":["Assign","based","on","execution","time","history",".","The","algorithm","is","a","greedy","heuristic","assigning","the","longest","remaining","test","to","the","slave","with","the","shortest","-","completion","time","so","far",".","This","is","not","optimal","but","fast","and","provides","a","decent","average","assignment","."],"label":0,"text":"Assign based on execution time history. The algorithm is a greedy heuristic\nassigning the longest remaining test to the slave with the\nshortest-completion time so far. This is not optimal but fast and provides\na decent average assignment.[SEP]@Override\n  public List<Assignment> assign(Collection<String> suiteNames, int slaves, long seed) {\n    \/\/ Read hints first.\n    final Map<String,List<Long>> hints = ExecutionTimesReport.mergeHints(resources, suiteNames);\n\n    \/\/ Preprocess and sort costs. Take the median for each suite's measurements as the \n    \/\/ weight to avoid extreme measurements from screwing up the average.\n    final List<SuiteHint> costs = new ArrayList<>();\n    for (String suiteName : suiteNames) {\n      final List<Long> suiteHint = hints.get(suiteName);\n      if (suiteHint != null) {\n        \/\/ Take the median for each suite's measurements as the weight\n        \/\/ to avoid extreme measurements from screwing up the average.\n        Collections.sort(suiteHint);\n        final Long median = suiteHint.get(suiteHint.size() \/ 2);\n        costs.add(new SuiteHint(suiteName, median));\n      }\n    }\n    Collections.sort(costs, SuiteHint.DESCENDING_BY_WEIGHT);\n\n    \/\/ Apply the assignment heuristic.\n    final PriorityQueue<SlaveLoad> pq = new PriorityQueue<SlaveLoad>(\n        slaves, SlaveLoad.ASCENDING_BY_ESTIMATED_FINISH);\n    for (int i = 0; i < slaves; i++) {\n      pq.add(new SlaveLoad(i));\n    }\n\n    final List<Assignment> assignments = new ArrayList<>();\n    for (SuiteHint hint : costs) {\n      SlaveLoad slave = pq.remove();\n      slave.estimatedFinish += hint.cost;\n      pq.add(slave);\n\n      owner.log(\"Expected execution time for \" + hint.suiteName + \": \" +\n          Duration.toHumanDuration(hint.cost),\n          Project.MSG_DEBUG);\n\n      assignments.add(new Assignment(hint.suiteName, slave.id, (int) hint.cost));\n    }\n\n    \/\/ Dump estimated execution times.\n    TreeMap<Integer, SlaveLoad> ordered = new TreeMap<Integer, SlaveLoad>();\n    while (!pq.isEmpty()) {\n      SlaveLoad slave = pq.remove();\n      ordered.put(slave.id, slave);\n    }\n    for (Integer id : ordered.keySet()) {\n      final SlaveLoad slave = ordered.get(id);\n      owner.log(String.format(Locale.ROOT, \n          \"Expected execution time on JVM J%d: %8.2fs\",\n          slave.id,\n          slave.estimatedFinish \/ 1000.0f), \n          verbose ? Project.MSG_INFO : Project.MSG_DEBUG);\n    }\n\n    return assignments;\n  }"}
{"func_code_string":"public List<T> nextPermutationAsList()\n    {\n        List<T> permutation = new ArrayList<T>(elements.length);\n        return nextPermutationAsList(permutation);\n    }","func_code_tokens":["public","List","<","T",">","nextPermutationAsList","(",")","{","List","<","T",">","permutation","=","new","ArrayList","<","T",">","(","elements",".","length",")",";","return","nextPermutationAsList","(","permutation",")",";","}"],"func_documentation_string":"Generate the next permutation and return a list containing\nthe elements in the appropriate order.\n@see #nextPermutationAsList(java.util.List)\n@see #nextPermutationAsArray()\n@return The next permutation as a list.","func_documentation_tokens":["Generate","the","next","permutation","and","return","a","list","containing","the","elements","in","the","appropriate","order","."],"label":0,"text":"Generate the next permutation and return a list containing\nthe elements in the appropriate order.\n@see #nextPermutationAsList(java.util.List)\n@see #nextPermutationAsArray()\n@return The next permutation as a list.[SEP]public List<T> nextPermutationAsList()\n    {\n        List<T> permutation = new ArrayList<T>(elements.length);\n        return nextPermutationAsList(permutation);\n    }"}
{"func_code_string":"public Closure<V> memoizeAtMost(final int maxCacheSize) {\n        if (maxCacheSize < 0) throw new IllegalArgumentException(\"A non-negative number is required as the maxCacheSize parameter for memoizeAtMost.\");\n\n        return Memoize.buildMemoizeFunction(new LRUCache(maxCacheSize), this);\n    }","func_code_tokens":["public","Closure","<","V",">","memoizeAtMost","(","final","int","maxCacheSize",")","{","if","(","maxCacheSize","<","0",")","throw","new","IllegalArgumentException","(","\"A non-negative number is required as the maxCacheSize parameter for memoizeAtMost.\"",")",";","return","Memoize",".","buildMemoizeFunction","(","new","LRUCache","(","maxCacheSize",")",",","this",")",";","}"],"func_documentation_string":"Creates a caching variant of the closure with upper limit on the cache size.\nWhenever the closure is called, the mapping between the parameters and the return value is preserved in cache\nmaking subsequent calls with the same arguments fast.\nThis variant will keep all values until the upper size limit is reached. Then the values in the cache start rotating\nusing the LRU (Last Recently Used) strategy.\nThe returned function can be safely used concurrently from multiple threads, however, the implementation\nvalues high average-scenario performance and so concurrent calls on the memoized function with identical argument values\nmay not necessarily be able to benefit from each other's cached return value. With this having been mentioned,\nthe performance trade-off still makes concurrent use of memoized functions safe and highly recommended.\n\nThe cache gets garbage-collected together with the memoized closure.\n\n@param maxCacheSize The maximum size the cache can grow to\n@return A new function forwarding to the original one while caching the results","func_documentation_tokens":["Creates","a","caching","variant","of","the","closure","with","upper","limit","on","the","cache","size",".","Whenever","the","closure","is","called","the","mapping","between","the","parameters","and","the","return","value","is","preserved","in","cache","making","subsequent","calls","with","the","same","arguments","fast",".","This","variant","will","keep","all","values","until","the","upper","size","limit","is","reached",".","Then","the","values","in","the","cache","start","rotating","using","the","LRU","(","Last","Recently","Used",")","strategy",".","The","returned","function","can","be","safely","used","concurrently","from","multiple","threads","however","the","implementation","values","high","average","-","scenario","performance","and","so","concurrent","calls","on","the","memoized","function","with","identical","argument","values","may","not","necessarily","be","able","to","benefit","from","each","other","s","cached","return","value",".","With","this","having","been","mentioned","the","performance","trade","-","off","still","makes","concurrent","use","of","memoized","functions","safe","and","highly","recommended","."],"label":1,"text":"Creates a caching variant of the closure with upper limit on the cache size.\nWhenever the closure is called, the mapping between the parameters and the return value is preserved in cache\nmaking subsequent calls with the same arguments fast.\nThis variant will keep all values until the upper size limit is reached. Then the values in the cache start rotating\nusing the LRU (Last Recently Used) strategy.\nThe returned function can be safely used concurrently from multiple threads, however, the implementation\nvalues high average-scenario performance and so concurrent calls on the memoized function with identical argument values\nmay not necessarily be able to benefit from each other's cached return value. With this having been mentioned,\nthe performance trade-off still makes concurrent use of memoized functions safe and highly recommended.\n\nThe cache gets garbage-collected together with the memoized closure.\n\n@param maxCacheSize The maximum size the cache can grow to\n@return A new function forwarding to the original one while caching the results[SEP]public Closure<V> memoizeAtMost(final int maxCacheSize) {\n        if (maxCacheSize < 0) throw new IllegalArgumentException(\"A non-negative number is required as the maxCacheSize parameter for memoizeAtMost.\");\n\n        return Memoize.buildMemoizeFunction(new LRUCache(maxCacheSize), this);\n    }"}
{"func_code_string":"public Closure<V> memoizeAtLeast(final int protectedCacheSize) {\n        if (protectedCacheSize < 0) throw new IllegalArgumentException(\"A non-negative number is required as the protectedCacheSize parameter for memoizeAtLeast.\");\n\n        return Memoize.buildSoftReferenceMemoizeFunction(protectedCacheSize, new ConcurrentSoftCache<Object, Object>(), this);\n    }","func_code_tokens":["public","Closure","<","V",">","memoizeAtLeast","(","final","int","protectedCacheSize",")","{","if","(","protectedCacheSize","<","0",")","throw","new","IllegalArgumentException","(","\"A non-negative number is required as the protectedCacheSize parameter for memoizeAtLeast.\"",")",";","return","Memoize",".","buildSoftReferenceMemoizeFunction","(","protectedCacheSize",",","new","ConcurrentSoftCache","<","Object",",","Object",">","(",")",",","this",")",";","}"],"func_documentation_string":"Creates a caching variant of the closure with automatic cache size adjustment and lower limit\non the cache size.\nWhenever the closure is called, the mapping between the parameters and the return value is preserved in cache\nmaking subsequent calls with the same arguments fast.\nThis variant allows the garbage collector to release entries from the cache and at the same time allows\nthe user to specify how many entries should be protected from the eventual gc-initiated eviction.\nCached entries exceeding the specified preservation threshold are made available for eviction based on\nthe LRU (Last Recently Used) strategy.\nGiven the non-deterministic nature of garbage collector, the actual cache size may grow well beyond the limits\nset by the user if memory is plentiful.\nThe returned function can be safely used concurrently from multiple threads, however, the implementation\nvalues high average-scenario performance and so concurrent calls on the memoized function with identical argument values\nmay not necessarily be able to benefit from each other's cached return value. Also the protectedCacheSize parameter\nmight not be respected accurately in such scenarios for some periods of time. With this having been mentioned,\nthe performance trade-off still makes concurrent use of memoized functions safe and highly recommended.\n\nThe cache gets garbage-collected together with the memoized closure.\n@param protectedCacheSize Number of cached return values to protect from garbage collection\n@return A new function forwarding to the original one while caching the results","func_documentation_tokens":["Creates","a","caching","variant","of","the","closure","with","automatic","cache","size","adjustment","and","lower","limit","on","the","cache","size",".","Whenever","the","closure","is","called","the","mapping","between","the","parameters","and","the","return","value","is","preserved","in","cache","making","subsequent","calls","with","the","same","arguments","fast",".","This","variant","allows","the","garbage","collector","to","release","entries","from","the","cache","and","at","the","same","time","allows","the","user","to","specify","how","many","entries","should","be","protected","from","the","eventual","gc","-","initiated","eviction",".","Cached","entries","exceeding","the","specified","preservation","threshold","are","made","available","for","eviction","based","on","the","LRU","(","Last","Recently","Used",")","strategy",".","Given","the","non","-","deterministic","nature","of","garbage","collector","the","actual","cache","size","may","grow","well","beyond","the","limits","set","by","the","user","if","memory","is","plentiful",".","The","returned","function","can","be","safely","used","concurrently","from","multiple","threads","however","the","implementation","values","high","average","-","scenario","performance","and","so","concurrent","calls","on","the","memoized","function","with","identical","argument","values","may","not","necessarily","be","able","to","benefit","from","each","other","s","cached","return","value",".","Also","the","protectedCacheSize","parameter","might","not","be","respected","accurately","in","such","scenarios","for","some","periods","of","time",".","With","this","having","been","mentioned","the","performance","trade","-","off","still","makes","concurrent","use","of","memoized","functions","safe","and","highly","recommended","."],"label":0,"text":"Creates a caching variant of the closure with automatic cache size adjustment and lower limit\non the cache size.\nWhenever the closure is called, the mapping between the parameters and the return value is preserved in cache\nmaking subsequent calls with the same arguments fast.\nThis variant allows the garbage collector to release entries from the cache and at the same time allows\nthe user to specify how many entries should be protected from the eventual gc-initiated eviction.\nCached entries exceeding the specified preservation threshold are made available for eviction based on\nthe LRU (Last Recently Used) strategy.\nGiven the non-deterministic nature of garbage collector, the actual cache size may grow well beyond the limits\nset by the user if memory is plentiful.\nThe returned function can be safely used concurrently from multiple threads, however, the implementation\nvalues high average-scenario performance and so concurrent calls on the memoized function with identical argument values\nmay not necessarily be able to benefit from each other's cached return value. Also the protectedCacheSize parameter\nmight not be respected accurately in such scenarios for some periods of time. With this having been mentioned,\nthe performance trade-off still makes concurrent use of memoized functions safe and highly recommended.\n\nThe cache gets garbage-collected together with the memoized closure.\n@param protectedCacheSize Number of cached return values to protect from garbage collection\n@return A new function forwarding to the original one while caching the results[SEP]public Closure<V> memoizeAtLeast(final int protectedCacheSize) {\n        if (protectedCacheSize < 0) throw new IllegalArgumentException(\"A non-negative number is required as the protectedCacheSize parameter for memoizeAtLeast.\");\n\n        return Memoize.buildSoftReferenceMemoizeFunction(protectedCacheSize, new ConcurrentSoftCache<Object, Object>(), this);\n    }"}
{"func_code_string":"public static BufferedReader newReader(Path self) throws IOException {\n        return Files.newBufferedReader(self, Charset.defaultCharset());\n    }","func_code_tokens":["public","static","BufferedReader","newReader","(","Path","self",")","throws","IOException","{","return","Files",".","newBufferedReader","(","self",",","Charset",".","defaultCharset","(",")",")",";","}"],"func_documentation_string":"Create a buffered reader for this file.\n\n@param self a Path\n@return a BufferedReader\n@throws java.io.IOException if an IOException occurs.\n@since 2.3.0","func_documentation_tokens":["Create","a","buffered","reader","for","this","file","."],"label":1,"text":"Create a buffered reader for this file.\n\n@param self a Path\n@return a BufferedReader\n@throws java.io.IOException if an IOException occurs.\n@since 2.3.0[SEP]public static BufferedReader newReader(Path self) throws IOException {\n        return Files.newBufferedReader(self, Charset.defaultCharset());\n    }"}
{"func_code_string":"public static String getText(Reader reader) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(reader);\n        return getText(bufferedReader);\n    }","func_code_tokens":["public","static","String","getText","(","Reader","reader",")","throws","IOException","{","BufferedReader","bufferedReader","=","new","BufferedReader","(","reader",")",";","return","getText","(","bufferedReader",")",";","}"],"func_documentation_string":"Read the content of the Reader and return it as a String.  The reader\nis closed before this method returns.\n\n@param reader a Reader whose content we want to read\n@return a String containing the content of the buffered reader\n@throws IOException if an IOException occurs.\n@see #getText(java.io.BufferedReader)\n@since 1.0","func_documentation_tokens":["Read","the","content","of","the","Reader","and","return","it","as","a","String",".","The","reader","is","closed","before","this","method","returns","."],"label":1,"text":"Read the content of the Reader and return it as a String.  The reader\nis closed before this method returns.\n\n@param reader a Reader whose content we want to read\n@return a String containing the content of the buffered reader\n@throws IOException if an IOException occurs.\n@see #getText(java.io.BufferedReader)\n@since 1.0[SEP]public static String getText(Reader reader) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(reader);\n        return getText(bufferedReader);\n    }"}
{"func_code_string":"public static String[] splitString(final String s, final char c) {\n    final char[] chars = s.toCharArray();\n    int num_substrings = 1;\n    for (final char x : chars) {\n      if (x == c) {\n        num_substrings++;\n      }\n    }\n    final String[] result = new String[num_substrings];\n    final int len = chars.length;\n    int start = 0;  \/\/ starting index in chars of the current substring.\n    int pos = 0;    \/\/ current index in chars.\n    int i = 0;      \/\/ number of the current substring.\n    for (; pos < len; pos++) {\n      if (chars[pos] == c) {\n        result[i++] = new String(chars, start, pos - start);\n        start = pos + 1;\n      }\n    }\n    result[i] = new String(chars, start, pos - start);\n    return result;\n  }","func_code_tokens":["public","static","String","[","]","splitString","(","final","String","s",",","final","char","c",")","{","final","char","[","]","chars","=","s",".","toCharArray","(",")",";","int","num_substrings","=","1",";","for","(","final","char","x",":","chars",")","{","if","(","x","==","c",")","{","num_substrings","++",";","}","}","final","String","[","]","result","=","new","String","[","num_substrings","]",";","final","int","len","=","chars",".","length",";","int","start","=","0",";","\/\/ starting index in chars of the current substring.","int","pos","=","0",";","\/\/ current index in chars.","int","i","=","0",";","\/\/ number of the current substring.","for","(",";","pos","<","len",";","pos","++",")","{","if","(","chars","[","pos","]","==","c",")","{","result","[","i","++","]","=","new","String","(","chars",",","start",",","pos","-","start",")",";","start","=","pos","+","1",";","}","}","result","[","i","]","=","new","String","(","chars",",","start",",","pos","-","start",")",";","return","result",";","}"],"func_documentation_string":"Optimized version of {@code String#split} that doesn't use regexps.\nThis function works in O(5n) where n is the length of the string to\nsplit.\n@param s The string to split.\n@param c The separator to use to split the string.\n@return A non-null, non-empty array.","func_documentation_tokens":["Optimized","version","of","{"],"label":0,"text":"Optimized version of {@code String#split} that doesn't use regexps.\nThis function works in O(5n) where n is the length of the string to\nsplit.\n@param s The string to split.\n@param c The separator to use to split the string.\n@return A non-null, non-empty array.[SEP]public static String[] splitString(final String s, final char c) {\n    final char[] chars = s.toCharArray();\n    int num_substrings = 1;\n    for (final char x : chars) {\n      if (x == c) {\n        num_substrings++;\n      }\n    }\n    final String[] result = new String[num_substrings];\n    final int len = chars.length;\n    int start = 0;  \/\/ starting index in chars of the current substring.\n    int pos = 0;    \/\/ current index in chars.\n    int i = 0;      \/\/ number of the current substring.\n    for (; pos < len; pos++) {\n      if (chars[pos] == c) {\n        result[i++] = new String(chars, start, pos - start);\n        start = pos + 1;\n      }\n    }\n    result[i] = new String(chars, start, pos - start);\n    return result;\n  }"}
{"func_code_string":"public static DocumentContext parse(File json, Configuration configuration) throws IOException {\n        return new ParseContextImpl(configuration).parse(json);\n    }","func_code_tokens":["public","static","DocumentContext","parse","(","File","json",",","Configuration","configuration",")","throws","IOException","{","return","new","ParseContextImpl","(","configuration",")",".","parse","(","json",")",";","}"],"func_documentation_string":"Parses the given JSON input using the provided {@link Configuration} and\nreturns a {@link DocumentContext} for path evaluation\n\n@param json input\n@return a read context","func_documentation_tokens":["Parses","the","given","JSON","input","using","the","provided","{","@link","Configuration","}","and","returns","a","{","@link","DocumentContext","}","for","path","evaluation"],"label":1,"text":"Parses the given JSON input using the provided {@link Configuration} and\nreturns a {@link DocumentContext} for path evaluation\n\n@param json input\n@return a read context[SEP]public static DocumentContext parse(File json, Configuration configuration) throws IOException {\n        return new ParseContextImpl(configuration).parse(json);\n    }"}
{"func_code_string":"public static <Key, Value, DistinctType> Aggregation<Key, Value, Set<DistinctType>> distinctValues() {\n        AggType<Key, Value, Integer, DistinctType, Set<DistinctType>, Set<DistinctType>, Set<DistinctType>> aggType;\n        aggType = new DistinctValuesAggregation<Key, Value, DistinctType>();\n        return new AggregationAdapter<Key, Value, Set<DistinctType>>(aggType);\n    }","func_code_tokens":["public","static","<","Key",",","Value",",","DistinctType",">","Aggregation","<","Key",",","Value",",","Set","<","DistinctType",">",">","distinctValues","(",")","{","AggType","<","Key",",","Value",",","Integer",",","DistinctType",",","Set","<","DistinctType",">",",","Set","<","DistinctType",">",",","Set","<","DistinctType",">",">","aggType",";","aggType","=","new","DistinctValuesAggregation","<","Key",",","Value",",","DistinctType",">","(",")",";","return","new","AggregationAdapter","<","Key",",","Value",",","Set","<","DistinctType",">",">","(","aggType",")",";","}"],"func_documentation_string":"Returns an aggregation for selecting all distinct values.<br\/>\nThis aggregation is similar to: <pre>SELECT DISTINCT * FROM x<\/pre>\n\n@param <Key>          the input key type\n@param <Value>        the supplied value type\n@param <DistinctType> the type of all distinct values\n@return a {@link java.util.Set} containing all distinct values","func_documentation_tokens":["Returns","an","aggregation","for","selecting","all","distinct","values",".","<br","\/",">","This","aggregation","is","similar","to",":","<pre",">","SELECT","DISTINCT","*","FROM","x<","\/","pre",">"],"label":0,"text":"Returns an aggregation for selecting all distinct values.<br\/>\nThis aggregation is similar to: <pre>SELECT DISTINCT * FROM x<\/pre>\n\n@param <Key>          the input key type\n@param <Value>        the supplied value type\n@param <DistinctType> the type of all distinct values\n@return a {@link java.util.Set} containing all distinct values[SEP]public static <Key, Value, DistinctType> Aggregation<Key, Value, Set<DistinctType>> distinctValues() {\n        AggType<Key, Value, Integer, DistinctType, Set<DistinctType>, Set<DistinctType>, Set<DistinctType>> aggType;\n        aggType = new DistinctValuesAggregation<Key, Value, DistinctType>();\n        return new AggregationAdapter<Key, Value, Set<DistinctType>>(aggType);\n    }"}
{"func_code_string":"public void groupsCountByComponentIdAndPermission(DbSession dbSession, List<Long> componentIds, ResultHandler resultHandler) {\n    Map<String, Object> parameters = new HashMap<>(2);\n    parameters.put(ANYONE_GROUP_PARAMETER, DefaultGroups.ANYONE);\n\n    executeLargeInputsWithoutOutput(\n      componentIds,\n      partitionedComponentIds -> {\n        parameters.put(\"componentIds\", partitionedComponentIds);\n        mapper(dbSession).groupsCountByProjectIdAndPermission(parameters, resultHandler);\n      });\n  }","func_code_tokens":["public","void","groupsCountByComponentIdAndPermission","(","DbSession","dbSession",",","List","<","Long",">","componentIds",",","ResultHandler","resultHandler",")","{","Map","<","String",",","Object",">","parameters","=","new","HashMap","<>","(","2",")",";","parameters",".","put","(","ANYONE_GROUP_PARAMETER",",","DefaultGroups",".","ANYONE",")",";","executeLargeInputsWithoutOutput","(","componentIds",",","partitionedComponentIds","->","{","parameters",".","put","(","\"componentIds\"",",","partitionedComponentIds",")",";","mapper","(","dbSession",")",".","groupsCountByProjectIdAndPermission","(","parameters",",","resultHandler",")",";","}",")",";","}"],"func_documentation_string":"Each row returns a {@link CountPerProjectPermission}","func_documentation_tokens":["Each","row","returns","a","{"],"label":0,"text":"Each row returns a {@link CountPerProjectPermission}[SEP]public void groupsCountByComponentIdAndPermission(DbSession dbSession, List<Long> componentIds, ResultHandler resultHandler) {\n    Map<String, Object> parameters = new HashMap<>(2);\n    parameters.put(ANYONE_GROUP_PARAMETER, DefaultGroups.ANYONE);\n\n    executeLargeInputsWithoutOutput(\n      componentIds,\n      partitionedComponentIds -> {\n        parameters.put(\"componentIds\", partitionedComponentIds);\n        mapper(dbSession).groupsCountByProjectIdAndPermission(parameters, resultHandler);\n      });\n  }"}
{"func_code_string":"public static PlotCanvas plot(String id, double[][] data, int[] y, char[] legend, Color[] palette) {\n        if (data[0].length != 2 && data[0].length != 3) {\n            throw new IllegalArgumentException(\"Invalid data dimension: \" + data[0].length);\n        }\n\n        double[] lowerBound = Math.colMin(data);\n        double[] upperBound = Math.colMax(data);\n        PlotCanvas canvas = new PlotCanvas(lowerBound, upperBound);\n\n        ScatterPlot plot = new ScatterPlot(data, y, legend, palette);\n        plot.setID(id);\n        canvas.add(plot);\n\n        return canvas;\n    }","func_code_tokens":["public","static","PlotCanvas","plot","(","String","id",",","double","[","]","[","]","data",",","int","[","]","y",",","char","[","]","legend",",","Color","[","]","palette",")","{","if","(","data","[","0","]",".","length","!=","2","&&","data","[","0","]",".","length","!=","3",")","{","throw","new","IllegalArgumentException","(","\"Invalid data dimension: \"","+","data","[","0","]",".","length",")",";","}","double","[","]","lowerBound","=","Math",".","colMin","(","data",")",";","double","[","]","upperBound","=","Math",".","colMax","(","data",")",";","PlotCanvas","canvas","=","new","PlotCanvas","(","lowerBound",",","upperBound",")",";","ScatterPlot","plot","=","new","ScatterPlot","(","data",",","y",",","legend",",","palette",")",";","plot",".","setID","(","id",")",";","canvas",".","add","(","plot",")",";","return","canvas",";","}"],"func_documentation_string":"Create a plot canvas with the scatter plot of given data with specific legend and color.\n@param id the id of the plot.\n@param data a n-by-2 or n-by-3 matrix that describes coordinates of points.\n@param y the class labels of data.\n@param palette the colors for each class.\n@param legend the legend used to draw points.\n<ul>\n<li> . : dot\n<li> + : +\n<li> - : -\n<li> | : |\n<li> * : star\n<li> x : x\n<li> o : circle\n<li> O : large circle\n<li> @ : solid circle\n<li> # : large solid circle\n<li> s : square\n<li> S : large square\n<li> q : solid square\n<li> Q : large solid square\n<li> others : dot\n<\/ul>","func_documentation_tokens":["Create","a","plot","canvas","with","the","scatter","plot","of","given","data","with","specific","legend","and","color","."],"label":1,"text":"Create a plot canvas with the scatter plot of given data with specific legend and color.\n@param id the id of the plot.\n@param data a n-by-2 or n-by-3 matrix that describes coordinates of points.\n@param y the class labels of data.\n@param palette the colors for each class.\n@param legend the legend used to draw points.\n<ul>\n<li> . : dot\n<li> + : +\n<li> - : -\n<li> | : |\n<li> * : star\n<li> x : x\n<li> o : circle\n<li> O : large circle\n<li> @ : solid circle\n<li> # : large solid circle\n<li> s : square\n<li> S : large square\n<li> q : solid square\n<li> Q : large solid square\n<li> others : dot\n<\/ul>[SEP]public static PlotCanvas plot(String id, double[][] data, int[] y, char[] legend, Color[] palette) {\n        if (data[0].length != 2 && data[0].length != 3) {\n            throw new IllegalArgumentException(\"Invalid data dimension: \" + data[0].length);\n        }\n\n        double[] lowerBound = Math.colMin(data);\n        double[] upperBound = Math.colMax(data);\n        PlotCanvas canvas = new PlotCanvas(lowerBound, upperBound);\n\n        ScatterPlot plot = new ScatterPlot(data, y, legend, palette);\n        plot.setID(id);\n        canvas.add(plot);\n\n        return canvas;\n    }"}
{"func_code_string":"public static int[] sort(double[] arr) {\n        int[] order = new int[arr.length];\n        for (int i = 0; i < order.length; i++) {\n            order[i] = i;\n        }\n        sort(arr, order);\n        return order;\n    }","func_code_tokens":["public","static","int","[","]","sort","(","double","[","]","arr",")","{","int","[","]","order","=","new","int","[","arr",".","length","]",";","for","(","int","i","=","0",";","i","<","order",".","length",";","i","++",")","{","order","[","i","]","=","i",";","}","sort","(","arr",",","order",")",";","return","order",";","}"],"func_documentation_string":"Sorts the specified array into ascending numerical order.\n@return the original index of elements after sorting in range [0, n).","func_documentation_tokens":["Sorts","the","specified","array","into","ascending","numerical","order","."],"label":1,"text":"Sorts the specified array into ascending numerical order.\n@return the original index of elements after sorting in range [0, n).[SEP]public static int[] sort(double[] arr) {\n        int[] order = new int[arr.length];\n        for (int i = 0; i < order.length; i++) {\n            order[i] = i;\n        }\n        sort(arr, order);\n        return order;\n    }"}
{"func_code_string":"public static <T extends Comparable<? super T>>  int[] sort(T[] arr) {\n        int[] order = new int[arr.length];\n        for (int i = 0; i < order.length; i++) {\n            order[i] = i;\n        }\n        sort(arr, order);\n        return order;\n    }","func_code_tokens":["public","static","<","T","extends","Comparable","<","?","super","T",">",">","int","[","]","sort","(","T","[","]","arr",")","{","int","[","]","order","=","new","int","[","arr",".","length","]",";","for","(","int","i","=","0",";","i","<","order",".","length",";","i","++",")","{","order","[","i","]","=","i",";","}","sort","(","arr",",","order",")",";","return","order",";","}"],"func_documentation_string":"Sorts the specified array into ascending order.\n@return the original index of elements after sorting in range [0, n).","func_documentation_tokens":["Sorts","the","specified","array","into","ascending","order","."],"label":1,"text":"Sorts the specified array into ascending order.\n@return the original index of elements after sorting in range [0, n).[SEP]public static <T extends Comparable<? super T>>  int[] sort(T[] arr) {\n        int[] order = new int[arr.length];\n        for (int i = 0; i < order.length; i++) {\n            order[i] = i;\n        }\n        sort(arr, order);\n        return order;\n    }"}
{"func_code_string":"public ScatterPlot points(String id, double[][] data, Color color) {\n        if (data[0].length != base.dimension) {\n            throw new IllegalArgumentException(\"Invalid data dimension: \" + data[0].length);\n        }\n\n        double[] lowerBound = Math.colMin(data);\n        double[] upperBound = Math.colMax(data);\n        extendBound(lowerBound, upperBound);\n\n        ScatterPlot plot = new ScatterPlot(data);\n        plot.setID(id);\n        plot.setColor(color);\n        add(plot);\n\n        return plot;\n    }","func_code_tokens":["public","ScatterPlot","points","(","String","id",",","double","[","]","[","]","data",",","Color","color",")","{","if","(","data","[","0","]",".","length","!=","base",".","dimension",")","{","throw","new","IllegalArgumentException","(","\"Invalid data dimension: \"","+","data","[","0","]",".","length",")",";","}","double","[","]","lowerBound","=","Math",".","colMin","(","data",")",";","double","[","]","upperBound","=","Math",".","colMax","(","data",")",";","extendBound","(","lowerBound",",","upperBound",")",";","ScatterPlot","plot","=","new","ScatterPlot","(","data",")",";","plot",".","setID","(","id",")",";","plot",".","setColor","(","color",")",";","add","(","plot",")",";","return","plot",";","}"],"func_documentation_string":"Adds a scatter plot to this canvas.\n@param id the id of the plot.\n@param data a n-by-2 or n-by-3 matrix that describes coordinates of points.\n@param color the color used to draw points.\n@return the scatter plot for the given points.","func_documentation_tokens":["Adds","a","scatter","plot","to","this","canvas","."],"label":1,"text":"Adds a scatter plot to this canvas.\n@param id the id of the plot.\n@param data a n-by-2 or n-by-3 matrix that describes coordinates of points.\n@param color the color used to draw points.\n@return the scatter plot for the given points.[SEP]public ScatterPlot points(String id, double[][] data, Color color) {\n        if (data[0].length != base.dimension) {\n            throw new IllegalArgumentException(\"Invalid data dimension: \" + data[0].length);\n        }\n\n        double[] lowerBound = Math.colMin(data);\n        double[] upperBound = Math.colMax(data);\n        extendBound(lowerBound, upperBound);\n\n        ScatterPlot plot = new ScatterPlot(data);\n        plot.setID(id);\n        plot.setColor(color);\n        add(plot);\n\n        return plot;\n    }"}
{"func_code_string":"public StaircasePlot staircase(String id, double[][] data, Color color) {\n        if (data[0].length != 2 && data[0].length != 3) {\n            throw new IllegalArgumentException(\"Invalid data dimension: \" + data[0].length);\n        }\n\n        StaircasePlot plot = new StaircasePlot(data);\n        plot.setID(id);\n        plot.setColor(color);\n        add(plot);\n        return plot;\n    }","func_code_tokens":["public","StaircasePlot","staircase","(","String","id",",","double","[","]","[","]","data",",","Color","color",")","{","if","(","data","[","0","]",".","length","!=","2","&&","data","[","0","]",".","length","!=","3",")","{","throw","new","IllegalArgumentException","(","\"Invalid data dimension: \"","+","data","[","0","]",".","length",")",";","}","StaircasePlot","plot","=","new","StaircasePlot","(","data",")",";","plot",".","setID","(","id",")",";","plot",".","setColor","(","color",")",";","add","(","plot",")",";","return","plot",";","}"],"func_documentation_string":"Adds a staircase line plot to this canvas.\n@param id the id of the plot.\n@param data a n x 2 or n x 3 matrix that describes coordinates of points.\n@param color the color of line.","func_documentation_tokens":["Adds","a","staircase","line","plot","to","this","canvas","."],"label":0,"text":"Adds a staircase line plot to this canvas.\n@param id the id of the plot.\n@param data a n x 2 or n x 3 matrix that describes coordinates of points.\n@param color the color of line.[SEP]public StaircasePlot staircase(String id, double[][] data, Color color) {\n        if (data[0].length != 2 && data[0].length != 3) {\n            throw new IllegalArgumentException(\"Invalid data dimension: \" + data[0].length);\n        }\n\n        StaircasePlot plot = new StaircasePlot(data);\n        plot.setID(id);\n        plot.setColor(color);\n        add(plot);\n        return plot;\n    }"}
{"func_code_string":"protected PlotCanvas paintOnCanvas(double[][] data, int[] label) {\n        PlotCanvas canvas = ScatterPlot.plot(data, pointLegend);\n        for (int i = 0; i < data.length; i++) {\n            canvas.point(pointLegend, Palette.COLORS[label[i]], data[i]);\n        }\n        return canvas;\n    }","func_code_tokens":["protected","PlotCanvas","paintOnCanvas","(","double","[","]","[","]","data",",","int","[","]","label",")","{","PlotCanvas","canvas","=","ScatterPlot",".","plot","(","data",",","pointLegend",")",";","for","(","int","i","=","0",";","i","<","data",".","length",";","i","++",")","{","canvas",".","point","(","pointLegend",",","Palette",".","COLORS","[","label","[","i","]","]",",","data","[","i","]",")",";","}","return","canvas",";","}"],"func_documentation_string":"paint given data with label on canvas\n@param data the data point(s) to paint, only support 2D or 3D features\n@param label the data label for classification","func_documentation_tokens":["paint","given","data","with","label","on","canvas"],"label":1,"text":"paint given data with label on canvas\n@param data the data point(s) to paint, only support 2D or 3D features\n@param label the data label for classification[SEP]protected PlotCanvas paintOnCanvas(double[][] data, int[] label) {\n        PlotCanvas canvas = ScatterPlot.plot(data, pointLegend);\n        for (int i = 0; i < data.length; i++) {\n            canvas.point(pointLegend, Palette.COLORS[label[i]], data[i]);\n        }\n        return canvas;\n    }"}
{"func_code_string":"public void setWorkingDirectory(String path) {\n        if (path != null) {\n            File dir = new File(path);\n            checkWorkingDir(dir);\n            workingDir = dir;\n        } else {\n            workingDir = null;\n        }\n    }","func_code_tokens":["public","void","setWorkingDirectory","(","String","path",")","{","if","(","path","!=","null",")","{","File","dir","=","new","File","(","path",")",";","checkWorkingDir","(","dir",")",";","workingDir","=","dir",";","}","else","{","workingDir","=","null",";","}","}"],"func_documentation_string":"Sets execution directory.","func_documentation_tokens":["Sets","execution","directory","."],"label":1,"text":"Sets execution directory.[SEP]public void setWorkingDirectory(String path) {\n        if (path != null) {\n            File dir = new File(path);\n            checkWorkingDir(dir);\n            workingDir = dir;\n        } else {\n            workingDir = null;\n        }\n    }"}
{"func_code_string":"public static void extractZip(File file) throws FileNotFoundException, IOException {\n        final String originalPath = file.getPath();\n        final File zip = new File(originalPath + \".zip\");\n        if (zip.isFile() && !zip.delete()) {\n            LOGGER.debug(\"Failed to delete initial temporary file when extracting 'zip' {}\", zip.toString());\n            zip.deleteOnExit();\n        }\n        if (!file.renameTo(zip)) {\n            throw new IOException(\"Unable to rename '\" + file.getPath() + \"'\");\n        }\n        final File newFile = new File(originalPath);\n        try (FileInputStream fis = new FileInputStream(zip);\n                ZipInputStream cin = new ZipInputStream(fis);\n                FileOutputStream out = new FileOutputStream(newFile)) {\n            cin.getNextEntry();\n            IOUtils.copy(cin, out);\n        } finally {\n            if (zip.isFile() && !org.apache.commons.io.FileUtils.deleteQuietly(zip)) {\n                LOGGER.debug(\"Failed to delete temporary file when extracting 'zip' {}\", zip.toString());\n                zip.deleteOnExit();\n            }\n        }\n    }","func_code_tokens":["public","static","void","extractZip","(","File","file",")","throws","FileNotFoundException",",","IOException","{","final","String","originalPath","=","file",".","getPath","(",")",";","final","File","zip","=","new","File","(","originalPath","+","\".zip\"",")",";","if","(","zip",".","isFile","(",")","&&","!","zip",".","delete","(",")",")","{","LOGGER",".","debug","(","\"Failed to delete initial temporary file when extracting 'zip' {}\"",",","zip",".","toString","(",")",")",";","zip",".","deleteOnExit","(",")",";","}","if","(","!","file",".","renameTo","(","zip",")",")","{","throw","new","IOException","(","\"Unable to rename '\"","+","file",".","getPath","(",")","+","\"'\"",")",";","}","final","File","newFile","=","new","File","(","originalPath",")",";","try","(","FileInputStream","fis","=","new","FileInputStream","(","zip",")",";","ZipInputStream","cin","=","new","ZipInputStream","(","fis",")",";","FileOutputStream","out","=","new","FileOutputStream","(","newFile",")",")","{","cin",".","getNextEntry","(",")",";","IOUtils",".","copy","(","cin",",","out",")",";","}","finally","{","if","(","zip",".","isFile","(",")","&&","!","org",".","apache",".","commons",".","io",".","FileUtils",".","deleteQuietly","(","zip",")",")","{","LOGGER",".","debug","(","\"Failed to delete temporary file when extracting 'zip' {}\"",",","zip",".","toString","(",")",")",";","zip",".","deleteOnExit","(",")",";","}","}","}"],"func_documentation_string":"Extracts the file contained in a Zip archive. The extracted file is\nplaced in the exact same path as the file specified.\n\n@param file the archive file\n@throws FileNotFoundException thrown if the file does not exist\n@throws IOException thrown if there is an error extracting the file.","func_documentation_tokens":["Extracts","the","file","contained","in","a","Zip","archive",".","The","extracted","file","is","placed","in","the","exact","same","path","as","the","file","specified","."],"label":1,"text":"Extracts the file contained in a Zip archive. The extracted file is\nplaced in the exact same path as the file specified.\n\n@param file the archive file\n@throws FileNotFoundException thrown if the file does not exist\n@throws IOException thrown if there is an error extracting the file.[SEP]public static void extractZip(File file) throws FileNotFoundException, IOException {\n        final String originalPath = file.getPath();\n        final File zip = new File(originalPath + \".zip\");\n        if (zip.isFile() && !zip.delete()) {\n            LOGGER.debug(\"Failed to delete initial temporary file when extracting 'zip' {}\", zip.toString());\n            zip.deleteOnExit();\n        }\n        if (!file.renameTo(zip)) {\n            throw new IOException(\"Unable to rename '\" + file.getPath() + \"'\");\n        }\n        final File newFile = new File(originalPath);\n        try (FileInputStream fis = new FileInputStream(zip);\n                ZipInputStream cin = new ZipInputStream(fis);\n                FileOutputStream out = new FileOutputStream(newFile)) {\n            cin.getNextEntry();\n            IOUtils.copy(cin, out);\n        } finally {\n            if (zip.isFile() && !org.apache.commons.io.FileUtils.deleteQuietly(zip)) {\n                LOGGER.debug(\"Failed to delete temporary file when extracting 'zip' {}\", zip.toString());\n                zip.deleteOnExit();\n            }\n        }\n    }"}
{"func_code_string":"private CommandLine parseArgs(String[] args) throws ParseException {\n        final CommandLineParser parser = new DefaultParser();\n        final Options options = createCommandLineOptions();\n        return parser.parse(options, args);\n    }","func_code_tokens":["private","CommandLine","parseArgs","(","String","[","]","args",")","throws","ParseException","{","final","CommandLineParser","parser","=","new","DefaultParser","(",")",";","final","Options","options","=","createCommandLineOptions","(",")",";","return","parser",".","parse","(","options",",","args",")",";","}"],"func_documentation_string":"Parses the command line arguments.\n\n@param args the command line arguments\n@return the results of parsing the command line arguments\n@throws ParseException if the arguments are invalid","func_documentation_tokens":["Parses","the","command","line","arguments","."],"label":1,"text":"Parses the command line arguments.\n\n@param args the command line arguments\n@return the results of parsing the command line arguments\n@throws ParseException if the arguments are invalid[SEP]private CommandLine parseArgs(String[] args) throws ParseException {\n        final CommandLineParser parser = new DefaultParser();\n        final Options options = createCommandLineOptions();\n        return parser.parse(options, args);\n    }"}
{"func_code_string":"public void parse(File file) throws UpdateException {\n        LOGGER.debug(\"Parsing \" + file.getName());\n        try (InputStream fin = new FileInputStream(file);\n                InputStream in = new GZIPInputStream(fin);\n                InputStreamReader isr = new InputStreamReader(in, UTF_8);\n                JsonReader reader = new JsonReader(isr)) {\n            final Gson gson = new GsonBuilder().create();\n\n            reader.beginObject();\n\n            while (reader.hasNext() && !JsonToken.BEGIN_ARRAY.equals(reader.peek())) {\n                reader.skipValue();\n            }\n            reader.beginArray();\n            while (reader.hasNext()) {\n                final DefCveItem cve = gson.fromJson(reader, DefCveItem.class);\n\n                \/\/cve.getCve().getCVEDataMeta().getSTATE();\n                if (testCveCpeStartWithFilter(cve)) {\n                    cveDB.updateVulnerability(cve);\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            LOGGER.error(ex.getMessage());\n            throw new UpdateException(\"Unable to find the NVD CPE file, `\" + file + \"`, to parse\", ex);\n        } catch (IOException ex) {\n            LOGGER.error(\"Error reading NVD JSON data: {}\", file);\n            LOGGER.debug(\"Error extracting the NVD JSON data from: \" + file.toString(), ex);\n            throw new UpdateException(\"Unable to find the NVD CPE file to parse\", ex);\n        }\n    }","func_code_tokens":["public","void","parse","(","File","file",")","throws","UpdateException","{","LOGGER",".","debug","(","\"Parsing \"","+","file",".","getName","(",")",")",";","try","(","InputStream","fin","=","new","FileInputStream","(","file",")",";","InputStream","in","=","new","GZIPInputStream","(","fin",")",";","InputStreamReader","isr","=","new","InputStreamReader","(","in",",","UTF_8",")",";","JsonReader","reader","=","new","JsonReader","(","isr",")",")","{","final","Gson","gson","=","new","GsonBuilder","(",")",".","create","(",")",";","reader",".","beginObject","(",")",";","while","(","reader",".","hasNext","(",")","&&","!","JsonToken",".","BEGIN_ARRAY",".","equals","(","reader",".","peek","(",")",")",")","{","reader",".","skipValue","(",")",";","}","reader",".","beginArray","(",")",";","while","(","reader",".","hasNext","(",")",")","{","final","DefCveItem","cve","=","gson",".","fromJson","(","reader",",","DefCveItem",".","class",")",";","\/\/cve.getCve().getCVEDataMeta().getSTATE();","if","(","testCveCpeStartWithFilter","(","cve",")",")","{","cveDB",".","updateVulnerability","(","cve",")",";","}","}","}","catch","(","FileNotFoundException","ex",")","{","LOGGER",".","error","(","ex",".","getMessage","(",")",")",";","throw","new","UpdateException","(","\"Unable to find the NVD CPE file, `\"","+","file","+","\"`, to parse\"",",","ex",")",";","}","catch","(","IOException","ex",")","{","LOGGER",".","error","(","\"Error reading NVD JSON data: {}\"",",","file",")",";","LOGGER",".","debug","(","\"Error extracting the NVD JSON data from: \"","+","file",".","toString","(",")",",","ex",")",";","throw","new","UpdateException","(","\"Unable to find the NVD CPE file to parse\"",",","ex",")",";","}","}"],"func_documentation_string":"Parses the NVD JSON file and inserts\/updates data into the database.\n\n@param file the NVD JSON file to parse\n@throws UpdateException thrown if the file could not be read","func_documentation_tokens":["Parses","the","NVD","JSON","file","and","inserts","\/","updates","data","into","the","database","."],"label":1,"text":"Parses the NVD JSON file and inserts\/updates data into the database.\n\n@param file the NVD JSON file to parse\n@throws UpdateException thrown if the file could not be read[SEP]public void parse(File file) throws UpdateException {\n        LOGGER.debug(\"Parsing \" + file.getName());\n        try (InputStream fin = new FileInputStream(file);\n                InputStream in = new GZIPInputStream(fin);\n                InputStreamReader isr = new InputStreamReader(in, UTF_8);\n                JsonReader reader = new JsonReader(isr)) {\n            final Gson gson = new GsonBuilder().create();\n\n            reader.beginObject();\n\n            while (reader.hasNext() && !JsonToken.BEGIN_ARRAY.equals(reader.peek())) {\n                reader.skipValue();\n            }\n            reader.beginArray();\n            while (reader.hasNext()) {\n                final DefCveItem cve = gson.fromJson(reader, DefCveItem.class);\n\n                \/\/cve.getCve().getCVEDataMeta().getSTATE();\n                if (testCveCpeStartWithFilter(cve)) {\n                    cveDB.updateVulnerability(cve);\n                }\n            }\n        } catch (FileNotFoundException ex) {\n            LOGGER.error(ex.getMessage());\n            throw new UpdateException(\"Unable to find the NVD CPE file, `\" + file + \"`, to parse\", ex);\n        } catch (IOException ex) {\n            LOGGER.error(\"Error reading NVD JSON data: {}\", file);\n            LOGGER.debug(\"Error extracting the NVD JSON data from: \" + file.toString(), ex);\n            throw new UpdateException(\"Unable to find the NVD CPE file to parse\", ex);\n        }\n    }"}
{"func_code_string":"public void csv(String file) throws IOException {\n        CsvWriteOptions options = CsvWriteOptions.builder(file).build();\n        new CsvWriter().write(table, options);\n    }","func_code_tokens":["public","void","csv","(","String","file",")","throws","IOException","{","CsvWriteOptions","options","=","CsvWriteOptions",".","builder","(","file",")",".","build","(",")",";","new","CsvWriter","(",")",".","write","(","table",",","options",")",";","}"],"func_documentation_string":"legacy methods left for backwards compatibility","func_documentation_tokens":["legacy","methods","left","for","backwards","compatibility"],"label":1,"text":"legacy methods left for backwards compatibility[SEP]public void csv(String file) throws IOException {\n        CsvWriteOptions options = CsvWriteOptions.builder(file).build();\n        new CsvWriter().write(table, options);\n    }"}
{"func_code_string":"public NumberExpression<Long> countDistinct() {\n        if (countDistinct == null) {\n            countDistinct = Expressions.numberOperation(Long.class, Ops.AggOps.COUNT_DISTINCT_AGG, mixin);\n        }\n        return countDistinct;\n    }","func_code_tokens":["public","NumberExpression","<","Long",">","countDistinct","(",")","{","if","(","countDistinct","==","null",")","{","countDistinct","=","Expressions",".","numberOperation","(","Long",".","class",",","Ops",".","AggOps",".","COUNT_DISTINCT_AGG",",","mixin",")",";","}","return","countDistinct",";","}"],"func_documentation_string":"Get the {@code count(distinct this)} expression\n\n@return count(distinct this)","func_documentation_tokens":["Get","the","{","@code","count","(","distinct","this",")","}","expression"],"label":0,"text":"Get the {@code count(distinct this)} expression\n\n@return count(distinct this)[SEP]public NumberExpression<Long> countDistinct() {\n        if (countDistinct == null) {\n            countDistinct = Expressions.numberOperation(Long.class, Ops.AggOps.COUNT_DISTINCT_AGG, mixin);\n        }\n        return countDistinct;\n    }"}
{"func_code_string":"private static String coerceToEpoch(String s) {\n\t\tLong epoch = parseEpochSecond(s);\n\t\tif (epoch != null) {\n\t\t\treturn String.valueOf(epoch);\n\t\t}\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n\t\ttry {\n\t\t\treturn String.valueOf(format.parse(s).getTime());\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\treturn s;\n\t\t}\n\t}","func_code_tokens":["private","static","String","coerceToEpoch","(","String","s",")","{","Long","epoch","=","parseEpochSecond","(","s",")",";","if","(","epoch","!=","null",")","{","return","String",".","valueOf","(","epoch",")",";","}","SimpleDateFormat","format","=","new","SimpleDateFormat","(","\"yyyy-MM-dd'T'HH:mm:ssZ\"",")",";","try","{","return","String",".","valueOf","(","format",".","parse","(","s",")",".","getTime","(",")",")",";","}","catch","(","ParseException","ex",")","{","return","s",";","}","}"],"func_documentation_string":"Attempt to convert the specified value to epoch time. Git properties information\nare known to be specified either as epoch time in seconds or using a specific date\nformat.\n@param s the value to coerce to\n@return the epoch time in milliseconds or the original value if it couldn't be\nconverted","func_documentation_tokens":["Attempt","to","convert","the","specified","value","to","epoch","time",".","Git","properties","information","are","known","to","be","specified","either","as","epoch","time","in","seconds","or","using","a","specific","date","format","."],"label":1,"text":"Attempt to convert the specified value to epoch time. Git properties information\nare known to be specified either as epoch time in seconds or using a specific date\nformat.\n@param s the value to coerce to\n@return the epoch time in milliseconds or the original value if it couldn't be\nconverted[SEP]private static String coerceToEpoch(String s) {\n\t\tLong epoch = parseEpochSecond(s);\n\t\tif (epoch != null) {\n\t\t\treturn String.valueOf(epoch);\n\t\t}\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n\t\ttry {\n\t\t\treturn String.valueOf(format.parse(s).getTime());\n\t\t}\n\t\tcatch (ParseException ex) {\n\t\t\treturn s;\n\t\t}\n\t}"}
{"func_code_string":"private Cookie createCookie(String str) throws UnsupportedEncodingException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Cookie name = \" + AUTH_COOKIE + \" value = \" + str);\n    }\n    Cookie cookie = new Cookie(AUTH_COOKIE, str);\n\n    cookie.setMaxAge(cookieMaxAge);\n    if (cookieDomain != null) {\n      cookie.setDomain(cookieDomain);\n    }\n    if (cookiePath != null) {\n      cookie.setPath(cookiePath);\n    }\n    cookie.setSecure(isCookieSecure);\n    return cookie;\n  }","func_code_tokens":["private","Cookie","createCookie","(","String","str",")","throws","UnsupportedEncodingException","{","if","(","LOG",".","isDebugEnabled","(",")",")","{","LOG",".","debug","(","\"Cookie name = \"","+","AUTH_COOKIE","+","\" value = \"","+","str",")",";","}","Cookie","cookie","=","new","Cookie","(","AUTH_COOKIE",",","str",")",";","cookie",".","setMaxAge","(","cookieMaxAge",")",";","if","(","cookieDomain","!=","null",")","{","cookie",".","setDomain","(","cookieDomain",")",";","}","if","(","cookiePath","!=","null",")","{","cookie",".","setPath","(","cookiePath",")",";","}","cookie",".","setSecure","(","isCookieSecure",")",";","return","cookie",";","}"],"func_documentation_string":"Generate a server side cookie given the cookie value as the input.\n@param str Input string token.\n@return The generated cookie.\n@throws UnsupportedEncodingException","func_documentation_tokens":["Generate","a","server","side","cookie","given","the","cookie","value","as","the","input","."],"label":1,"text":"Generate a server side cookie given the cookie value as the input.\n@param str Input string token.\n@return The generated cookie.\n@throws UnsupportedEncodingException[SEP]private Cookie createCookie(String str) throws UnsupportedEncodingException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Cookie name = \" + AUTH_COOKIE + \" value = \" + str);\n    }\n    Cookie cookie = new Cookie(AUTH_COOKIE, str);\n\n    cookie.setMaxAge(cookieMaxAge);\n    if (cookieDomain != null) {\n      cookie.setDomain(cookieDomain);\n    }\n    if (cookiePath != null) {\n      cookie.setPath(cookiePath);\n    }\n    cookie.setSecure(isCookieSecure);\n    return cookie;\n  }"}
{"func_code_string":"private static String getHttpOnlyCookieHeader(Cookie cookie) {\n    NewCookie newCookie = new NewCookie(cookie.getName(), cookie.getValue(),\n      cookie.getPath(), cookie.getDomain(), cookie.getVersion(),\n      cookie.getComment(), cookie.getMaxAge(), cookie.getSecure());\n    return newCookie + \"; HttpOnly\";\n  }","func_code_tokens":["private","static","String","getHttpOnlyCookieHeader","(","Cookie","cookie",")","{","NewCookie","newCookie","=","new","NewCookie","(","cookie",".","getName","(",")",",","cookie",".","getValue","(",")",",","cookie",".","getPath","(",")",",","cookie",".","getDomain","(",")",",","cookie",".","getVersion","(",")",",","cookie",".","getComment","(",")",",","cookie",".","getMaxAge","(",")",",","cookie",".","getSecure","(",")",")",";","return","newCookie","+","\"; HttpOnly\"",";","}"],"func_documentation_string":"Generate httponly cookie from HS2 cookie\n@param cookie HS2 generated cookie\n@return The httponly cookie","func_documentation_tokens":["Generate","httponly","cookie","from","HS2","cookie"],"label":1,"text":"Generate httponly cookie from HS2 cookie\n@param cookie HS2 generated cookie\n@return The httponly cookie[SEP]private static String getHttpOnlyCookieHeader(Cookie cookie) {\n    NewCookie newCookie = new NewCookie(cookie.getName(), cookie.getValue(),\n      cookie.getPath(), cookie.getDomain(), cookie.getVersion(),\n      cookie.getComment(), cookie.getMaxAge(), cookie.getSecure());\n    return newCookie + \"; HttpOnly\";\n  }"}
{"func_code_string":"public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException {\n\t\t\/\/ we unwrap the file system to get raw streams without safety net\n\t\tFileSystem sFS = FileSystem.getUnguardedFileSystem(sourcePath.toUri());\n\t\tFileSystem tFS = FileSystem.getUnguardedFileSystem(targetPath.toUri());\n\t\tif (!tFS.exists(targetPath)) {\n\t\t\tif (sFS.getFileStatus(sourcePath).isDir()) {\n\t\t\t\tinternalCopyDirectory(sourcePath, targetPath, executable, sFS, tFS);\n\t\t\t} else {\n\t\t\t\tinternalCopyFile(sourcePath, targetPath, executable, sFS, tFS);\n\t\t\t}\n\t\t}\n\t}","func_code_tokens":["public","static","void","copy","(","Path","sourcePath",",","Path","targetPath",",","boolean","executable",")","throws","IOException","{","\/\/ we unwrap the file system to get raw streams without safety net","FileSystem","sFS","=","FileSystem",".","getUnguardedFileSystem","(","sourcePath",".","toUri","(",")",")",";","FileSystem","tFS","=","FileSystem",".","getUnguardedFileSystem","(","targetPath",".","toUri","(",")",")",";","if","(","!","tFS",".","exists","(","targetPath",")",")","{","if","(","sFS",".","getFileStatus","(","sourcePath",")",".","isDir","(",")",")","{","internalCopyDirectory","(","sourcePath",",","targetPath",",","executable",",","sFS",",","tFS",")",";","}","else","{","internalCopyFile","(","sourcePath",",","targetPath",",","executable",",","sFS",",","tFS",")",";","}","}","}"],"func_documentation_string":"Copies all files from source to target and sets executable flag. Paths might be on different systems.\n@param sourcePath source path to copy from\n@param targetPath target path to copy to\n@param executable if target file should be executable\n@throws IOException if the copy fails","func_documentation_tokens":["Copies","all","files","from","source","to","target","and","sets","executable","flag",".","Paths","might","be","on","different","systems","."],"label":1,"text":"Copies all files from source to target and sets executable flag. Paths might be on different systems.\n@param sourcePath source path to copy from\n@param targetPath target path to copy to\n@param executable if target file should be executable\n@throws IOException if the copy fails[SEP]public static void copy(Path sourcePath, Path targetPath, boolean executable) throws IOException {\n\t\t\/\/ we unwrap the file system to get raw streams without safety net\n\t\tFileSystem sFS = FileSystem.getUnguardedFileSystem(sourcePath.toUri());\n\t\tFileSystem tFS = FileSystem.getUnguardedFileSystem(targetPath.toUri());\n\t\tif (!tFS.exists(targetPath)) {\n\t\t\tif (sFS.getFileStatus(sourcePath).isDir()) {\n\t\t\t\tinternalCopyDirectory(sourcePath, targetPath, executable, sFS, tFS);\n\t\t\t} else {\n\t\t\t\tinternalCopyFile(sourcePath, targetPath, executable, sFS, tFS);\n\t\t\t}\n\t\t}\n\t}"}
{"func_code_string":"public synchronized void save() {\n        if (BulkChange.contains(this)) {\n            return;\n        }\n        \n        File file = getConfigFile();\n        try {\n            List<String> allSignatures = new ArrayList<>(whitelistSignaturesFromUserControlledList);\n            blacklistSignaturesFromUserControlledList.stream()\n                    .map(signature -> \"!\" + signature)\n                    .forEach(allSignatures::add);\n            \n            FileUtils.writeLines(file, allSignatures);\n        } catch (IOException e) {\n            LOGGER.log(Level.WARNING, \"Failed to save \" + file.getAbsolutePath(), e);\n        }\n    }","func_code_tokens":["public","synchronized","void","save","(",")","{","if","(","BulkChange",".","contains","(","this",")",")","{","return",";","}","File","file","=","getConfigFile","(",")",";","try","{","List","<","String",">","allSignatures","=","new","ArrayList","<>","(","whitelistSignaturesFromUserControlledList",")",";","blacklistSignaturesFromUserControlledList",".","stream","(",")",".","map","(","signature","->","\"!\"","+","signature",")",".","forEach","(","allSignatures","::","add",")",";","FileUtils",".","writeLines","(","file",",","allSignatures",")",";","}","catch","(","IOException","e",")","{","LOGGER",".","log","(","Level",".","WARNING",",","\"Failed to save \"","+","file",".","getAbsolutePath","(",")",",","e",")",";","}","}"],"func_documentation_string":"Saves the configuration info to the disk.","func_documentation_tokens":["Saves","the","configuration","info","to","the","disk","."],"label":1,"text":"Saves the configuration info to the disk.[SEP]public synchronized void save() {\n        if (BulkChange.contains(this)) {\n            return;\n        }\n        \n        File file = getConfigFile();\n        try {\n            List<String> allSignatures = new ArrayList<>(whitelistSignaturesFromUserControlledList);\n            blacklistSignaturesFromUserControlledList.stream()\n                    .map(signature -> \"!\" + signature)\n                    .forEach(allSignatures::add);\n            \n            FileUtils.writeLines(file, allSignatures);\n        } catch (IOException e) {\n            LOGGER.log(Level.WARNING, \"Failed to save \" + file.getAbsolutePath(), e);\n        }\n    }"}
{"func_code_string":"public static <T extends EurekaEndpoint> List<T> randomize(List<T> list) {\n        List<T> randomList = new ArrayList<>(list);\n        if (randomList.size() < 2) {\n            return randomList;\n        }\n        Random random = new Random(LOCAL_IPV4_ADDRESS.hashCode());\n        int last = randomList.size() - 1;\n        for (int i = 0; i < last; i++) {\n            int pos = random.nextInt(randomList.size() - i);\n            if (pos != i) {\n                Collections.swap(randomList, i, pos);\n            }\n        }\n        return randomList;\n    }","func_code_tokens":["public","static","<","T","extends","EurekaEndpoint",">","List","<","T",">","randomize","(","List","<","T",">","list",")","{","List","<","T",">","randomList","=","new","ArrayList","<>","(","list",")",";","if","(","randomList",".","size","(",")","<","2",")","{","return","randomList",";","}","Random","random","=","new","Random","(","LOCAL_IPV4_ADDRESS",".","hashCode","(",")",")",";","int","last","=","randomList",".","size","(",")","-","1",";","for","(","int","i","=","0",";","i","<","last",";","i","++",")","{","int","pos","=","random",".","nextInt","(","randomList",".","size","(",")","-","i",")",";","if","(","pos","!=","i",")","{","Collections",".","swap","(","randomList",",","i",",","pos",")",";","}","}","return","randomList",";","}"],"func_documentation_string":"Randomize server list using local IPv4 address hash as a seed.\n\n@return a copy of the original list with elements in the random order","func_documentation_tokens":["Randomize","server","list","using","local","IPv4","address","hash","as","a","seed","."],"label":0,"text":"Randomize server list using local IPv4 address hash as a seed.\n\n@return a copy of the original list with elements in the random order[SEP]public static <T extends EurekaEndpoint> List<T> randomize(List<T> list) {\n        List<T> randomList = new ArrayList<>(list);\n        if (randomList.size() < 2) {\n            return randomList;\n        }\n        Random random = new Random(LOCAL_IPV4_ADDRESS.hashCode());\n        int last = randomList.size() - 1;\n        for (int i = 0; i < last; i++) {\n            int pos = random.nextInt(randomList.size() - i);\n            if (pos != i) {\n                Collections.swap(randomList, i, pos);\n            }\n        }\n        return randomList;\n    }"}
{"func_code_string":"public static InputStream decompress(final InputStream in, final String fileName) throws IOException\n  {\n    if (fileName.endsWith(GZ_SUFFIX)) {\n      return gzipInputStream(in);\n    } else if (fileName.endsWith(BZ2_SUFFIX)) {\n      return new BZip2CompressorInputStream(in, true);\n    } else if (fileName.endsWith(XZ_SUFFIX)) {\n      return new XZCompressorInputStream(in, true);\n    } else if (fileName.endsWith(SNAPPY_SUFFIX)) {\n      return new FramedSnappyCompressorInputStream(in);\n    } else if (fileName.endsWith(ZSTD_SUFFIX)) {\n      return new ZstdCompressorInputStream(in);\n    } else if (fileName.endsWith(ZIP_SUFFIX)) {\n      \/\/ This reads the first file in the archive.\n      final ZipInputStream zipIn = new ZipInputStream(in, StandardCharsets.UTF_8);\n      try {\n        final ZipEntry nextEntry = zipIn.getNextEntry();\n        if (nextEntry == null) {\n          zipIn.close();\n\n          \/\/ No files in the archive - return an empty stream.\n          return new ByteArrayInputStream(new byte[0]);\n        }\n        return zipIn;\n      }\n      catch (IOException e) {\n        try {\n          zipIn.close();\n        }\n        catch (IOException e2) {\n          e.addSuppressed(e2);\n        }\n        throw e;\n      }\n    } else {\n      return in;\n    }\n  }","func_code_tokens":["public","static","InputStream","decompress","(","final","InputStream","in",",","final","String","fileName",")","throws","IOException","{","if","(","fileName",".","endsWith","(","GZ_SUFFIX",")",")","{","return","gzipInputStream","(","in",")",";","}","else","if","(","fileName",".","endsWith","(","BZ2_SUFFIX",")",")","{","return","new","BZip2CompressorInputStream","(","in",",","true",")",";","}","else","if","(","fileName",".","endsWith","(","XZ_SUFFIX",")",")","{","return","new","XZCompressorInputStream","(","in",",","true",")",";","}","else","if","(","fileName",".","endsWith","(","SNAPPY_SUFFIX",")",")","{","return","new","FramedSnappyCompressorInputStream","(","in",")",";","}","else","if","(","fileName",".","endsWith","(","ZSTD_SUFFIX",")",")","{","return","new","ZstdCompressorInputStream","(","in",")",";","}","else","if","(","fileName",".","endsWith","(","ZIP_SUFFIX",")",")","{","\/\/ This reads the first file in the archive.","final","ZipInputStream","zipIn","=","new","ZipInputStream","(","in",",","StandardCharsets",".","UTF_8",")",";","try","{","final","ZipEntry","nextEntry","=","zipIn",".","getNextEntry","(",")",";","if","(","nextEntry","==","null",")","{","zipIn",".","close","(",")",";","\/\/ No files in the archive - return an empty stream.","return","new","ByteArrayInputStream","(","new","byte","[","0","]",")",";","}","return","zipIn",";","}","catch","(","IOException","e",")","{","try","{","zipIn",".","close","(",")",";","}","catch","(","IOException","e2",")","{","e",".","addSuppressed","(","e2",")",";","}","throw","e",";","}","}","else","{","return","in",";","}","}"],"func_documentation_string":"Decompress an input stream from a file, based on the filename.","func_documentation_tokens":["Decompress","an","input","stream","from","a","file","based","on","the","filename","."],"label":1,"text":"Decompress an input stream from a file, based on the filename.[SEP]public static InputStream decompress(final InputStream in, final String fileName) throws IOException\n  {\n    if (fileName.endsWith(GZ_SUFFIX)) {\n      return gzipInputStream(in);\n    } else if (fileName.endsWith(BZ2_SUFFIX)) {\n      return new BZip2CompressorInputStream(in, true);\n    } else if (fileName.endsWith(XZ_SUFFIX)) {\n      return new XZCompressorInputStream(in, true);\n    } else if (fileName.endsWith(SNAPPY_SUFFIX)) {\n      return new FramedSnappyCompressorInputStream(in);\n    } else if (fileName.endsWith(ZSTD_SUFFIX)) {\n      return new ZstdCompressorInputStream(in);\n    } else if (fileName.endsWith(ZIP_SUFFIX)) {\n      \/\/ This reads the first file in the archive.\n      final ZipInputStream zipIn = new ZipInputStream(in, StandardCharsets.UTF_8);\n      try {\n        final ZipEntry nextEntry = zipIn.getNextEntry();\n        if (nextEntry == null) {\n          zipIn.close();\n\n          \/\/ No files in the archive - return an empty stream.\n          return new ByteArrayInputStream(new byte[0]);\n        }\n        return zipIn;\n      }\n      catch (IOException e) {\n        try {\n          zipIn.close();\n        }\n        catch (IOException e2) {\n          e.addSuppressed(e2);\n        }\n        throw e;\n      }\n    } else {\n      return in;\n    }\n  }"}
{"func_code_string":"public void save(@NonNull File meanFile, @NonNull File stdFile) throws IOException {\n        Nd4j.saveBinary(getMean(), meanFile);\n        Nd4j.saveBinary(getStd(), stdFile);\n    }","func_code_tokens":["public","void","save","(","@","NonNull","File","meanFile",",","@","NonNull","File","stdFile",")","throws","IOException","{","Nd4j",".","saveBinary","(","getMean","(",")",",","meanFile",")",";","Nd4j",".","saveBinary","(","getStd","(",")",",","stdFile",")",";","}"],"func_documentation_string":"Save distribution statistics to the file system\n\n@param meanFile file to contain the means\n@param stdFile  file to contain the standard deviations","func_documentation_tokens":["Save","distribution","statistics","to","the","file","system"],"label":0,"text":"Save distribution statistics to the file system\n\n@param meanFile file to contain the means\n@param stdFile  file to contain the standard deviations[SEP]public void save(@NonNull File meanFile, @NonNull File stdFile) throws IOException {\n        Nd4j.saveBinary(getMean(), meanFile);\n        Nd4j.saveBinary(getStd(), stdFile);\n    }"}
{"func_code_string":"public static double score(MultiLayerNetwork model, DataSetIterator testSet, RegressionValue regressionValue) {\n        RegressionEvaluation eval = model.evaluateRegression(testSet);\n        return getScoreFromRegressionEval(eval, regressionValue);\n    }","func_code_tokens":["public","static","double","score","(","MultiLayerNetwork","model",",","DataSetIterator","testSet",",","RegressionValue","regressionValue",")","{","RegressionEvaluation","eval","=","model",".","evaluateRegression","(","testSet",")",";","return","getScoreFromRegressionEval","(","eval",",","regressionValue",")",";","}"],"func_documentation_string":"Score the given multi layer network\n@param model the model to score\n@param testSet the test set\n@param regressionValue the regression function to use\n@return the score from the given test set","func_documentation_tokens":["Score","the","given","multi","layer","network"],"label":0,"text":"Score the given multi layer network\n@param model the model to score\n@param testSet the test set\n@param regressionValue the regression function to use\n@return the score from the given test set[SEP]public static double score(MultiLayerNetwork model, DataSetIterator testSet, RegressionValue regressionValue) {\n        RegressionEvaluation eval = model.evaluateRegression(testSet);\n        return getScoreFromRegressionEval(eval, regressionValue);\n    }"}
{"func_code_string":"private static String reverseString(String in) {\n        StringBuilder out = new StringBuilder(in).reverse();\n        return out.toString();\n    }","func_code_tokens":["private","static","String","reverseString","(","String","in",")","{","StringBuilder","out","=","new","StringBuilder","(","in",")",".","reverse","(",")",";","return","out",".","toString","(",")",";","}"],"func_documentation_string":"This method takes a string as input reverses it and returns the result\n\n@param in the string to be reversed\n@return the reversed string","func_documentation_tokens":["This","method","takes","a","string","as","input","reverses","it","and","returns","the","result"],"label":1,"text":"This method takes a string as input reverses it and returns the result\n\n@param in the string to be reversed\n@return the reversed string[SEP]private static String reverseString(String in) {\n        StringBuilder out = new StringBuilder(in).reverse();\n        return out.toString();\n    }"}
{"func_code_string":"CommandLine parse(DefaultCommandLine cl, String[] args) {\n        parseInternal(cl, args, true);\n        return cl;\n    }","func_code_tokens":["CommandLine","parse","(","DefaultCommandLine","cl",",","String","[","]","args",")","{","parseInternal","(","cl",",","args",",","true",")",";","return","cl",";","}"],"func_documentation_string":"Parse the command line entry.\n@param cl commandLine\n@param args args passed in\n@return commandLine","func_documentation_tokens":["Parse","the","command","line","entry","."],"label":1,"text":"Parse the command line entry.\n@param cl commandLine\n@param args args passed in\n@return commandLine[SEP]CommandLine parse(DefaultCommandLine cl, String[] args) {\n        parseInternal(cl, args, true);\n        return cl;\n    }"}
{"func_code_string":"public static double similarity(String s1, String s2) {\n    if (s1.equals(s2))\n      return 1.0;\n\n    \/\/ ensure that s1 is shorter than or same length as s2\n    if (s1.length() > s2.length()) {\n      String tmp = s2;\n      s2 = s1;\n      s1 = tmp;\n    }\n    \/*\n     * this list of Boolean values is used for avoiding duplicated count of\n     * common characters in S2\n     *\/\n    List<Boolean> isCommonCharInS2 = new ArrayList<Boolean>();\n    for (int i=0; i<s2.length(); i++) {\n      isCommonCharInS2.add(false);\n    }\n\n    \/\/ (1) find the number of characters the two strings have in common.\n    \/\/ note that matching characters can only be half the length of the\n    \/\/ longer string apart.\n    int maxdist = (int) Math.floor(s2.length() \/ 2) ;\n    int c = 0; \/\/ count of common characters\n    int t = 0; \/\/ count of transpositions\n    int prevpos = -1;\n    for (int ix = 0; ix < s1.length(); ix++) {\n      char ch = s1.charAt(ix);\n\n      \/\/ now try to find it in s2\n      for (int ix2 = Math.max(0, ix - maxdist);\n           ix2 < Math.min(s2.length(), ix + maxdist);\n           ix2++) {\n        if (ch == s2.charAt(ix2) && !isCommonCharInS2.get(ix2)) {\n          c++; \/\/ we found a common character\n          isCommonCharInS2.set(ix2, true);\n          if (prevpos != -1 && ix2 < prevpos)\n            t++; \/\/ moved back before earlier\n          prevpos = ix2;\n          break;\n        }\n      }\n    }\n\n    \/\/ we don't divide t by 2 because as far as we can tell, the above\n    \/\/ code counts transpositions directly.\n\n    \/\/ System.out.println(\"c: \" + c);\n    \/\/ System.out.println(\"t: \" + t);\n    \/\/ System.out.println(\"c\/m: \" + (c \/ (double) s1.length()));\n    \/\/ System.out.println(\"c\/n: \" + (c \/ (double) s2.length()));\n    \/\/ System.out.println(\"(c-t)\/c: \" + ((c - t) \/ (double) c));\n\n    \/\/ we might have to give up right here\n    if (c == 0)\n      return 0.0;\n\n    \/\/ first compute the score\n    double score = ((c \/ (double) s1.length()) +\n            (c \/ (double) s2.length()) +\n            ((c - t) \/ (double) c)) \/ 3.0;\n\n    \/\/ (2) common prefix modification\n    int p = 0; \/\/ length of prefix\n    int last = Math.min(4, s1.length());\n    for (; p < last && s1.charAt(p) == s2.charAt(p); p++)\n      ;\n\n    score = score + ((p * (1 - score)) \/ 10);\n\n    \/\/ (3) longer string adjustment\n    \/\/ I'm confused about this part. Winkler's original source code includes\n    \/\/ it, and Yancey's 2005 paper describes it. However, Winkler's list of\n    \/\/ test cases in his 2006 paper does not include this modification. So\n    \/\/ is this part of Jaro-Winkler, or is it not? Hard to say.\n    \/\/\n    \/\/   if (s1.length() >= 5 && \/\/ both strings at least 5 characters long\n    \/\/       c - p >= 2 && \/\/ at least two common characters besides prefix\n    \/\/       c - p >= ((s1.length() - p) \/ 2)) \/\/ fairly rich in common chars\n    \/\/     {\n    \/\/     System.out.println(\"ADJUSTED!\");\n    \/\/     score = score + ((1 - score) * ((c - (p + 1)) \/\n    \/\/                                     ((double) ((s1.length() + s2.length())\n    \/\/                                                - (2 * (p - 1))))));\n    \/\/ }\n\n    \/\/ (4) similar characters adjustment\n    \/\/ the same holds for this as for (3) above.\n\n    return score;\n  }","func_code_tokens":["public","static","double","similarity","(","String","s1",",","String","s2",")","{","if","(","s1",".","equals","(","s2",")",")","return","1.0",";","\/\/ ensure that s1 is shorter than or same length as s2","if","(","s1",".","length","(",")",">","s2",".","length","(",")",")","{","String","tmp","=","s2",";","s2","=","s1",";","s1","=","tmp",";","}","\/*\n     * this list of Boolean values is used for avoiding duplicated count of\n     * common characters in S2\n     *\/","List","<","Boolean",">","isCommonCharInS2","=","new","ArrayList","<","Boolean",">","(",")",";","for","(","int","i","=","0",";","i","<","s2",".","length","(",")",";","i","++",")","{","isCommonCharInS2",".","add","(","false",")",";","}","\/\/ (1) find the number of characters the two strings have in common.","\/\/ note that matching characters can only be half the length of the","\/\/ longer string apart.","int","maxdist","=","(","int",")","Math",".","floor","(","s2",".","length","(",")","\/","2",")",";","int","c","=","0",";","\/\/ count of common characters","int","t","=","0",";","\/\/ count of transpositions","int","prevpos","=","-","1",";","for","(","int","ix","=","0",";","ix","<","s1",".","length","(",")",";","ix","++",")","{","char","ch","=","s1",".","charAt","(","ix",")",";","\/\/ now try to find it in s2","for","(","int","ix2","=","Math",".","max","(","0",",","ix","-","maxdist",")",";","ix2","<","Math",".","min","(","s2",".","length","(",")",",","ix","+","maxdist",")",";","ix2","++",")","{","if","(","ch","==","s2",".","charAt","(","ix2",")","&&","!","isCommonCharInS2",".","get","(","ix2",")",")","{","c","++",";","\/\/ we found a common character","isCommonCharInS2",".","set","(","ix2",",","true",")",";","if","(","prevpos","!=","-","1","&&","ix2","<","prevpos",")","t","++",";","\/\/ moved back before earlier","prevpos","=","ix2",";","break",";","}","}","}","\/\/ we don't divide t by 2 because as far as we can tell, the above","\/\/ code counts transpositions directly.","\/\/ System.out.println(\"c: \" + c);","\/\/ System.out.println(\"t: \" + t);","\/\/ System.out.println(\"c\/m: \" + (c \/ (double) s1.length()));","\/\/ System.out.println(\"c\/n: \" + (c \/ (double) s2.length()));","\/\/ System.out.println(\"(c-t)\/c: \" + ((c - t) \/ (double) c));","\/\/ we might have to give up right here","if","(","c","==","0",")","return","0.0",";","\/\/ first compute the score","double","score","=","(","(","c","\/","(","double",")","s1",".","length","(",")",")","+","(","c","\/","(","double",")","s2",".","length","(",")",")","+","(","(","c","-","t",")","\/","(","double",")","c",")",")","\/","3.0",";","\/\/ (2) common prefix modification","int","p","=","0",";","\/\/ length of prefix","int","last","=","Math",".","min","(","4",",","s1",".","length","(",")",")",";","for","(",";","p","<","last","&&","s1",".","charAt","(","p",")","==","s2",".","charAt","(","p",")",";","p","++",")",";","score","=","score","+","(","(","p","*","(","1","-","score",")",")","\/","10",")",";","\/\/ (3) longer string adjustment","\/\/ I'm confused about this part. Winkler's original source code includes","\/\/ it, and Yancey's 2005 paper describes it. However, Winkler's list of","\/\/ test cases in his 2006 paper does not include this modification. So","\/\/ is this part of Jaro-Winkler, or is it not? Hard to say.","\/\/","\/\/   if (s1.length() >= 5 && \/\/ both strings at least 5 characters long","\/\/       c - p >= 2 && \/\/ at least two common characters besides prefix","\/\/       c - p >= ((s1.length() - p) \/ 2)) \/\/ fairly rich in common chars","\/\/     {","\/\/     System.out.println(\"ADJUSTED!\");","\/\/     score = score + ((1 - score) * ((c - (p + 1)) \/","\/\/                                     ((double) ((s1.length() + s2.length())","\/\/                                                - (2 * (p - 1))))));","\/\/ }","\/\/ (4) similar characters adjustment","\/\/ the same holds for this as for (3) above.","return","score",";","}"],"func_documentation_string":"Returns normalized score, with 0.0 meaning no similarity at all,\nand 1.0 meaning full equality.","func_documentation_tokens":["Returns","normalized","score","with","0",".","0","meaning","no","similarity","at","all","and","1",".","0","meaning","full","equality","."],"label":1,"text":"Returns normalized score, with 0.0 meaning no similarity at all,\nand 1.0 meaning full equality.[SEP]public static double similarity(String s1, String s2) {\n    if (s1.equals(s2))\n      return 1.0;\n\n    \/\/ ensure that s1 is shorter than or same length as s2\n    if (s1.length() > s2.length()) {\n      String tmp = s2;\n      s2 = s1;\n      s1 = tmp;\n    }\n    \/*\n     * this list of Boolean values is used for avoiding duplicated count of\n     * common characters in S2\n     *\/\n    List<Boolean> isCommonCharInS2 = new ArrayList<Boolean>();\n    for (int i=0; i<s2.length(); i++) {\n      isCommonCharInS2.add(false);\n    }\n\n    \/\/ (1) find the number of characters the two strings have in common.\n    \/\/ note that matching characters can only be half the length of the\n    \/\/ longer string apart.\n    int maxdist = (int) Math.floor(s2.length() \/ 2) ;\n    int c = 0; \/\/ count of common characters\n    int t = 0; \/\/ count of transpositions\n    int prevpos = -1;\n    for (int ix = 0; ix < s1.length(); ix++) {\n      char ch = s1.charAt(ix);\n\n      \/\/ now try to find it in s2\n      for (int ix2 = Math.max(0, ix - maxdist);\n           ix2 < Math.min(s2.length(), ix + maxdist);\n           ix2++) {\n        if (ch == s2.charAt(ix2) && !isCommonCharInS2.get(ix2)) {\n          c++; \/\/ we found a common character\n          isCommonCharInS2.set(ix2, true);\n          if (prevpos != -1 && ix2 < prevpos)\n            t++; \/\/ moved back before earlier\n          prevpos = ix2;\n          break;\n        }\n      }\n    }\n\n    \/\/ we don't divide t by 2 because as far as we can tell, the above\n    \/\/ code counts transpositions directly.\n\n    \/\/ System.out.println(\"c: \" + c);\n    \/\/ System.out.println(\"t: \" + t);\n    \/\/ System.out.println(\"c\/m: \" + (c \/ (double) s1.length()));\n    \/\/ System.out.println(\"c\/n: \" + (c \/ (double) s2.length()));\n    \/\/ System.out.println(\"(c-t)\/c: \" + ((c - t) \/ (double) c));\n\n    \/\/ we might have to give up right here\n    if (c == 0)\n      return 0.0;\n\n    \/\/ first compute the score\n    double score = ((c \/ (double) s1.length()) +\n            (c \/ (double) s2.length()) +\n            ((c - t) \/ (double) c)) \/ 3.0;\n\n    \/\/ (2) common prefix modification\n    int p = 0; \/\/ length of prefix\n    int last = Math.min(4, s1.length());\n    for (; p < last && s1.charAt(p) == s2.charAt(p); p++)\n      ;\n\n    score = score + ((p * (1 - score)) \/ 10);\n\n    \/\/ (3) longer string adjustment\n    \/\/ I'm confused about this part. Winkler's original source code includes\n    \/\/ it, and Yancey's 2005 paper describes it. However, Winkler's list of\n    \/\/ test cases in his 2006 paper does not include this modification. So\n    \/\/ is this part of Jaro-Winkler, or is it not? Hard to say.\n    \/\/\n    \/\/   if (s1.length() >= 5 && \/\/ both strings at least 5 characters long\n    \/\/       c - p >= 2 && \/\/ at least two common characters besides prefix\n    \/\/       c - p >= ((s1.length() - p) \/ 2)) \/\/ fairly rich in common chars\n    \/\/     {\n    \/\/     System.out.println(\"ADJUSTED!\");\n    \/\/     score = score + ((1 - score) * ((c - (p + 1)) \/\n    \/\/                                     ((double) ((s1.length() + s2.length())\n    \/\/                                                - (2 * (p - 1))))));\n    \/\/ }\n\n    \/\/ (4) similar characters adjustment\n    \/\/ the same holds for this as for (3) above.\n\n    return score;\n  }"}
{"func_code_string":"private File[] accept(File file, final boolean recursive) {\n        \/\/ Custom filtering rules If you can loop (include subdirectories) or is the end of the file. Class (compiled java class file)\n        return file.listFiles(file1 -> (recursive && file1.isDirectory()) || (file1.getName().endsWith(\".class\")));\n    }","func_code_tokens":["private","File","[","]","accept","(","File","file",",","final","boolean","recursive",")","{","\/\/ Custom filtering rules If you can loop (include subdirectories) or is the end of the file. Class (compiled java class file)","return","file",".","listFiles","(","file1","->","(","recursive","&&","file1",".","isDirectory","(",")",")","||","(","file1",".","getName","(",")",".","endsWith","(","\".class\"",")",")",")",";","}"],"func_documentation_string":"Filter the file rules\n\n@param file\n@param recursive\n@return","func_documentation_tokens":["Filter","the","file","rules"],"label":0,"text":"Filter the file rules\n\n@param file\n@param recursive\n@return[SEP]private File[] accept(File file, final boolean recursive) {\n        \/\/ Custom filtering rules If you can loop (include subdirectories) or is the end of the file. Class (compiled java class file)\n        return file.listFiles(file1 -> (recursive && file1.isDirectory()) || (file1.getName().endsWith(\".class\")));\n    }"}
{"func_code_string":"public static String replaceHtmlEntities(String content, Map<String, Character> map) {\n    \n    for (Entry<String, Character> entry : escapeStrings.entrySet()) {\n      \n      if (content.indexOf(entry.getKey()) != -1) {\n        content = content.replace(entry.getKey(), String.valueOf(entry.getValue()));\n      }\n      \n    }\n    \n    return content;\n  }","func_code_tokens":["public","static","String","replaceHtmlEntities","(","String","content",",","Map","<","String",",","Character",">","map",")","{","for","(","Entry","<","String",",","Character",">","entry",":","escapeStrings",".","entrySet","(",")",")","{","if","(","content",".","indexOf","(","entry",".","getKey","(",")",")","!=","-","1",")","{","content","=","content",".","replace","(","entry",".","getKey","(",")",",","String",".","valueOf","(","entry",".","getValue","(",")",")",")",";","}","}","return","content",";","}"],"func_documentation_string":"Replace HTML entities\n@param content Content\n@param map Map\n@return Replaced content","func_documentation_tokens":["Replace","HTML","entities"],"label":1,"text":"Replace HTML entities\n@param content Content\n@param map Map\n@return Replaced content[SEP]public static String replaceHtmlEntities(String content, Map<String, Character> map) {\n    \n    for (Entry<String, Character> entry : escapeStrings.entrySet()) {\n      \n      if (content.indexOf(entry.getKey()) != -1) {\n        content = content.replace(entry.getKey(), String.valueOf(entry.getValue()));\n      }\n      \n    }\n    \n    return content;\n  }"}
{"func_code_string":"public void setWorkDir(String dir) throws IOException\r\n    {\r\n        File workDir = new File(dir);\r\n\r\n        if (!workDir.exists() || !workDir.canWrite() || !workDir.canRead())\r\n        {\r\n            throw new IOException(\"Cannot access directory \"+dir);\r\n        }\r\n        _workDir = workDir;\r\n    }","func_code_tokens":["public","void","setWorkDir","(","String","dir",")","throws","IOException","{","File","workDir","=","new","File","(","dir",")",";","if","(","!","workDir",".","exists","(",")","||","!","workDir",".","canWrite","(",")","||","!","workDir",".","canRead","(",")",")","{","throw","new","IOException","(","\"Cannot access directory \"","+","dir",")",";","}","_workDir","=","workDir",";","}"],"func_documentation_string":"Sets the working directory.\n\n@param dir The directory\n@throws IOException If the directory does not exist or cannot be written\/read","func_documentation_tokens":["Sets","the","working","directory","."],"label":0,"text":"Sets the working directory.\n\n@param dir The directory\n@throws IOException If the directory does not exist or cannot be written\/read[SEP]public void setWorkDir(String dir) throws IOException\r\n    {\r\n        File workDir = new File(dir);\r\n\r\n        if (!workDir.exists() || !workDir.canWrite() || !workDir.canRead())\r\n        {\r\n            throw new IOException(\"Cannot access directory \"+dir);\r\n        }\r\n        _workDir = workDir;\r\n    }"}
{"func_code_string":"@SuppressWarnings(\"unchecked\")\r\n  public static Map<String, String> parseCommandLineArguments(String[] args) {\r\n    return (Map)parseCommandLineArguments(args, false);\r\n  }","func_code_tokens":["@","SuppressWarnings","(","\"unchecked\"",")","public","static","Map","<","String",",","String",">","parseCommandLineArguments","(","String","[","]","args",")","{","return","(","Map",")","parseCommandLineArguments","(","args",",","false",")",";","}"],"func_documentation_string":"A simpler form of command line argument parsing.\nDan thinks this is highly superior to the overly complexified code that\ncomes before it.\nParses command line arguments into a Map. Arguments of the form\n-flag1 arg1 -flag2 -flag3 arg3\nwill be parsed so that the flag is a key in the Map (including the hyphen)\nand the\noptional argument will be its value (if present).\n\n@return A Map from keys to possible values (String or null)","func_documentation_tokens":["A","simpler","form","of","command","line","argument","parsing",".","Dan","thinks","this","is","highly","superior","to","the","overly","complexified","code","that","comes","before","it",".","Parses","command","line","arguments","into","a","Map",".","Arguments","of","the","form","-","flag1","arg1","-","flag2","-","flag3","arg3","will","be","parsed","so","that","the","flag","is","a","key","in","the","Map","(","including","the","hyphen",")","and","the","optional","argument","will","be","its","value","(","if","present",")","."],"label":1,"text":"A simpler form of command line argument parsing.\nDan thinks this is highly superior to the overly complexified code that\ncomes before it.\nParses command line arguments into a Map. Arguments of the form\n-flag1 arg1 -flag2 -flag3 arg3\nwill be parsed so that the flag is a key in the Map (including the hyphen)\nand the\noptional argument will be its value (if present).\n\n@return A Map from keys to possible values (String or null)[SEP]@SuppressWarnings(\"unchecked\")\r\n  public static Map<String, String> parseCommandLineArguments(String[] args) {\r\n    return (Map)parseCommandLineArguments(args, false);\r\n  }"}
{"func_code_string":"public static <E> Distribution<E> getDistributionFromPartiallySpecifiedCounter(Counter<E> c, int numKeys){\r\n    Distribution<E> d;\r\n    double total = c.totalCount();\r\n    if (total >= 1.0){\r\n      d = getDistribution(c);\r\n      d.numberOfKeys = numKeys;\r\n    } else {\r\n      d = new Distribution<E>();\r\n      d.numberOfKeys = numKeys;\r\n      d.counter = c;\r\n      d.reservedMass = 1.0 - total;\r\n    }\r\n    return d;\r\n  }","func_code_tokens":["public","static","<","E",">","Distribution","<","E",">","getDistributionFromPartiallySpecifiedCounter","(","Counter","<","E",">","c",",","int","numKeys",")","{","Distribution","<","E",">","d",";","double","total","=","c",".","totalCount","(",")",";","if","(","total",">=","1.0",")","{","d","=","getDistribution","(","c",")",";","d",".","numberOfKeys","=","numKeys",";","}","else","{","d","=","new","Distribution","<","E",">","(",")",";","d",".","numberOfKeys","=","numKeys",";","d",".","counter","=","c",";","d",".","reservedMass","=","1.0","-","total",";","}","return","d",";","}"],"func_documentation_string":"Assuming that c has a total count < 1, returns a new Distribution using the counts in c as probabilities.\nIf c has a total count > 1, returns a normalized distribution with no remaining mass.","func_documentation_tokens":["Assuming","that","c","has","a","total","count","<","1","returns","a","new","Distribution","using","the","counts","in","c","as","probabilities",".","If","c","has","a","total","count",">","1","returns","a","normalized","distribution","with","no","remaining","mass","."],"label":0,"text":"Assuming that c has a total count < 1, returns a new Distribution using the counts in c as probabilities.\nIf c has a total count > 1, returns a normalized distribution with no remaining mass.[SEP]public static <E> Distribution<E> getDistributionFromPartiallySpecifiedCounter(Counter<E> c, int numKeys){\r\n    Distribution<E> d;\r\n    double total = c.totalCount();\r\n    if (total >= 1.0){\r\n      d = getDistribution(c);\r\n      d.numberOfKeys = numKeys;\r\n    } else {\r\n      d = new Distribution<E>();\r\n      d.numberOfKeys = numKeys;\r\n      d.counter = c;\r\n      d.reservedMass = 1.0 - total;\r\n    }\r\n    return d;\r\n  }"}
{"func_code_string":"public final void fileCopy(File in, File out) throws IOException {\n\t\tassert in != null;\n\t\tassert out != null;\n\t\tgetLog().debug(\"Copying file: \" + in.toString() + \" into \" + out.toString()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n\t\ttry (FileInputStream fis = new FileInputStream(in)) {\n\t\t\ttry (FileChannel inChannel = fis.getChannel()) {\n\t\t\t\ttry (FileOutputStream fos = new FileOutputStream(out)) {\n\t\t\t\t\ttry (FileChannel outChannel = fos.getChannel()) {\n\t\t\t\t\t\tinChannel.transferTo(0, inChannel.size(), outChannel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tgetBuildContext().refresh(out);\n\t\t}\n\t}","func_code_tokens":["public","final","void","fileCopy","(","File","in",",","File","out",")","throws","IOException","{","assert","in","!=","null",";","assert","out","!=","null",";","getLog","(",")",".","debug","(","\"Copying file: \"","+","in",".","toString","(",")","+","\" into \"","+","out",".","toString","(",")",")",";","\/\/$NON-NLS-1$ \/\/$NON-NLS-2$","try","(","FileInputStream","fis","=","new","FileInputStream","(","in",")",")","{","try","(","FileChannel","inChannel","=","fis",".","getChannel","(",")",")","{","try","(","FileOutputStream","fos","=","new","FileOutputStream","(","out",")",")","{","try","(","FileChannel","outChannel","=","fos",".","getChannel","(",")",")","{","inChannel",".","transferTo","(","0",",","inChannel",".","size","(",")",",","outChannel",")",";","}","}","}","}","finally","{","getBuildContext","(",")",".","refresh","(","out",")",";","}","}"],"func_documentation_string":"Copy a file.\n\n@param in input file.\n@param out output file.\n@throws IOException on error.","func_documentation_tokens":["Copy","a","file","."],"label":1,"text":"Copy a file.\n\n@param in input file.\n@param out output file.\n@throws IOException on error.[SEP]public final void fileCopy(File in, File out) throws IOException {\n\t\tassert in != null;\n\t\tassert out != null;\n\t\tgetLog().debug(\"Copying file: \" + in.toString() + \" into \" + out.toString()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n\t\ttry (FileInputStream fis = new FileInputStream(in)) {\n\t\t\ttry (FileChannel inChannel = fis.getChannel()) {\n\t\t\t\ttry (FileOutputStream fos = new FileOutputStream(out)) {\n\t\t\t\t\ttry (FileChannel outChannel = fos.getChannel()) {\n\t\t\t\t\t\tinChannel.transferTo(0, inChannel.size(), outChannel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tgetBuildContext().refresh(out);\n\t\t}\n\t}"}
{"func_code_string":"private int _checkInlineHtml (final MarkdownHCStack out, final String in, final int nStart)\n  {\n    final StringBuilder aTmp = new StringBuilder ();\n\n    \/\/ Check for auto links\n    aTmp.setLength (0);\n    int nPos = MarkdownHelper.readUntil (aTmp, in, nStart + 1, ':', ' ', '>', '\\n');\n    if (nPos != -1 && in.charAt (nPos) == ':' && MarkdownHTML.isLinkPrefix (aTmp.toString ()))\n    {\n      nPos = MarkdownHelper.readUntil (aTmp, in, nPos, '>');\n      if (nPos != -1)\n      {\n        final String sLink = aTmp.toString ();\n        final HCA aLink = m_aConfig.getDecorator ().openLink (out);\n        aLink.setHref (new SimpleURL (sLink)).addChild (sLink);\n        m_aConfig.getDecorator ().closeLink (out);\n        return nPos;\n      }\n    }\n\n    \/\/ Check for mailto or address auto link\n    aTmp.setLength (0);\n    nPos = MarkdownHelper.readUntil (aTmp, in, nStart + 1, '@', ' ', '>', '\\n');\n    if (nPos != -1 && in.charAt (nPos) == '@')\n    {\n      nPos = MarkdownHelper.readUntil (aTmp, in, nPos, '>');\n      if (nPos != -1)\n      {\n        final String sLink = aTmp.toString ();\n        final HCA aLink = m_aConfig.getDecorator ().openLink (out);\n        if (sLink.startsWith (\"@\"))\n        {\n          \/\/ address auto links\n          final String sAddress = sLink.substring (1);\n          final ISimpleURL aUrl = new SimpleURL (\"https:\/\/maps.google.com\/maps\").add (\"q\", sAddress);\n          aLink.setHref (aUrl).addChild (sAddress);\n        }\n        else\n        {\n          \/\/ mailto auto links\n          aLink.setHref (new SimpleURL (\"mailto:\" + sLink)).addChild (sLink);\n        }\n        m_aConfig.getDecorator ().closeLink (out);\n        return nPos;\n      }\n    }\n\n    \/\/ Check for inline html\n    if (nStart + 2 < in.length ())\n    {\n      nPos = nStart;\n      if (nStart + 3 < in.length () &&\n          in.charAt (nStart + 1) == '!' &&\n          in.charAt (nStart + 2) == '-' &&\n          in.charAt (nStart + 3) == '-')\n      {\n        nPos = nStart + 4;\n        final int nCommentStartPos = nPos;\n        while (true)\n        {\n          while (nPos < in.length () && in.charAt (nPos) != '-')\n            nPos++;\n\n          if (nPos == in.length ())\n          {\n            \/\/ FIXME End of line in comment\n            return -1;\n          }\n          if (nPos + 2 < in.length () && in.charAt (nPos + 1) == '-' && in.charAt (nPos + 2) == '>')\n          {\n            \/\/ XML comment inline\n            out.append (new HCCommentNode (in.substring (nCommentStartPos, nPos)));\n            return nPos + 2;\n          }\n          nPos++;\n        }\n      }\n\n      aTmp.setLength (0);\n      final int nNewPos = MarkdownHelper.readXMLElement (aTmp, in, nStart, m_aConfig.isSafeMode ());\n      if (nNewPos != -1)\n      {\n        final String sElement = aTmp.toString ();\n        if (sElement.endsWith (\"\/>\"))\n        {\n          \/\/ Self closed tag - can be parsed\n          final IMicroDocument aXML = MicroReader.readMicroXML (sElement);\n          if (aXML == null)\n            throw new MarkdownException (\"Failed to parse XML: \" + sElement);\n          \/\/ And use the root element\n          out.append (new HCDOMWrapper (aXML.getDocumentElement ().detachFromParent ()));\n        }\n        else\n          if (sElement.startsWith (\"<\/\"))\n          {\n            \/\/ Closing tag\n            out.pop ();\n          }\n          else\n          {\n            \/\/ Opening tag - parse as self-closed tag and push to stack\n            final String sParseCode = sElement.substring (0, sElement.length () - 1) + \"\/>\";\n            final IMicroDocument aXML = MicroReader.readMicroXML (sParseCode);\n            if (aXML == null)\n              throw new MarkdownException (\"Failed to parse XML: \" + sParseCode);\n            final IMicroElement eRoot = aXML.getDocumentElement ();\n\n            \/\/ And use the root element\n            final IHCElement <?> aHC = HCExtHelper.createHCElementFromName (eRoot.getTagName ());\n            if (aHC == null)\n              throw new MarkdownException (\"Failed to get HC element: \" + eRoot.getTagName ());\n\n            \/\/ Clone all attributes\n            eRoot.forAllAttributes (aAttr -> aHC.customAttrs ().putIn (aAttr.getAttributeQName (),\n                                                                       aAttr.getAttributeValue ()));\n\n            if (aHC.getElement ().mayBeSelfClosed ())\n            {\n              \/\/ e.g. <hr \/>\n              out.append (aHC);\n            }\n            else\n            {\n              \/\/ Push\n              out.push (aHC);\n            }\n          }\n\n        return nNewPos - 1;\n      }\n    }\n\n    return -1;\n  }","func_code_tokens":["private","int","_checkInlineHtml","(","final","MarkdownHCStack","out",",","final","String","in",",","final","int","nStart",")","{","final","StringBuilder","aTmp","=","new","StringBuilder","(",")",";","\/\/ Check for auto links","aTmp",".","setLength","(","0",")",";","int","nPos","=","MarkdownHelper",".","readUntil","(","aTmp",",","in",",","nStart","+","1",",","'","'",",","'","'",",","'","'",",","'","'",")",";","if","(","nPos","!=","-","1","&&","in",".","charAt","(","nPos",")","==","'","'","&&","MarkdownHTML",".","isLinkPrefix","(","aTmp",".","toString","(",")",")",")","{","nPos","=","MarkdownHelper",".","readUntil","(","aTmp",",","in",",","nPos",",","'","'",")",";","if","(","nPos","!=","-","1",")","{","final","String","sLink","=","aTmp",".","toString","(",")",";","final","HCA","aLink","=","m_aConfig",".","getDecorator","(",")",".","openLink","(","out",")",";","aLink",".","setHref","(","new","SimpleURL","(","sLink",")",")",".","addChild","(","sLink",")",";","m_aConfig",".","getDecorator","(",")",".","closeLink","(","out",")",";","return","nPos",";","}","}","\/\/ Check for mailto or address auto link","aTmp",".","setLength","(","0",")",";","nPos","=","MarkdownHelper",".","readUntil","(","aTmp",",","in",",","nStart","+","1",",","'","'",",","'","'",",","'","'",",","'","'",")",";","if","(","nPos","!=","-","1","&&","in",".","charAt","(","nPos",")","==","'","'",")","{","nPos","=","MarkdownHelper",".","readUntil","(","aTmp",",","in",",","nPos",",","'","'",")",";","if","(","nPos","!=","-","1",")","{","final","String","sLink","=","aTmp",".","toString","(",")",";","final","HCA","aLink","=","m_aConfig",".","getDecorator","(",")",".","openLink","(","out",")",";","if","(","sLink",".","startsWith","(","\"@\"",")",")","{","\/\/ address auto links","final","String","sAddress","=","sLink",".","substring","(","1",")",";","final","ISimpleURL","aUrl","=","new","SimpleURL","(","\"https:\/\/maps.google.com\/maps\"",")",".","add","(","\"q\"",",","sAddress",")",";","aLink",".","setHref","(","aUrl",")",".","addChild","(","sAddress",")",";","}","else","{","\/\/ mailto auto links","aLink",".","setHref","(","new","SimpleURL","(","\"mailto:\"","+","sLink",")",")",".","addChild","(","sLink",")",";","}","m_aConfig",".","getDecorator","(",")",".","closeLink","(","out",")",";","return","nPos",";","}","}","\/\/ Check for inline html","if","(","nStart","+","2","<","in",".","length","(",")",")","{","nPos","=","nStart",";","if","(","nStart","+","3","<","in",".","length","(",")","&&","in",".","charAt","(","nStart","+","1",")","==","'","'","&&","in",".","charAt","(","nStart","+","2",")","==","'","'","&&","in",".","charAt","(","nStart","+","3",")","==","'","'",")","{","nPos","=","nStart","+","4",";","final","int","nCommentStartPos","=","nPos",";","while","(","true",")","{","while","(","nPos","<","in",".","length","(",")","&&","in",".","charAt","(","nPos",")","!=","'","'",")","nPos","++",";","if","(","nPos","==","in",".","length","(",")",")","{","\/\/ FIXME End of line in comment","return","-","1",";","}","if","(","nPos","+","2","<","in",".","length","(",")","&&","in",".","charAt","(","nPos","+","1",")","==","'","'","&&","in",".","charAt","(","nPos","+","2",")","==","'","'",")","{","\/\/ XML comment inline","out",".","append","(","new","HCCommentNode","(","in",".","substring","(","nCommentStartPos",",","nPos",")",")",")",";","return","nPos","+","2",";","}","nPos","++",";","}","}","aTmp",".","setLength","(","0",")",";","final","int","nNewPos","=","MarkdownHelper",".","readXMLElement","(","aTmp",",","in",",","nStart",",","m_aConfig",".","isSafeMode","(",")",")",";","if","(","nNewPos","!=","-","1",")","{","final","String","sElement","=","aTmp",".","toString","(",")",";","if","(","sElement",".","endsWith","(","\"\/>\"",")",")","{","\/\/ Self closed tag - can be parsed","final","IMicroDocument","aXML","=","MicroReader",".","readMicroXML","(","sElement",")",";","if","(","aXML","==","null",")","throw","new","MarkdownException","(","\"Failed to parse XML: \"","+","sElement",")",";","\/\/ And use the root element","out",".","append","(","new","HCDOMWrapper","(","aXML",".","getDocumentElement","(",")",".","detachFromParent","(",")",")",")",";","}","else","if","(","sElement",".","startsWith","(","\"<\/\"",")",")","{","\/\/ Closing tag","out",".","pop","(",")",";","}","else","{","\/\/ Opening tag - parse as self-closed tag and push to stack","final","String","sParseCode","=","sElement",".","substring","(","0",",","sElement",".","length","(",")","-","1",")","+","\"\/>\"",";","final","IMicroDocument","aXML","=","MicroReader",".","readMicroXML","(","sParseCode",")",";","if","(","aXML","==","null",")","throw","new","MarkdownException","(","\"Failed to parse XML: \"","+","sParseCode",")",";","final","IMicroElement","eRoot","=","aXML",".","getDocumentElement","(",")",";","\/\/ And use the root element","final","IHCElement","<","?",">","aHC","=","HCExtHelper",".","createHCElementFromName","(","eRoot",".","getTagName","(",")",")",";","if","(","aHC","==","null",")","throw","new","MarkdownException","(","\"Failed to get HC element: \"","+","eRoot",".","getTagName","(",")",")",";","\/\/ Clone all attributes","eRoot",".","forAllAttributes","(","aAttr","->","aHC",".","customAttrs","(",")",".","putIn","(","aAttr",".","getAttributeQName","(",")",",","aAttr",".","getAttributeValue","(",")",")",")",";","if","(","aHC",".","getElement","(",")",".","mayBeSelfClosed","(",")",")","{","\/\/ e.g. <hr \/>","out",".","append","(","aHC",")",";","}","else","{","\/\/ Push","out",".","push","(","aHC",")",";","}","}","return","nNewPos","-","1",";","}","}","return","-","1",";","}"],"func_documentation_string":"Check if there is a valid HTML tag here. This method also transforms auto\nlinks and mailto auto links.\n\n@param out\nThe StringBuilder to write to.\n@param in\nInput String.\n@param nStart\nStarting position.\n@return The new position or -1 if nothing valid has been found.","func_documentation_tokens":["Check","if","there","is","a","valid","HTML","tag","here",".","This","method","also","transforms","auto","links","and","mailto","auto","links","."],"label":0,"text":"Check if there is a valid HTML tag here. This method also transforms auto\nlinks and mailto auto links.\n\n@param out\nThe StringBuilder to write to.\n@param in\nInput String.\n@param nStart\nStarting position.\n@return The new position or -1 if nothing valid has been found.[SEP]private int _checkInlineHtml (final MarkdownHCStack out, final String in, final int nStart)\n  {\n    final StringBuilder aTmp = new StringBuilder ();\n\n    \/\/ Check for auto links\n    aTmp.setLength (0);\n    int nPos = MarkdownHelper.readUntil (aTmp, in, nStart + 1, ':', ' ', '>', '\\n');\n    if (nPos != -1 && in.charAt (nPos) == ':' && MarkdownHTML.isLinkPrefix (aTmp.toString ()))\n    {\n      nPos = MarkdownHelper.readUntil (aTmp, in, nPos, '>');\n      if (nPos != -1)\n      {\n        final String sLink = aTmp.toString ();\n        final HCA aLink = m_aConfig.getDecorator ().openLink (out);\n        aLink.setHref (new SimpleURL (sLink)).addChild (sLink);\n        m_aConfig.getDecorator ().closeLink (out);\n        return nPos;\n      }\n    }\n\n    \/\/ Check for mailto or address auto link\n    aTmp.setLength (0);\n    nPos = MarkdownHelper.readUntil (aTmp, in, nStart + 1, '@', ' ', '>', '\\n');\n    if (nPos != -1 && in.charAt (nPos) == '@')\n    {\n      nPos = MarkdownHelper.readUntil (aTmp, in, nPos, '>');\n      if (nPos != -1)\n      {\n        final String sLink = aTmp.toString ();\n        final HCA aLink = m_aConfig.getDecorator ().openLink (out);\n        if (sLink.startsWith (\"@\"))\n        {\n          \/\/ address auto links\n          final String sAddress = sLink.substring (1);\n          final ISimpleURL aUrl = new SimpleURL (\"https:\/\/maps.google.com\/maps\").add (\"q\", sAddress);\n          aLink.setHref (aUrl).addChild (sAddress);\n        }\n        else\n        {\n          \/\/ mailto auto links\n          aLink.setHref (new SimpleURL (\"mailto:\" + sLink)).addChild (sLink);\n        }\n        m_aConfig.getDecorator ().closeLink (out);\n        return nPos;\n      }\n    }\n\n    \/\/ Check for inline html\n    if (nStart + 2 < in.length ())\n    {\n      nPos = nStart;\n      if (nStart + 3 < in.length () &&\n          in.charAt (nStart + 1) == '!' &&\n          in.charAt (nStart + 2) == '-' &&\n          in.charAt (nStart + 3) == '-')\n      {\n        nPos = nStart + 4;\n        final int nCommentStartPos = nPos;\n        while (true)\n        {\n          while (nPos < in.length () && in.charAt (nPos) != '-')\n            nPos++;\n\n          if (nPos == in.length ())\n          {\n            \/\/ FIXME End of line in comment\n            return -1;\n          }\n          if (nPos + 2 < in.length () && in.charAt (nPos + 1) == '-' && in.charAt (nPos + 2) == '>')\n          {\n            \/\/ XML comment inline\n            out.append (new HCCommentNode (in.substring (nCommentStartPos, nPos)));\n            return nPos + 2;\n          }\n          nPos++;\n        }\n      }\n\n      aTmp.setLength (0);\n      final int nNewPos = MarkdownHelper.readXMLElement (aTmp, in, nStart, m_aConfig.isSafeMode ());\n      if (nNewPos != -1)\n      {\n        final String sElement = aTmp.toString ();\n        if (sElement.endsWith (\"\/>\"))\n        {\n          \/\/ Self closed tag - can be parsed\n          final IMicroDocument aXML = MicroReader.readMicroXML (sElement);\n          if (aXML == null)\n            throw new MarkdownException (\"Failed to parse XML: \" + sElement);\n          \/\/ And use the root element\n          out.append (new HCDOMWrapper (aXML.getDocumentElement ().detachFromParent ()));\n        }\n        else\n          if (sElement.startsWith (\"<\/\"))\n          {\n            \/\/ Closing tag\n            out.pop ();\n          }\n          else\n          {\n            \/\/ Opening tag - parse as self-closed tag and push to stack\n            final String sParseCode = sElement.substring (0, sElement.length () - 1) + \"\/>\";\n            final IMicroDocument aXML = MicroReader.readMicroXML (sParseCode);\n            if (aXML == null)\n              throw new MarkdownException (\"Failed to parse XML: \" + sParseCode);\n            final IMicroElement eRoot = aXML.getDocumentElement ();\n\n            \/\/ And use the root element\n            final IHCElement <?> aHC = HCExtHelper.createHCElementFromName (eRoot.getTagName ());\n            if (aHC == null)\n              throw new MarkdownException (\"Failed to get HC element: \" + eRoot.getTagName ());\n\n            \/\/ Clone all attributes\n            eRoot.forAllAttributes (aAttr -> aHC.customAttrs ().putIn (aAttr.getAttributeQName (),\n                                                                       aAttr.getAttributeValue ()));\n\n            if (aHC.getElement ().mayBeSelfClosed ())\n            {\n              \/\/ e.g. <hr \/>\n              out.append (aHC);\n            }\n            else\n            {\n              \/\/ Push\n              out.push (aHC);\n            }\n          }\n\n        return nNewPos - 1;\n      }\n    }\n\n    return -1;\n  }"}
{"func_code_string":"@HtmlSafe\n\tpublic String getBodyHtml()\n\t{\n\t\tString body = execution.getResults().trim();\n\n\t\treturn body.replaceAll(\"<html>\", \"\").replaceAll(\"<\/html>\", \"\");\n\t}","func_code_tokens":["@","HtmlSafe","public","String","getBodyHtml","(",")","{","String","body","=","execution",".","getResults","(",")",".","trim","(",")",";","return","body",".","replaceAll","(","\"<html>\"",",","\"\"",")",".","replaceAll","(","\"<\/html>\"",",","\"\"",")",";","}"],"func_documentation_string":"<p>getBodyHtml.<\/p>\n\n@return a {@link java.lang.String} object.","func_documentation_tokens":["<p",">","getBodyHtml",".","<","\/","p",">"],"label":0,"text":"<p>getBodyHtml.<\/p>\n\n@return a {@link java.lang.String} object.[SEP]@HtmlSafe\n\tpublic String getBodyHtml()\n\t{\n\t\tString body = execution.getResults().trim();\n\n\t\treturn body.replaceAll(\"<html>\", \"\").replaceAll(\"<\/html>\", \"\");\n\t}"}
{"func_code_string":"@SuppressWarnings(\"unchecked\")\n  public static <T> T[] filter(T[] array, Filter<T> filter) {\n\n    Assert.notNull(array, \"Array is required\");\n    Assert.notNull(filter, \"Filter is required\");\n\n    List<T> arrayList = stream(array).filter(filter::accept).collect(Collectors.toList());\n\n    return arrayList.toArray((T[]) Array.newInstance(array.getClass().getComponentType(), arrayList.size()));\n  }","func_code_tokens":["@","SuppressWarnings","(","\"unchecked\"",")","public","static","<","T",">","T","[","]","filter","(","T","[","]","array",",","Filter","<","T",">","filter",")","{","Assert",".","notNull","(","array",",","\"Array is required\"",")",";","Assert",".","notNull","(","filter",",","\"Filter is required\"",")",";","List","<","T",">","arrayList","=","stream","(","array",")",".","filter","(","filter","::","accept",")",".","collect","(","Collectors",".","toList","(",")",")",";","return","arrayList",".","toArray","(","(","T","[","]",")","Array",".","newInstance","(","array",".","getClass","(",")",".","getComponentType","(",")",",","arrayList",".","size","(",")",")",")",";","}"],"func_documentation_string":"Filters the elements in the array.\n\n@param <T> Class type of the elements in the array.\n@param array array to filter.\n@param filter {@link Filter} used to filter the array elements.\n@return a new array of the array class component type containing only elements from the given array\naccepted by the {@link Filter}.\n@throws IllegalArgumentException if either the array or {@link Filter} are null.\n@see #filterAndTransform(Object[], FilteringTransformer)\n@see org.cp.elements.lang.Filter","func_documentation_tokens":["Filters","the","elements","in","the","array","."],"label":1,"text":"Filters the elements in the array.\n\n@param <T> Class type of the elements in the array.\n@param array array to filter.\n@param filter {@link Filter} used to filter the array elements.\n@return a new array of the array class component type containing only elements from the given array\naccepted by the {@link Filter}.\n@throws IllegalArgumentException if either the array or {@link Filter} are null.\n@see #filterAndTransform(Object[], FilteringTransformer)\n@see org.cp.elements.lang.Filter[SEP]@SuppressWarnings(\"unchecked\")\n  public static <T> T[] filter(T[] array, Filter<T> filter) {\n\n    Assert.notNull(array, \"Array is required\");\n    Assert.notNull(filter, \"Filter is required\");\n\n    List<T> arrayList = stream(array).filter(filter::accept).collect(Collectors.toList());\n\n    return arrayList.toArray((T[]) Array.newInstance(array.getClass().getComponentType(), arrayList.size()));\n  }"}
{"func_code_string":"public String find(PushbackReader in, int size) throws IOException, SyntaxErrorException\r\n    {\r\n        if (acceptEmpty)\r\n        {\r\n            throw new IllegalArgumentException(\"using find for  '\" + expression + \"'  that accepts empty string\");\r\n        }\r\n        InputReader reader = Input.getInstance(in, size);\r\n        int rc = find(reader);\r\n        reader.release();\r\n        if (rc == 1)\r\n        {\r\n            return reader.getString();\r\n        }\r\n        else\r\n        {\r\n            throw new SyntaxErrorException(\"string matching  '\" + expression + \"'  not found\");\r\n        }\r\n    }","func_code_tokens":["public","String","find","(","PushbackReader","in",",","int","size",")","throws","IOException",",","SyntaxErrorException","{","if","(","acceptEmpty",")","{","throw","new","IllegalArgumentException","(","\"using find for  '\"","+","expression","+","\"'  that accepts empty string\"",")",";","}","InputReader","reader","=","Input",".","getInstance","(","in",",","size",")",";","int","rc","=","find","(","reader",")",";","reader",".","release","(",")",";","if","(","rc","==","1",")","{","return","reader",".","getString","(",")",";","}","else","{","throw","new","SyntaxErrorException","(","\"string matching  '\"","+","expression","+","\"'  not found\"",")",";","}","}"],"func_documentation_string":"Finds next match and returns the matched string\n@param in\n@param size\n@return Matched string\n@throws IOException\n@throws SyntaxErrorException","func_documentation_tokens":["Finds","next","match","and","returns","the","matched","string"],"label":0,"text":"Finds next match and returns the matched string\n@param in\n@param size\n@return Matched string\n@throws IOException\n@throws SyntaxErrorException[SEP]public String find(PushbackReader in, int size) throws IOException, SyntaxErrorException\r\n    {\r\n        if (acceptEmpty)\r\n        {\r\n            throw new IllegalArgumentException(\"using find for  '\" + expression + \"'  that accepts empty string\");\r\n        }\r\n        InputReader reader = Input.getInstance(in, size);\r\n        int rc = find(reader);\r\n        reader.release();\r\n        if (rc == 1)\r\n        {\r\n            return reader.getString();\r\n        }\r\n        else\r\n        {\r\n            throw new SyntaxErrorException(\"string matching  '\" + expression + \"'  not found\");\r\n        }\r\n    }"}
{"func_code_string":"public static void concatenate(List<File> files, File concatenatedFile) {\n\n        BufferedWriter writer;\n        try {\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(concatenatedFile.getAbsoluteFile(),\n                    false), DataUtilDefaults.charSet));\n\n            FileInputStream inputStream;\n            for(File input : files) {\n                inputStream = new FileInputStream(input);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                String line;\n                while((line = reader.readLine()) != null) {\n                    writer.write(line + DataUtilDefaults.lineTerminator);\n                }\n                inputStream.close();\n            }\n            writer.flush();\n            writer.close();\n        } catch (UnsupportedEncodingException e) {\n            throw new DataUtilException(e);\n        } catch (FileNotFoundException e) {\n            throw new DataUtilException(e);\n        } catch (IOException e) {\n            throw new DataUtilException(e);\n        }\n    }","func_code_tokens":["public","static","void","concatenate","(","List","<","File",">","files",",","File","concatenatedFile",")","{","BufferedWriter","writer",";","try","{","writer","=","new","BufferedWriter","(","new","OutputStreamWriter","(","new","FileOutputStream","(","concatenatedFile",".","getAbsoluteFile","(",")",",","false",")",",","DataUtilDefaults",".","charSet",")",")",";","FileInputStream","inputStream",";","for","(","File","input",":","files",")","{","inputStream","=","new","FileInputStream","(","input",")",";","BufferedReader","reader","=","new","BufferedReader","(","new","InputStreamReader","(","inputStream",",","\"UTF-8\"",")",")",";","String","line",";","while","(","(","line","=","reader",".","readLine","(",")",")","!=","null",")","{","writer",".","write","(","line","+","DataUtilDefaults",".","lineTerminator",")",";","}","inputStream",".","close","(",")",";","}","writer",".","flush","(",")",";","writer",".","close","(",")",";","}","catch","(","UnsupportedEncodingException","e",")","{","throw","new","DataUtilException","(","e",")",";","}","catch","(","FileNotFoundException","e",")","{","throw","new","DataUtilException","(","e",")",";","}","catch","(","IOException","e",")","{","throw","new","DataUtilException","(","e",")",";","}","}"],"func_documentation_string":"This method will concatenate one or more files\n@param files files to concatenate\n@param concatenatedFile concatenated output file","func_documentation_tokens":["This","method","will","concatenate","one","or","more","files"],"label":1,"text":"This method will concatenate one or more files\n@param files files to concatenate\n@param concatenatedFile concatenated output file[SEP]public static void concatenate(List<File> files, File concatenatedFile) {\n\n        BufferedWriter writer;\n        try {\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(concatenatedFile.getAbsoluteFile(),\n                    false), DataUtilDefaults.charSet));\n\n            FileInputStream inputStream;\n            for(File input : files) {\n                inputStream = new FileInputStream(input);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n                String line;\n                while((line = reader.readLine()) != null) {\n                    writer.write(line + DataUtilDefaults.lineTerminator);\n                }\n                inputStream.close();\n            }\n            writer.flush();\n            writer.close();\n        } catch (UnsupportedEncodingException e) {\n            throw new DataUtilException(e);\n        } catch (FileNotFoundException e) {\n            throw new DataUtilException(e);\n        } catch (IOException e) {\n            throw new DataUtilException(e);\n        }\n    }"}
{"func_code_string":"public static String urlEncode(String str)\n    {\n        String ret = str;\n\n        try \n        {\n            ret = URLEncoder.encode(str, \"UTF-8\");\n        } \n        catch (UnsupportedEncodingException e) \n        {\n            logger.severe(\"Failed to encode value: \"+str);\n        }\n\n        return ret;\n    }","func_code_tokens":["public","static","String","urlEncode","(","String","str",")","{","String","ret","=","str",";","try","{","ret","=","URLEncoder",".","encode","(","str",",","\"UTF-8\"",")",";","}","catch","(","UnsupportedEncodingException","e",")","{","logger",".","severe","(","\"Failed to encode value: \"","+","str",")",";","}","return","ret",";","}"],"func_documentation_string":"Encode the special characters in the string to its URL encoded representation.\n@param str The string to encode\n@return The encoded string","func_documentation_tokens":["Encode","the","special","characters","in","the","string","to","its","URL","encoded","representation","."],"label":0,"text":"Encode the special characters in the string to its URL encoded representation.\n@param str The string to encode\n@return The encoded string[SEP]public static String urlEncode(String str)\n    {\n        String ret = str;\n\n        try \n        {\n            ret = URLEncoder.encode(str, \"UTF-8\");\n        } \n        catch (UnsupportedEncodingException e) \n        {\n            logger.severe(\"Failed to encode value: \"+str);\n        }\n\n        return ret;\n    }"}
{"func_code_string":"public static Date formatToStartOfDay(final Date date) {\n\n    try {\n      SimpleDateFormat dateFormat = buildDateFormat(DEFAULT_DATE_SIMPLE_PATTERN);\n      String formattedDate = dateFormat.format(date);\n      return dateFormat.parse(formattedDate);\n    } catch (ParseException pe) {\n      throw new DateException(\"Unparseable date specified.\", pe);\n    }\n  }","func_code_tokens":["public","static","Date","formatToStartOfDay","(","final","Date","date",")","{","try","{","SimpleDateFormat","dateFormat","=","buildDateFormat","(","DEFAULT_DATE_SIMPLE_PATTERN",")",";","String","formattedDate","=","dateFormat",".","format","(","date",")",";","return","dateFormat",".","parse","(","formattedDate",")",";","}","catch","(","ParseException","pe",")","{","throw","new","DateException","(","\"Unparseable date specified.\"",",","pe",")",";","}","}"],"func_documentation_string":"Returns the beginning of the given day. <br\/>\ne.g: '2012-12-21 21:21:21' => '2012-12-21 00:00:00'\n\n@param date date to be handled.\n@return a new date is beginning of the given day.\n@throws DateException","func_documentation_tokens":["Returns","the","beginning","of","the","given","day",".","<br","\/",">","e",".","g",":","2012","-","12","-","21","21",":","21",":","21","=",">","2012","-","12","-","21","00",":","00",":","00"],"label":1,"text":"Returns the beginning of the given day. <br\/>\ne.g: '2012-12-21 21:21:21' => '2012-12-21 00:00:00'\n\n@param date date to be handled.\n@return a new date is beginning of the given day.\n@throws DateException[SEP]public static Date formatToStartOfDay(final Date date) {\n\n    try {\n      SimpleDateFormat dateFormat = buildDateFormat(DEFAULT_DATE_SIMPLE_PATTERN);\n      String formattedDate = dateFormat.format(date);\n      return dateFormat.parse(formattedDate);\n    } catch (ParseException pe) {\n      throw new DateException(\"Unparseable date specified.\", pe);\n    }\n  }"}
{"func_code_string":"private String convertToJson(Map<String, ?> map) throws MovieDbException {\n        try {\n            return MAPPER.writeValueAsString(map);\n        } catch (JsonProcessingException ex) {\n            throw new MovieDbException(ApiExceptionType.MAPPING_FAILED, \"JSON conversion failed\", \"\", ex);\n        }\n    }","func_code_tokens":["private","String","convertToJson","(","Map","<","String",",","?",">","map",")","throws","MovieDbException","{","try","{","return","MAPPER",".","writeValueAsString","(","map",")",";","}","catch","(","JsonProcessingException","ex",")","{","throw","new","MovieDbException","(","ApiExceptionType",".","MAPPING_FAILED",",","\"JSON conversion failed\"",",","\"\"",",","ex",")",";","}","}"],"func_documentation_string":"Use Jackson to convert Map to JSON string.\n\n@param map Map to convert to json\n@return json string\n@throws MovieDbException exception","func_documentation_tokens":["Use","Jackson","to","convert","Map","to","JSON","string","."],"label":0,"text":"Use Jackson to convert Map to JSON string.\n\n@param map Map to convert to json\n@return json string\n@throws MovieDbException exception[SEP]private String convertToJson(Map<String, ?> map) throws MovieDbException {\n        try {\n            return MAPPER.writeValueAsString(map);\n        } catch (JsonProcessingException ex) {\n            throw new MovieDbException(ApiExceptionType.MAPPING_FAILED, \"JSON conversion failed\", \"\", ex);\n        }\n    }"}
{"func_code_string":"public static EncryptionMode getEncryptionModeCipher(String encryptionMode) {\n\tif (encryptionMode==null) {\n\t\treturn null;\n\t}\n\tswitch (encryptionMode) {\n\t\tcase \"agile\": return EncryptionMode.agile;\n\t\tcase \"binaryRC4\": return EncryptionMode.binaryRC4;\n\t\tcase \"cryptoAPI\": return EncryptionMode.cryptoAPI;\n\t\tcase \"standard\": return EncryptionMode.standard;\n\t\tdefault:\n\t\t\tLOG.error(\"Uknown enncryption mode \\\"\"+encryptionMode+\"\\\"\");\n\t\t\tbreak;\n\t\t\/\/case \"xor\": return EncryptionMode.xor; \/\/ does not seem to be supported anymore\n\t}\n\treturn null;\n}","func_code_tokens":["public","static","EncryptionMode","getEncryptionModeCipher","(","String","encryptionMode",")","{","if","(","encryptionMode","==","null",")","{","return","null",";","}","switch","(","encryptionMode",")","{","case","\"agile\"",":","return","EncryptionMode",".","agile",";","case","\"binaryRC4\"",":","return","EncryptionMode",".","binaryRC4",";","case","\"cryptoAPI\"",":","return","EncryptionMode",".","cryptoAPI",";","case","\"standard\"",":","return","EncryptionMode",".","standard",";","default",":","LOG",".","error","(","\"Uknown enncryption mode \\\"\"","+","encryptionMode","+","\"\\\"\"",")",";","break",";","\/\/case \"xor\": return EncryptionMode.xor; \/\/ does not seem to be supported anymore","}","return","null",";","}"],"func_documentation_string":"Returns the EncryptionMode object matching the String.\n\n@param encryptionMode encryption mode\n\n@return EncryptionMode object corresponding to encryption mode. Null if does not correspond to any mode.","func_documentation_tokens":["Returns","the","EncryptionMode","object","matching","the","String","."],"label":0,"text":"Returns the EncryptionMode object matching the String.\n\n@param encryptionMode encryption mode\n\n@return EncryptionMode object corresponding to encryption mode. Null if does not correspond to any mode.[SEP]public static EncryptionMode getEncryptionModeCipher(String encryptionMode) {\n\tif (encryptionMode==null) {\n\t\treturn null;\n\t}\n\tswitch (encryptionMode) {\n\t\tcase \"agile\": return EncryptionMode.agile;\n\t\tcase \"binaryRC4\": return EncryptionMode.binaryRC4;\n\t\tcase \"cryptoAPI\": return EncryptionMode.cryptoAPI;\n\t\tcase \"standard\": return EncryptionMode.standard;\n\t\tdefault:\n\t\t\tLOG.error(\"Uknown enncryption mode \\\"\"+encryptionMode+\"\\\"\");\n\t\t\tbreak;\n\t\t\/\/case \"xor\": return EncryptionMode.xor; \/\/ does not seem to be supported anymore\n\t}\n\treturn null;\n}"}
{"func_code_string":"public long getElapsedTicks() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerTick;\n\t}","func_code_tokens":["public","long","getElapsedTicks","(",")","{","long","elapsed",";","if","(","running",")","{","elapsed","=","(","System",".","nanoTime","(",")","-","startTime",")",";","}","else","{","elapsed","=","(","stopTime","-","startTime",")",";","}","return","elapsed","\/","nsPerTick",";","}"],"func_documentation_string":"Gets the total elapsed time measured by the current instance, in nanoseconds.\n1 Tick = 100 nanoseconds","func_documentation_tokens":["Gets","the","total","elapsed","time","measured","by","the","current","instance","in","nanoseconds",".","1","Tick","=","100","nanoseconds"],"label":1,"text":"Gets the total elapsed time measured by the current instance, in nanoseconds.\n1 Tick = 100 nanoseconds[SEP]public long getElapsedTicks() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerTick;\n\t}"}
{"func_code_string":"public long getElapsedSeconds() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerSs;\n\t}","func_code_tokens":["public","long","getElapsedSeconds","(",")","{","long","elapsed",";","if","(","running",")","{","elapsed","=","(","System",".","nanoTime","(",")","-","startTime",")",";","}","else","{","elapsed","=","(","stopTime","-","startTime",")",";","}","return","elapsed","\/","nsPerSs",";","}"],"func_documentation_string":"Gets the total elapsed time measured by the current instance, in seconds.\n10000000 Ticks = 1 second (1000 milliseconds)","func_documentation_tokens":["Gets","the","total","elapsed","time","measured","by","the","current","instance","in","seconds",".","10000000","Ticks","=","1","second","(","1000","milliseconds",")"],"label":1,"text":"Gets the total elapsed time measured by the current instance, in seconds.\n10000000 Ticks = 1 second (1000 milliseconds)[SEP]public long getElapsedSeconds() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerSs;\n\t}"}
{"func_code_string":"public long getElapsedMinutes() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerMm;\n\t}","func_code_tokens":["public","long","getElapsedMinutes","(",")","{","long","elapsed",";","if","(","running",")","{","elapsed","=","(","System",".","nanoTime","(",")","-","startTime",")",";","}","else","{","elapsed","=","(","stopTime","-","startTime",")",";","}","return","elapsed","\/","nsPerMm",";","}"],"func_documentation_string":"Gets the total elapsed time measured by the current instance, in minutes.\n600000000 Ticks = 1 minute (60 seconds)","func_documentation_tokens":["Gets","the","total","elapsed","time","measured","by","the","current","instance","in","minutes",".","600000000","Ticks","=","1","minute","(","60","seconds",")"],"label":1,"text":"Gets the total elapsed time measured by the current instance, in minutes.\n600000000 Ticks = 1 minute (60 seconds)[SEP]public long getElapsedMinutes() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerMm;\n\t}"}
{"func_code_string":"public long getElapsedHours() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerHh;\n\t}","func_code_tokens":["public","long","getElapsedHours","(",")","{","long","elapsed",";","if","(","running",")","{","elapsed","=","(","System",".","nanoTime","(",")","-","startTime",")",";","}","else","{","elapsed","=","(","stopTime","-","startTime",")",";","}","return","elapsed","\/","nsPerHh",";","}"],"func_documentation_string":"Gets the total elapsed time measured by the current instance, in hours.\n36000000000 Ticks = 1 hour (60 minutes)","func_documentation_tokens":["Gets","the","total","elapsed","time","measured","by","the","current","instance","in","hours",".","36000000000","Ticks","=","1","hour","(","60","minutes",")"],"label":1,"text":"Gets the total elapsed time measured by the current instance, in hours.\n36000000000 Ticks = 1 hour (60 minutes)[SEP]public long getElapsedHours() {\n\t\tlong elapsed;\n\t\tif (running) {\n\t\t\telapsed = (System.nanoTime() - startTime);\n\t\t} else {\n\t\t\telapsed = (stopTime - startTime);\n\t\t}\n\t\treturn elapsed \/ nsPerHh;\n\t}"}
{"func_code_string":"private List<File> unzipCorpus(File outDir, ZipFile zip)\n  {\n    List<File> rootDirs = new ArrayList<>();\n\n    Enumeration<? extends ZipEntry> zipEnum = zip.entries();\n    while (zipEnum.hasMoreElements())\n    {\n      ZipEntry e = zipEnum.nextElement();\n      File outFile = new File(outDir, e.getName().replaceAll(\"\\\\\/\", \"\/\"));\n\n      if (e.isDirectory())\n      {\n        if (!outFile.mkdirs())\n        {\n          log.warn(\"Could not create output directory \" + outFile.\n            getAbsolutePath());\n        }\n      } \/\/ end if directory\n      else\n      {\n        if (\"corpus.tab\".equals(outFile.getName()) || \"corpus.annis\".equals(\n          outFile.getName()))\n        {\n          rootDirs.add(outFile.getParentFile());\n        }\n\n        if (!outFile.getParentFile().isDirectory())\n        {\n          if (!outFile.getParentFile().mkdirs())\n          {\n            {\n              log.warn(\n                \"Could not create output directory for file \" + outFile.\n                getAbsolutePath());\n            }\n          }\n        }\n        try (FileOutputStream outStream = new FileOutputStream(outFile);)\n        {\n\n          ByteStreams.copy(zip.getInputStream(e), outStream);\n        }\n        catch (FileNotFoundException ex)\n        {\n          log.error(null, ex);\n        }\n        catch (IOException ex)\n        {\n          log.error(null, ex);\n        }\n      } \/\/ end else is file\n    } \/\/ end for each entry in zip file\n\n    return rootDirs;\n  }","func_code_tokens":["private","List","<","File",">","unzipCorpus","(","File","outDir",",","ZipFile","zip",")","{","List","<","File",">","rootDirs","=","new","ArrayList","<>","(",")",";","Enumeration","<","?","extends","ZipEntry",">","zipEnum","=","zip",".","entries","(",")",";","while","(","zipEnum",".","hasMoreElements","(",")",")","{","ZipEntry","e","=","zipEnum",".","nextElement","(",")",";","File","outFile","=","new","File","(","outDir",",","e",".","getName","(",")",".","replaceAll","(","\"\\\\\/\"",",","\"\/\"",")",")",";","if","(","e",".","isDirectory","(",")",")","{","if","(","!","outFile",".","mkdirs","(",")",")","{","log",".","warn","(","\"Could not create output directory \"","+","outFile",".","getAbsolutePath","(",")",")",";","}","}","\/\/ end if directory","else","{","if","(","\"corpus.tab\"",".","equals","(","outFile",".","getName","(",")",")","||","\"corpus.annis\"",".","equals","(","outFile",".","getName","(",")",")",")","{","rootDirs",".","add","(","outFile",".","getParentFile","(",")",")",";","}","if","(","!","outFile",".","getParentFile","(",")",".","isDirectory","(",")",")","{","if","(","!","outFile",".","getParentFile","(",")",".","mkdirs","(",")",")","{","{","log",".","warn","(","\"Could not create output directory for file \"","+","outFile",".","getAbsolutePath","(",")",")",";","}","}","}","try","(","FileOutputStream","outStream","=","new","FileOutputStream","(","outFile",")",";",")","{","ByteStreams",".","copy","(","zip",".","getInputStream","(","e",")",",","outStream",")",";","}","catch","(","FileNotFoundException","ex",")","{","log",".","error","(","null",",","ex",")",";","}","catch","(","IOException","ex",")","{","log",".","error","(","null",",","ex",")",";","}","}","\/\/ end else is file","}","\/\/ end for each entry in zip file","return","rootDirs",";","}"],"func_documentation_string":"Extract the zipped ANNIS corpus files to an output directory.\n\n@param outDir The ouput directory.\n@param zip ZIP-file to extract.\n@return A list of root directories where the tab-files are located if\nfound, null otherwise.","func_documentation_tokens":["Extract","the","zipped","ANNIS","corpus","files","to","an","output","directory","."],"label":1,"text":"Extract the zipped ANNIS corpus files to an output directory.\n\n@param outDir The ouput directory.\n@param zip ZIP-file to extract.\n@return A list of root directories where the tab-files are located if\nfound, null otherwise.[SEP]private List<File> unzipCorpus(File outDir, ZipFile zip)\n  {\n    List<File> rootDirs = new ArrayList<>();\n\n    Enumeration<? extends ZipEntry> zipEnum = zip.entries();\n    while (zipEnum.hasMoreElements())\n    {\n      ZipEntry e = zipEnum.nextElement();\n      File outFile = new File(outDir, e.getName().replaceAll(\"\\\\\/\", \"\/\"));\n\n      if (e.isDirectory())\n      {\n        if (!outFile.mkdirs())\n        {\n          log.warn(\"Could not create output directory \" + outFile.\n            getAbsolutePath());\n        }\n      } \/\/ end if directory\n      else\n      {\n        if (\"corpus.tab\".equals(outFile.getName()) || \"corpus.annis\".equals(\n          outFile.getName()))\n        {\n          rootDirs.add(outFile.getParentFile());\n        }\n\n        if (!outFile.getParentFile().isDirectory())\n        {\n          if (!outFile.getParentFile().mkdirs())\n          {\n            {\n              log.warn(\n                \"Could not create output directory for file \" + outFile.\n                getAbsolutePath());\n            }\n          }\n        }\n        try (FileOutputStream outStream = new FileOutputStream(outFile);)\n        {\n\n          ByteStreams.copy(zip.getInputStream(e), outStream);\n        }\n        catch (FileNotFoundException ex)\n        {\n          log.error(null, ex);\n        }\n        catch (IOException ex)\n        {\n          log.error(null, ex);\n        }\n      } \/\/ end else is file\n    } \/\/ end for each entry in zip file\n\n    return rootDirs;\n  }"}
{"func_code_string":"public void connectToPostgreSQLDatabase(String database, String host, String port, String user, String password, Boolean secure, String ca, String crt, String key) throws SQLException {\n\n        if (port.startsWith(\"[\")) {\n            port = port.substring(1, port.length() - 1);\n        }\n        if (!secure) {\n            if (password == null) {\n                password = \"stratio\";\n            }\n            try {\n                myConnection = DriverManager.getConnection(\"jdbc:postgresql:\/\/\" + host + \":\" + port + \"\/\" + database, user, password);\n            } catch (SQLException se) {\n                \/\/ log the exception\n                this.getLogger().error(se.getMessage());\n                \/\/ re-throw the exception\n                throw se;\n            }\n\n        } else {\n            Properties props = new Properties();\n            if (user != null) {\n                props.setProperty(\"user\", user);\n            }\n            if (ca != null) {\n                props.setProperty(\"sslrootcert\", ca);\n            }\n            if (crt != null) {\n                props.setProperty(\"sslcert\", crt);\n            }\n            if (key != null) {\n                props.setProperty(\"sslkey\", key);\n            }\n            props.setProperty(\"password\", \"null\");\n            props.setProperty(\"ssl\", \"true\");\n            props.setProperty(\"sslmode\", \"verify-full\");\n\n\n            try {\n                myConnection = DriverManager.getConnection(\"jdbc:postgresql:\/\/\" + host + \":\" + port + \"\/\" + database, props);\n            } catch (SQLException se) {\n                \/\/ log the exception\n                this.getLogger().error(se.getMessage());\n                \/\/ re-throw the exception\n                throw se;\n            }\n\n        }\n    }","func_code_tokens":["public","void","connectToPostgreSQLDatabase","(","String","database",",","String","host",",","String","port",",","String","user",",","String","password",",","Boolean","secure",",","String","ca",",","String","crt",",","String","key",")","throws","SQLException","{","if","(","port",".","startsWith","(","\"[\"",")",")","{","port","=","port",".","substring","(","1",",","port",".","length","(",")","-","1",")",";","}","if","(","!","secure",")","{","if","(","password","==","null",")","{","password","=","\"stratio\"",";","}","try","{","myConnection","=","DriverManager",".","getConnection","(","\"jdbc:postgresql:\/\/\"","+","host","+","\":\"","+","port","+","\"\/\"","+","database",",","user",",","password",")",";","}","catch","(","SQLException","se",")","{","\/\/ log the exception","this",".","getLogger","(",")",".","error","(","se",".","getMessage","(",")",")",";","\/\/ re-throw the exception","throw","se",";","}","}","else","{","Properties","props","=","new","Properties","(",")",";","if","(","user","!=","null",")","{","props",".","setProperty","(","\"user\"",",","user",")",";","}","if","(","ca","!=","null",")","{","props",".","setProperty","(","\"sslrootcert\"",",","ca",")",";","}","if","(","crt","!=","null",")","{","props",".","setProperty","(","\"sslcert\"",",","crt",")",";","}","if","(","key","!=","null",")","{","props",".","setProperty","(","\"sslkey\"",",","key",")",";","}","props",".","setProperty","(","\"password\"",",","\"null\"",")",";","props",".","setProperty","(","\"ssl\"",",","\"true\"",")",";","props",".","setProperty","(","\"sslmode\"",",","\"verify-full\"",")",";","try","{","myConnection","=","DriverManager",".","getConnection","(","\"jdbc:postgresql:\/\/\"","+","host","+","\":\"","+","port","+","\"\/\"","+","database",",","props",")",";","}","catch","(","SQLException","se",")","{","\/\/ log the exception","this",".","getLogger","(",")",".","error","(","se",".","getMessage","(",")",")",";","\/\/ re-throw the exception","throw","se",";","}","}","}"],"func_documentation_string":"Connect to JDBC secured\/not secured database\n\n@param database database connection string\n@param host     database host\n@param port     database port\n@param user     database user\n@param password database password\n@param ca       trusted certificate authorities (.crt)\n@param crt:     server certificate\n@param key:     server private key\n@throws Exception exception     *","func_documentation_tokens":["Connect","to","JDBC","secured","\/","not","secured","database"],"label":1,"text":"Connect to JDBC secured\/not secured database\n\n@param database database connection string\n@param host     database host\n@param port     database port\n@param user     database user\n@param password database password\n@param ca       trusted certificate authorities (.crt)\n@param crt:     server certificate\n@param key:     server private key\n@throws Exception exception     *[SEP]public void connectToPostgreSQLDatabase(String database, String host, String port, String user, String password, Boolean secure, String ca, String crt, String key) throws SQLException {\n\n        if (port.startsWith(\"[\")) {\n            port = port.substring(1, port.length() - 1);\n        }\n        if (!secure) {\n            if (password == null) {\n                password = \"stratio\";\n            }\n            try {\n                myConnection = DriverManager.getConnection(\"jdbc:postgresql:\/\/\" + host + \":\" + port + \"\/\" + database, user, password);\n            } catch (SQLException se) {\n                \/\/ log the exception\n                this.getLogger().error(se.getMessage());\n                \/\/ re-throw the exception\n                throw se;\n            }\n\n        } else {\n            Properties props = new Properties();\n            if (user != null) {\n                props.setProperty(\"user\", user);\n            }\n            if (ca != null) {\n                props.setProperty(\"sslrootcert\", ca);\n            }\n            if (crt != null) {\n                props.setProperty(\"sslcert\", crt);\n            }\n            if (key != null) {\n                props.setProperty(\"sslkey\", key);\n            }\n            props.setProperty(\"password\", \"null\");\n            props.setProperty(\"ssl\", \"true\");\n            props.setProperty(\"sslmode\", \"verify-full\");\n\n\n            try {\n                myConnection = DriverManager.getConnection(\"jdbc:postgresql:\/\/\" + host + \":\" + port + \"\/\" + database, props);\n            } catch (SQLException se) {\n                \/\/ log the exception\n                this.getLogger().error(se.getMessage());\n                \/\/ re-throw the exception\n                throw se;\n            }\n\n        }\n    }"}
{"func_code_string":"public static String getClipboardText(final Context context) {\n        final ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n        final ClipData clipData = clipboard.getPrimaryClip();\n        if(clipData != null && clipData.getItemCount() > 0) {\n            final CharSequence clipboardText = clipData.getItemAt(0).getText();\n            if(clipboardText != null) {\n                return clipboardText.toString();\n            }\n        }\n        return null;\n    }","func_code_tokens":["public","static","String","getClipboardText","(","final","Context","context",")","{","final","ClipboardManager","clipboard","=","(","ClipboardManager",")","context",".","getSystemService","(","Context",".","CLIPBOARD_SERVICE",")",";","final","ClipData","clipData","=","clipboard",".","getPrimaryClip","(",")",";","if","(","clipData","!=","null","&&","clipData",".","getItemCount","(",")",">","0",")","{","final","CharSequence","clipboardText","=","clipData",".","getItemAt","(","0",")",".","getText","(",")",";","if","(","clipboardText","!=","null",")","{","return","clipboardText",".","toString","(",")",";","}","}","return","null",";","}"],"func_documentation_string":"Get the current text from the clipboard.\n\n@return Clipboard text or {@code null} if clipboard is empty or unavailable.","func_documentation_tokens":["Get","the","current","text","from","the","clipboard","."],"label":1,"text":"Get the current text from the clipboard.\n\n@return Clipboard text or {@code null} if clipboard is empty or unavailable.[SEP]public static String getClipboardText(final Context context) {\n        final ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n        final ClipData clipData = clipboard.getPrimaryClip();\n        if(clipData != null && clipData.getItemCount() > 0) {\n            final CharSequence clipboardText = clipData.getItemAt(0).getText();\n            if(clipboardText != null) {\n                return clipboardText.toString();\n            }\n        }\n        return null;\n    }"}
{"func_code_string":"protected Socket acceptSocket(int timeout)\n    {\n        try\n        {\n            Socket s = null;\n\n            if (_listen != null)\n            {\n                if (_soTimeOut != timeout)\n                {\n                    _soTimeOut = timeout;\n                    _listen.setSoTimeout(_soTimeOut);\n                }\n\n                s = _listen.accept();\n\n                try\n                {\n                    if (getMaxIdleTimeMs() >= 0) s.setSoTimeout(getMaxIdleTimeMs());\n                    if (_lingerTimeSecs >= 0)\n                        s.setSoLinger(true, _lingerTimeSecs);\n                    else\n                        s.setSoLinger(false, 0);\n                }\n                catch (Exception e)\n                {\n                    LogSupport.ignore(log, e);\n                }\n            }\n            return s;\n        }\n        catch (java.net.SocketException e)\n        {\n            \/\/ TODO - this is caught and ignored due strange\n            \/\/ exception from linux java1.2.v1a\n            LogSupport.ignore(log, e);\n        }\n        catch (InterruptedIOException e)\n        {\n            LogSupport.ignore(log, e);\n        }\n        catch (IOException e)\n        {\n            log.warn(LogSupport.EXCEPTION, e);\n        }\n        return null;\n    }","func_code_tokens":["protected","Socket","acceptSocket","(","int","timeout",")","{","try","{","Socket","s","=","null",";","if","(","_listen","!=","null",")","{","if","(","_soTimeOut","!=","timeout",")","{","_soTimeOut","=","timeout",";","_listen",".","setSoTimeout","(","_soTimeOut",")",";","}","s","=","_listen",".","accept","(",")",";","try","{","if","(","getMaxIdleTimeMs","(",")",">=","0",")","s",".","setSoTimeout","(","getMaxIdleTimeMs","(",")",")",";","if","(","_lingerTimeSecs",">=","0",")","s",".","setSoLinger","(","true",",","_lingerTimeSecs",")",";","else","s",".","setSoLinger","(","false",",","0",")",";","}","catch","(","Exception","e",")","{","LogSupport",".","ignore","(","log",",","e",")",";","}","}","return","s",";","}","catch","(","java",".","net",".","SocketException","e",")","{","\/\/ TODO - this is caught and ignored due strange","\/\/ exception from linux java1.2.v1a","LogSupport",".","ignore","(","log",",","e",")",";","}","catch","(","InterruptedIOException","e",")","{","LogSupport",".","ignore","(","log",",","e",")",";","}","catch","(","IOException","e",")","{","log",".","warn","(","LogSupport",".","EXCEPTION",",","e",")",";","}","return","null",";","}"],"func_documentation_string":"Accept socket connection. May be overriden by derived class to create specialist\nserversockets (eg SSL).\n\n@param serverSocket\n@param timeout The time to wait for a connection. Normally passed the ThreadPool maxIdleTime.\n@return Accepted Socket","func_documentation_tokens":["Accept","socket","connection",".","May","be","overriden","by","derived","class","to","create","specialist","serversockets","(","eg","SSL",")","."],"label":1,"text":"Accept socket connection. May be overriden by derived class to create specialist\nserversockets (eg SSL).\n\n@param serverSocket\n@param timeout The time to wait for a connection. Normally passed the ThreadPool maxIdleTime.\n@return Accepted Socket[SEP]protected Socket acceptSocket(int timeout)\n    {\n        try\n        {\n            Socket s = null;\n\n            if (_listen != null)\n            {\n                if (_soTimeOut != timeout)\n                {\n                    _soTimeOut = timeout;\n                    _listen.setSoTimeout(_soTimeOut);\n                }\n\n                s = _listen.accept();\n\n                try\n                {\n                    if (getMaxIdleTimeMs() >= 0) s.setSoTimeout(getMaxIdleTimeMs());\n                    if (_lingerTimeSecs >= 0)\n                        s.setSoLinger(true, _lingerTimeSecs);\n                    else\n                        s.setSoLinger(false, 0);\n                }\n                catch (Exception e)\n                {\n                    LogSupport.ignore(log, e);\n                }\n            }\n            return s;\n        }\n        catch (java.net.SocketException e)\n        {\n            \/\/ TODO - this is caught and ignored due strange\n            \/\/ exception from linux java1.2.v1a\n            LogSupport.ignore(log, e);\n        }\n        catch (InterruptedIOException e)\n        {\n            LogSupport.ignore(log, e);\n        }\n        catch (IOException e)\n        {\n            log.warn(LogSupport.EXCEPTION, e);\n        }\n        return null;\n    }"}
{"func_code_string":"InputStream getInputStream() throws IOException {\n        switch (filetype) {\n            case GZ:\n                LOG.debug(\"Decompressing .gz file\");\n                return new GzipCompressorInputStream(new FileInputStream(compressedFile));\n            case BZ2:\n                LOG.debug(\"Decompressing .bz2 file\");\n                return new BZip2CompressorInputStream(new FileInputStream(compressedFile));\n        }\n        return null;\n    }","func_code_tokens":["InputStream","getInputStream","(",")","throws","IOException","{","switch","(","filetype",")","{","case","GZ",":","LOG",".","debug","(","\"Decompressing .gz file\"",")",";","return","new","GzipCompressorInputStream","(","new","FileInputStream","(","compressedFile",")",")",";","case","BZ2",":","LOG",".","debug","(","\"Decompressing .bz2 file\"",")",";","return","new","BZip2CompressorInputStream","(","new","FileInputStream","(","compressedFile",")",")",";","}","return","null",";","}"],"func_documentation_string":"Get an InputStream for the decompressed file.\n\n@return An InputStream, the type could be BZip2CompressorInputStream, or GzipCompressorInputStream depending on what type of file was initially supplied\n@throws IOException IOException","func_documentation_tokens":["Get","an","InputStream","for","the","decompressed","file","."],"label":1,"text":"Get an InputStream for the decompressed file.\n\n@return An InputStream, the type could be BZip2CompressorInputStream, or GzipCompressorInputStream depending on what type of file was initially supplied\n@throws IOException IOException[SEP]InputStream getInputStream() throws IOException {\n        switch (filetype) {\n            case GZ:\n                LOG.debug(\"Decompressing .gz file\");\n                return new GzipCompressorInputStream(new FileInputStream(compressedFile));\n            case BZ2:\n                LOG.debug(\"Decompressing .bz2 file\");\n                return new BZip2CompressorInputStream(new FileInputStream(compressedFile));\n        }\n        return null;\n    }"}
{"func_code_string":"public boolean copyTopicsToClipboard(final boolean cut, @Nonnull @MustNotContainNull final Topic... topics) {\n    boolean result = false;\n\n    if (this.lockIfNotDisposed()) {\n      try {\n        if (topics.length > 0) {\n          final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n          clipboard.setContents(new MMDTopicsTransferable(topics), this);\n\n          if (cut) {\n            deleteTopics(true, ensureNoRootInArray(topics));\n          }\n\n          result = true;\n        }\n      } finally {\n        this.unlock();\n      }\n    }\n\n    return result;\n  }","func_code_tokens":["public","boolean","copyTopicsToClipboard","(","final","boolean","cut",",","@","Nonnull","@","MustNotContainNull","final","Topic","...","topics",")","{","boolean","result","=","false",";","if","(","this",".","lockIfNotDisposed","(",")",")","{","try","{","if","(","topics",".","length",">","0",")","{","final","Clipboard","clipboard","=","Toolkit",".","getDefaultToolkit","(",")",".","getSystemClipboard","(",")",";","clipboard",".","setContents","(","new","MMDTopicsTransferable","(","topics",")",",","this",")",";","if","(","cut",")","{","deleteTopics","(","true",",","ensureNoRootInArray","(","topics",")",")",";","}","result","=","true",";","}","}","finally","{","this",".","unlock","(",")",";","}","}","return","result",";","}"],"func_documentation_string":"Create transferable topic list in system clipboard.\n\n@param cut true shows that remove topics after placing into clipboard\n@param topics topics to be placed into clipboard, if there are successors\nand ancestors then successors will be removed\n@return true if topic array is not empty and operation completed\nsuccessfully, false otherwise\n@since 1.3.1","func_documentation_tokens":["Create","transferable","topic","list","in","system","clipboard","."],"label":1,"text":"Create transferable topic list in system clipboard.\n\n@param cut true shows that remove topics after placing into clipboard\n@param topics topics to be placed into clipboard, if there are successors\nand ancestors then successors will be removed\n@return true if topic array is not empty and operation completed\nsuccessfully, false otherwise\n@since 1.3.1[SEP]public boolean copyTopicsToClipboard(final boolean cut, @Nonnull @MustNotContainNull final Topic... topics) {\n    boolean result = false;\n\n    if (this.lockIfNotDisposed()) {\n      try {\n        if (topics.length > 0) {\n          final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n          clipboard.setContents(new MMDTopicsTransferable(topics), this);\n\n          if (cut) {\n            deleteTopics(true, ensureNoRootInArray(topics));\n          }\n\n          result = true;\n        }\n      } finally {\n        this.unlock();\n      }\n    }\n\n    return result;\n  }"}
{"func_code_string":"public static Long[] nullToEmpty(Long[] array) {\n        if (array == null || array.length == 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        return array;\n    }","func_code_tokens":["public","static","Long","[","]","nullToEmpty","(","Long","[","]","array",")","{","if","(","array","==","null","||","array",".","length","==","0",")","{","return","EMPTY_LONG_OBJECT_ARRAY",";","}","return","array",";","}"],"func_documentation_string":"<p>Defensive programming technique to change a <code>null<\/code>\nreference to an empty one.<\/p>\n<p>\n<p>This method returns an empty array for a <code>null<\/code> input array.<\/p>\n<p>\n<p>As a memory optimizing technique an empty array passed in will be overridden with\nthe empty <code>public static<\/code> references in this class.<\/p>\n\n@param array the array to check for <code>null<\/code> or empty\n@return the same array, <code>public static<\/code> empty array if <code>null<\/code> or empty input\n@since 2.5","func_documentation_tokens":["<p",">","Defensive","programming","technique","to","change","a","<code",">","null<","\/","code",">","reference","to","an","empty","one",".","<","\/","p",">","<p",">","<p",">","This","method","returns","an","empty","array","for","a","<code",">","null<","\/","code",">","input","array",".","<","\/","p",">","<p",">","<p",">","As","a","memory","optimizing","technique","an","empty","array","passed","in","will","be","overridden","with","the","empty","<code",">","public","static<","\/","code",">","references","in","this","class",".","<","\/","p",">"],"label":0,"text":"<p>Defensive programming technique to change a <code>null<\/code>\nreference to an empty one.<\/p>\n<p>\n<p>This method returns an empty array for a <code>null<\/code> input array.<\/p>\n<p>\n<p>As a memory optimizing technique an empty array passed in will be overridden with\nthe empty <code>public static<\/code> references in this class.<\/p>\n\n@param array the array to check for <code>null<\/code> or empty\n@return the same array, <code>public static<\/code> empty array if <code>null<\/code> or empty input\n@since 2.5[SEP]public static Long[] nullToEmpty(Long[] array) {\n        if (array == null || array.length == 0) {\n            return EMPTY_LONG_OBJECT_ARRAY;\n        }\n        return array;\n    }"}
{"func_code_string":"public static Double[] nullToEmpty(Double[] array) {\n        if (array == null || array.length == 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        return array;\n    }","func_code_tokens":["public","static","Double","[","]","nullToEmpty","(","Double","[","]","array",")","{","if","(","array","==","null","||","array",".","length","==","0",")","{","return","EMPTY_DOUBLE_OBJECT_ARRAY",";","}","return","array",";","}"],"func_documentation_string":"<p>Defensive programming technique to change a <code>null<\/code>\nreference to an empty one.<\/p>\n<p>\n<p>This method returns an empty array for a <code>null<\/code> input array.<\/p>\n<p>\n<p>As a memory optimizing technique an empty array passed in will be overridden with\nthe empty <code>public static<\/code> references in this class.<\/p>\n\n@param array the array to check for <code>null<\/code> or empty\n@return the same array, <code>public static<\/code> empty array if <code>null<\/code> or empty input\n@since 2.5","func_documentation_tokens":["<p",">","Defensive","programming","technique","to","change","a","<code",">","null<","\/","code",">","reference","to","an","empty","one",".","<","\/","p",">","<p",">","<p",">","This","method","returns","an","empty","array","for","a","<code",">","null<","\/","code",">","input","array",".","<","\/","p",">","<p",">","<p",">","As","a","memory","optimizing","technique","an","empty","array","passed","in","will","be","overridden","with","the","empty","<code",">","public","static<","\/","code",">","references","in","this","class",".","<","\/","p",">"],"label":0,"text":"<p>Defensive programming technique to change a <code>null<\/code>\nreference to an empty one.<\/p>\n<p>\n<p>This method returns an empty array for a <code>null<\/code> input array.<\/p>\n<p>\n<p>As a memory optimizing technique an empty array passed in will be overridden with\nthe empty <code>public static<\/code> references in this class.<\/p>\n\n@param array the array to check for <code>null<\/code> or empty\n@return the same array, <code>public static<\/code> empty array if <code>null<\/code> or empty input\n@since 2.5[SEP]public static Double[] nullToEmpty(Double[] array) {\n        if (array == null || array.length == 0) {\n            return EMPTY_DOUBLE_OBJECT_ARRAY;\n        }\n        return array;\n    }"}
{"func_code_string":"private void extract(String htmlDoc) {\n\n    \/\/now extract the contents of <body>...\n    int bodyStart = htmlDoc.indexOf(BODY_BEGIN) + BODY_BEGIN.length();\n\n    \/\/scan for end of the <body> start tag (beginning of body content)\n    char quote = NOT_IN_QUOTE;\n    for (int body = bodyStart; body < htmlDoc.length(); body++) {\n      final char c = htmlDoc.charAt(body);\n      if (isQuoteChar(c)) {\n        if (quote == NOT_IN_QUOTE)\n          quote = c;\n        else if (quote == c)\n          quote = NOT_IN_QUOTE;\n      }\n\n      if ('>' == c && NOT_IN_QUOTE == quote) {\n        bodyStart = body + 1;\n        break;\n      }\n    }\n\n    int bodyEnd = htmlDoc.indexOf(BODY_END, bodyStart);\n\n    \/\/if there was no body tag, just embed whatever was rendered directly\n    if (-1 == bodyEnd) {\n      EmbeddedRespond.this.body = htmlDoc;\n    } else\n      EmbeddedRespond.this.body = htmlDoc.substring(bodyStart, bodyEnd);\n  }","func_code_tokens":["private","void","extract","(","String","htmlDoc",")","{","\/\/now extract the contents of <body>...","int","bodyStart","=","htmlDoc",".","indexOf","(","BODY_BEGIN",")","+","BODY_BEGIN",".","length","(",")",";","\/\/scan for end of the <body> start tag (beginning of body content)","char","quote","=","NOT_IN_QUOTE",";","for","(","int","body","=","bodyStart",";","body","<","htmlDoc",".","length","(",")",";","body","++",")","{","final","char","c","=","htmlDoc",".","charAt","(","body",")",";","if","(","isQuoteChar","(","c",")",")","{","if","(","quote","==","NOT_IN_QUOTE",")","quote","=","c",";","else","if","(","quote","==","c",")","quote","=","NOT_IN_QUOTE",";","}","if","(","'","'","==","c","&&","NOT_IN_QUOTE","==","quote",")","{","bodyStart","=","body","+","1",";","break",";","}","}","int","bodyEnd","=","htmlDoc",".","indexOf","(","BODY_END",",","bodyStart",")",";","\/\/if there was no body tag, just embed whatever was rendered directly","if","(","-","1","==","bodyEnd",")","{","EmbeddedRespond",".","this",".","body","=","htmlDoc",";","}","else","EmbeddedRespond",".","this",".","body","=","htmlDoc",".","substring","(","bodyStart",",","bodyEnd",")",";","}"],"func_documentation_string":"state machine extracts <body> tag content","func_documentation_tokens":["state","machine","extracts","<body",">","tag","content"],"label":1,"text":"state machine extracts <body> tag content[SEP]private void extract(String htmlDoc) {\n\n    \/\/now extract the contents of <body>...\n    int bodyStart = htmlDoc.indexOf(BODY_BEGIN) + BODY_BEGIN.length();\n\n    \/\/scan for end of the <body> start tag (beginning of body content)\n    char quote = NOT_IN_QUOTE;\n    for (int body = bodyStart; body < htmlDoc.length(); body++) {\n      final char c = htmlDoc.charAt(body);\n      if (isQuoteChar(c)) {\n        if (quote == NOT_IN_QUOTE)\n          quote = c;\n        else if (quote == c)\n          quote = NOT_IN_QUOTE;\n      }\n\n      if ('>' == c && NOT_IN_QUOTE == quote) {\n        bodyStart = body + 1;\n        break;\n      }\n    }\n\n    int bodyEnd = htmlDoc.indexOf(BODY_END, bodyStart);\n\n    \/\/if there was no body tag, just embed whatever was rendered directly\n    if (-1 == bodyEnd) {\n      EmbeddedRespond.this.body = htmlDoc;\n    } else\n      EmbeddedRespond.this.body = htmlDoc.substring(bodyStart, bodyEnd);\n  }"}
{"func_code_string":"public CloseableHttpResponse postJson(String url, String json, Map<String, String> reqHeaders) throws IOException {\n        CloseableHttpClient req = getClient();\n        CloseableHttpResponse resp = null;\n        HttpPost post = new HttpPost(url);\n        addHeaders(post, reqHeaders);\n        post.setHeader(json, url);\n        StringEntity input = new StringEntity(json, ContentType.APPLICATION_JSON);\n        post.setEntity(input);\n        resp = req.execute(post);\n        return resp;\n    }","func_code_tokens":["public","CloseableHttpResponse","postJson","(","String","url",",","String","json",",","Map","<","String",",","String",">","reqHeaders",")","throws","IOException","{","CloseableHttpClient","req","=","getClient","(",")",";","CloseableHttpResponse","resp","=","null",";","HttpPost","post","=","new","HttpPost","(","url",")",";","addHeaders","(","post",",","reqHeaders",")",";","post",".","setHeader","(","json",",","url",")",";","StringEntity","input","=","new","StringEntity","(","json",",","ContentType",".","APPLICATION_JSON",")",";","post",".","setEntity","(","input",")",";","resp","=","req",".","execute","(","post",")",";","return","resp",";","}"],"func_documentation_string":"Convenient method for POSTing json strings. It is the responsibility of the\ncaller to call returnClient() to ensure clean state of the pool.\n@param url\n@param json\n@param reqHeaders\n@return\n@throws IOException","func_documentation_tokens":["Convenient","method","for","POSTing","json","strings",".","It","is","the","responsibility","of","the","caller","to","call","returnClient","()","to","ensure","clean","state","of","the","pool","."],"label":1,"text":"Convenient method for POSTing json strings. It is the responsibility of the\ncaller to call returnClient() to ensure clean state of the pool.\n@param url\n@param json\n@param reqHeaders\n@return\n@throws IOException[SEP]public CloseableHttpResponse postJson(String url, String json, Map<String, String> reqHeaders) throws IOException {\n        CloseableHttpClient req = getClient();\n        CloseableHttpResponse resp = null;\n        HttpPost post = new HttpPost(url);\n        addHeaders(post, reqHeaders);\n        post.setHeader(json, url);\n        StringEntity input = new StringEntity(json, ContentType.APPLICATION_JSON);\n        post.setEntity(input);\n        resp = req.execute(post);\n        return resp;\n    }"}
{"func_code_string":"public Result<String> convertToHtml(File file) throws IOException {\n        return new InternalDocumentConverter(options).convertToHtml(file).toResult();\n    }","func_code_tokens":["public","Result","<","String",">","convertToHtml","(","File","file",")","throws","IOException","{","return","new","InternalDocumentConverter","(","options",")",".","convertToHtml","(","file",")",".","toResult","(",")",";","}"],"func_documentation_string":"Converts {@code file} into an HTML string.","func_documentation_tokens":["Converts","{"],"label":0,"text":"Converts {@code file} into an HTML string.[SEP]public Result<String> convertToHtml(File file) throws IOException {\n        return new InternalDocumentConverter(options).convertToHtml(file).toResult();\n    }"}
{"func_code_string":"public Result<String> extractRawText(File file) throws IOException {\n        return new InternalDocumentConverter(options).extractRawText(file).toResult();\n    }","func_code_tokens":["public","Result","<","String",">","extractRawText","(","File","file",")","throws","IOException","{","return","new","InternalDocumentConverter","(","options",")",".","extractRawText","(","file",")",".","toResult","(",")",";","}"],"func_documentation_string":"Extract the raw text of the document.\nThis will ignore all formatting in the document.\nEach paragraph is followed by two newlines.","func_documentation_tokens":["Extract","the","raw","text","of","the","document",".","This","will","ignore","all","formatting","in","the","document",".","Each","paragraph","is","followed","by","two","newlines","."],"label":0,"text":"Extract the raw text of the document.\nThis will ignore all formatting in the document.\nEach paragraph is followed by two newlines.[SEP]public Result<String> extractRawText(File file) throws IOException {\n        return new InternalDocumentConverter(options).extractRawText(file).toResult();\n    }"}
{"func_code_string":"public static BigDecimal decimalPart(final BigDecimal val) {\r\n        return BigDecimalUtil.subtract(val, val.setScale(0, BigDecimal.ROUND_DOWN));\r\n    }","func_code_tokens":["public","static","BigDecimal","decimalPart","(","final","BigDecimal","val",")","{","return","BigDecimalUtil",".","subtract","(","val",",","val",".","setScale","(","0",",","BigDecimal",".","ROUND_DOWN",")",")",";","}"],"func_documentation_string":"Return the decimal part of the value.\n@param val","func_documentation_tokens":["Return","the","decimal","part","of","the","value","."],"label":0,"text":"Return the decimal part of the value.\n@param val[SEP]public static BigDecimal decimalPart(final BigDecimal val) {\r\n        return BigDecimalUtil.subtract(val, val.setScale(0, BigDecimal.ROUND_DOWN));\r\n    }"}
{"func_code_string":"public static <T> T[] filter(T array[], Filter<T> filter){\n        List<T> filteredList = new ArrayList<T>(array.length);\n        for(T element: array){\n            if(filter.select(element))\n                filteredList.add(element);\n        }\n        @SuppressWarnings(\"unchecked\")\n        T filteredArray[] = (T[])Array.newInstance(array.getClass().getComponentType(), filteredList.size());\n        return filteredList.toArray(filteredArray);\n    }","func_code_tokens":["public","static","<","T",">","T","[","]","filter","(","T","array","[","]",",","Filter","<","T",">","filter",")","{","List","<","T",">","filteredList","=","new","ArrayList","<","T",">","(","array",".","length",")",";","for","(","T","element",":","array",")","{","if","(","filter",".","select","(","element",")",")","filteredList",".","add","(","element",")",";","}","@","SuppressWarnings","(","\"unchecked\"",")","T","filteredArray","[","]","=","(","T","[","]",")","Array",".","newInstance","(","array",".","getClass","(",")",".","getComponentType","(",")",",","filteredList",".","size","(",")",")",";","return","filteredList",".","toArray","(","filteredArray",")",";","}"],"func_documentation_string":"Returns new array which contains only those elements from given {@code array}\nwhich are selected by the {@code filter}\n\n@param array the array to be filtered\n@param filter filter to use\n\n@return filtered array","func_documentation_tokens":["Returns","new","array","which","contains","only","those","elements","from","given","{","@code","array","}","which","are","selected","by","the","{","@code","filter","}"],"label":1,"text":"Returns new array which contains only those elements from given {@code array}\nwhich are selected by the {@code filter}\n\n@param array the array to be filtered\n@param filter filter to use\n\n@return filtered array[SEP]public static <T> T[] filter(T array[], Filter<T> filter){\n        List<T> filteredList = new ArrayList<T>(array.length);\n        for(T element: array){\n            if(filter.select(element))\n                filteredList.add(element);\n        }\n        @SuppressWarnings(\"unchecked\")\n        T filteredArray[] = (T[])Array.newInstance(array.getClass().getComponentType(), filteredList.size());\n        return filteredList.toArray(filteredArray);\n    }"}
{"func_code_string":"protected void selectCheckbox(PageElement element, String valueKeyOrKey, Map<String, Boolean> values) throws TechnicalException, FailureException {\r\n        final String valueKey = Context.getValue(valueKeyOrKey) != null ? Context.getValue(valueKeyOrKey) : valueKeyOrKey;\r\n        try {\r\n            final WebElement webElement = Context.waitUntil(ExpectedConditions.elementToBeClickable(Utilities.getLocator(element)));\r\n            Boolean checkboxValue = values.get(valueKey);\r\n            if (checkboxValue == null) {\r\n                checkboxValue = values.get(\"Default\");\r\n            }\r\n            if (webElement.isSelected() != checkboxValue.booleanValue()) {\r\n                webElement.click();\r\n            }\r\n        } catch (final Exception e) {\r\n            new Result.Failure<>(e.getMessage(), Messages.format(Messages.getMessage(Messages.FAIL_MESSAGE_UNABLE_TO_CHECK_ELEMENT), element, element.getPage().getApplication()), true,\r\n                    element.getPage().getCallBack());\r\n        }\r\n    }","func_code_tokens":["protected","void","selectCheckbox","(","PageElement","element",",","String","valueKeyOrKey",",","Map","<","String",",","Boolean",">","values",")","throws","TechnicalException",",","FailureException","{","final","String","valueKey","=","Context",".","getValue","(","valueKeyOrKey",")","!=","null","?","Context",".","getValue","(","valueKeyOrKey",")",":","valueKeyOrKey",";","try","{","final","WebElement","webElement","=","Context",".","waitUntil","(","ExpectedConditions",".","elementToBeClickable","(","Utilities",".","getLocator","(","element",")",")",")",";","Boolean","checkboxValue","=","values",".","get","(","valueKey",")",";","if","(","checkboxValue","==","null",")","{","checkboxValue","=","values",".","get","(","\"Default\"",")",";","}","if","(","webElement",".","isSelected","(",")","!=","checkboxValue",".","booleanValue","(",")",")","{","webElement",".","click","(",")",";","}","}","catch","(","final","Exception","e",")","{","new","Result",".","Failure","<>","(","e",".","getMessage","(",")",",","Messages",".","format","(","Messages",".","getMessage","(","Messages",".","FAIL_MESSAGE_UNABLE_TO_CHECK_ELEMENT",")",",","element",",","element",".","getPage","(",")",".","getApplication","(",")",")",",","true",",","element",".","getPage","(",")",".","getCallBack","(",")",")",";","}","}"],"func_documentation_string":"Checks a checkbox type element (value corresponding to key \"valueKey\").\n\n@param element\nTarget page element\n@param valueKeyOrKey\nis valueKey (valueKey or key in context (after a save)) to match in values map\n@param values\nValues map\n@throws TechnicalException\nis thrown if you have a technical error (format, configuration, datas, ...) in NoraUi.\nFailure with {@value com.github.noraui.utils.Messages#FAIL_MESSAGE_UNABLE_TO_CHECK_ELEMENT} message (with screenshot)\n@throws FailureException\nif the scenario encounters a functional error","func_documentation_tokens":["Checks","a","checkbox","type","element","(","value","corresponding","to","key","valueKey",")","."],"label":1,"text":"Checks a checkbox type element (value corresponding to key \"valueKey\").\n\n@param element\nTarget page element\n@param valueKeyOrKey\nis valueKey (valueKey or key in context (after a save)) to match in values map\n@param values\nValues map\n@throws TechnicalException\nis thrown if you have a technical error (format, configuration, datas, ...) in NoraUi.\nFailure with {@value com.github.noraui.utils.Messages#FAIL_MESSAGE_UNABLE_TO_CHECK_ELEMENT} message (with screenshot)\n@throws FailureException\nif the scenario encounters a functional error[SEP]protected void selectCheckbox(PageElement element, String valueKeyOrKey, Map<String, Boolean> values) throws TechnicalException, FailureException {\r\n        final String valueKey = Context.getValue(valueKeyOrKey) != null ? Context.getValue(valueKeyOrKey) : valueKeyOrKey;\r\n        try {\r\n            final WebElement webElement = Context.waitUntil(ExpectedConditions.elementToBeClickable(Utilities.getLocator(element)));\r\n            Boolean checkboxValue = values.get(valueKey);\r\n            if (checkboxValue == null) {\r\n                checkboxValue = values.get(\"Default\");\r\n            }\r\n            if (webElement.isSelected() != checkboxValue.booleanValue()) {\r\n                webElement.click();\r\n            }\r\n        } catch (final Exception e) {\r\n            new Result.Failure<>(e.getMessage(), Messages.format(Messages.getMessage(Messages.FAIL_MESSAGE_UNABLE_TO_CHECK_ELEMENT), element, element.getPage().getApplication()), true,\r\n                    element.getPage().getCallBack());\r\n        }\r\n    }"}
{"func_code_string":"public static byte[] build(String className, String superName) {\n\t\tByteBuffer bb = ByteBuffer.allocate(1000);\n\t\tbb.put(BA0_1);\n\t\t\n\t\t\/\/bb.put(BA2);\n\t\twriteUtf8(bb, convertDots(className));\n\t\t\n\t\tbb.put(BA3);\n\t\t\n\t\t\/\/bb.put(BA4);\n\t\twriteUtf8(bb, convertDots(superName));\n\t\t\n\t\tbb.put(BA5_12);\n\t\t\n\t\t\/\/bb.put(BA13);\n\t\twriteUtf8(bb, \"L\" + convertDots(className) + \";\");\n\t\t\n\t\tbb.put(BA14);\n\t\t\n\t\t\/\/bb.put(BA15);\n\t\tString fName = convertDots(className);\n\t\tfName = fName.substring(fName.lastIndexOf('\/') + 1);\n\t\tfName += \".java\";\n\t\twriteUtf8(bb, fName);\n\t\t\n\t\tbb.put(BA_end);\n\t\t\n\t\tbyte[] ba = new byte[bb.position()];\n\t\tbb.rewind();\n\t\tbb.get(ba);\n\t\treturn ba;\n\t}","func_code_tokens":["public","static","byte","[","]","build","(","String","className",",","String","superName",")","{","ByteBuffer","bb","=","ByteBuffer",".","allocate","(","1000",")",";","bb",".","put","(","BA0_1",")",";","\/\/bb.put(BA2);","writeUtf8","(","bb",",","convertDots","(","className",")",")",";","bb",".","put","(","BA3",")",";","\/\/bb.put(BA4);","writeUtf8","(","bb",",","convertDots","(","superName",")",")",";","bb",".","put","(","BA5_12",")",";","\/\/bb.put(BA13);","writeUtf8","(","bb",",","\"L\"","+","convertDots","(","className",")","+","\";\"",")",";","bb",".","put","(","BA14",")",";","\/\/bb.put(BA15);","String","fName","=","convertDots","(","className",")",";","fName","=","fName",".","substring","(","fName",".","lastIndexOf","(","'","'",")","+","1",")",";","fName","+=","\".java\"",";","writeUtf8","(","bb",",","fName",")",";","bb",".","put","(","BA_end",")",";","byte","[","]","ba","=","new","byte","[","bb",".","position","(",")","]",";","bb",".","rewind","(",")",";","bb",".","get","(","ba",")",";","return","ba",";","}"],"func_documentation_string":"}","func_documentation_tokens":["}"],"label":0,"text":"}[SEP]public static byte[] build(String className, String superName) {\n\t\tByteBuffer bb = ByteBuffer.allocate(1000);\n\t\tbb.put(BA0_1);\n\t\t\n\t\t\/\/bb.put(BA2);\n\t\twriteUtf8(bb, convertDots(className));\n\t\t\n\t\tbb.put(BA3);\n\t\t\n\t\t\/\/bb.put(BA4);\n\t\twriteUtf8(bb, convertDots(superName));\n\t\t\n\t\tbb.put(BA5_12);\n\t\t\n\t\t\/\/bb.put(BA13);\n\t\twriteUtf8(bb, \"L\" + convertDots(className) + \";\");\n\t\t\n\t\tbb.put(BA14);\n\t\t\n\t\t\/\/bb.put(BA15);\n\t\tString fName = convertDots(className);\n\t\tfName = fName.substring(fName.lastIndexOf('\/') + 1);\n\t\tfName += \".java\";\n\t\twriteUtf8(bb, fName);\n\t\t\n\t\tbb.put(BA_end);\n\t\t\n\t\tbyte[] ba = new byte[bb.position()];\n\t\tbb.rewind();\n\t\tbb.get(ba);\n\t\treturn ba;\n\t}"}
{"func_code_string":"public static File earlHtmlReport( String outputDir )\r\n                    throws FileNotFoundException {\r\n\r\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\r\n        String resourceDir = cl.getResource( \"com\/occamlab\/te\/earl\/lib\" ).getPath();\r\n        String earlXsl = cl.getResource( \"com\/occamlab\/te\/earl_html_report.xsl\" ).toString();\r\n\r\n        File htmlOutput = new File( outputDir, \"result\" );\r\n        htmlOutput.mkdir();\r\n        LOGR.fine( \"HTML output is written to directory \" + htmlOutput );\r\n        File earlResult = new File( outputDir, \"earl-results.rdf\" );\r\n\r\n        try {\r\n            TransformerFactory tf = TransformerFactory.newInstance();\r\n            Transformer transformer = tf.newTransformer( new StreamSource( earlXsl ) );\r\n            transformer.setParameter( \"outputDir\", htmlOutput );\r\n            File indexHtml = new File( htmlOutput, \"index.html\" );\r\n            indexHtml.createNewFile();\r\n            FileOutputStream outputStream = new FileOutputStream( indexHtml );\r\n            transformer.transform( new StreamSource( earlResult ), new StreamResult( outputStream ) );\r\n            \/\/ Foritfy Mod: Close the outputStream releasing its resources\r\n            outputStream.close();\r\n            FileUtils.copyDirectory( new File( resourceDir ), htmlOutput );\r\n        } catch ( Exception e ) {\r\n            LOGR.log( Level.SEVERE, \"Transformation of EARL to HTML failed.\", e );\r\n            throw new RuntimeException( e );\r\n        }\r\n        if ( !htmlOutput.exists() ) {\r\n            throw new FileNotFoundException( \"HTML results not found at \" + htmlOutput.getAbsolutePath() );\r\n        }\r\n        return htmlOutput;\r\n    }","func_code_tokens":["public","static","File","earlHtmlReport","(","String","outputDir",")","throws","FileNotFoundException","{","ClassLoader","cl","=","Thread",".","currentThread","(",")",".","getContextClassLoader","(",")",";","String","resourceDir","=","cl",".","getResource","(","\"com\/occamlab\/te\/earl\/lib\"",")",".","getPath","(",")",";","String","earlXsl","=","cl",".","getResource","(","\"com\/occamlab\/te\/earl_html_report.xsl\"",")",".","toString","(",")",";","File","htmlOutput","=","new","File","(","outputDir",",","\"result\"",")",";","htmlOutput",".","mkdir","(",")",";","LOGR",".","fine","(","\"HTML output is written to directory \"","+","htmlOutput",")",";","File","earlResult","=","new","File","(","outputDir",",","\"earl-results.rdf\"",")",";","try","{","TransformerFactory","tf","=","TransformerFactory",".","newInstance","(",")",";","Transformer","transformer","=","tf",".","newTransformer","(","new","StreamSource","(","earlXsl",")",")",";","transformer",".","setParameter","(","\"outputDir\"",",","htmlOutput",")",";","File","indexHtml","=","new","File","(","htmlOutput",",","\"index.html\"",")",";","indexHtml",".","createNewFile","(",")",";","FileOutputStream","outputStream","=","new","FileOutputStream","(","indexHtml",")",";","transformer",".","transform","(","new","StreamSource","(","earlResult",")",",","new","StreamResult","(","outputStream",")",")",";","\/\/ Foritfy Mod: Close the outputStream releasing its resources\r","outputStream",".","close","(",")",";","FileUtils",".","copyDirectory","(","new","File","(","resourceDir",")",",","htmlOutput",")",";","}","catch","(","Exception","e",")","{","LOGR",".","log","(","Level",".","SEVERE",",","\"Transformation of EARL to HTML failed.\"",",","e",")",";","throw","new","RuntimeException","(","e",")",";","}","if","(","!","htmlOutput",".","exists","(",")",")","{","throw","new","FileNotFoundException","(","\"HTML results not found at \"","+","htmlOutput",".","getAbsolutePath","(",")",")",";","}","return","htmlOutput",";","}"],"func_documentation_string":"Convert EARL result into HTML report.\n\n@param outputDir\nLocation of the test result.\n@return\nReturn the output file.\n@throws FileNotFoundException\nThrows exception if file is not available.","func_documentation_tokens":["Convert","EARL","result","into","HTML","report","."],"label":0,"text":"Convert EARL result into HTML report.\n\n@param outputDir\nLocation of the test result.\n@return\nReturn the output file.\n@throws FileNotFoundException\nThrows exception if file is not available.[SEP]public static File earlHtmlReport( String outputDir )\r\n                    throws FileNotFoundException {\r\n\r\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\r\n        String resourceDir = cl.getResource( \"com\/occamlab\/te\/earl\/lib\" ).getPath();\r\n        String earlXsl = cl.getResource( \"com\/occamlab\/te\/earl_html_report.xsl\" ).toString();\r\n\r\n        File htmlOutput = new File( outputDir, \"result\" );\r\n        htmlOutput.mkdir();\r\n        LOGR.fine( \"HTML output is written to directory \" + htmlOutput );\r\n        File earlResult = new File( outputDir, \"earl-results.rdf\" );\r\n\r\n        try {\r\n            TransformerFactory tf = TransformerFactory.newInstance();\r\n            Transformer transformer = tf.newTransformer( new StreamSource( earlXsl ) );\r\n            transformer.setParameter( \"outputDir\", htmlOutput );\r\n            File indexHtml = new File( htmlOutput, \"index.html\" );\r\n            indexHtml.createNewFile();\r\n            FileOutputStream outputStream = new FileOutputStream( indexHtml );\r\n            transformer.transform( new StreamSource( earlResult ), new StreamResult( outputStream ) );\r\n            \/\/ Foritfy Mod: Close the outputStream releasing its resources\r\n            outputStream.close();\r\n            FileUtils.copyDirectory( new File( resourceDir ), htmlOutput );\r\n        } catch ( Exception e ) {\r\n            LOGR.log( Level.SEVERE, \"Transformation of EARL to HTML failed.\", e );\r\n            throw new RuntimeException( e );\r\n        }\r\n        if ( !htmlOutput.exists() ) {\r\n            throw new FileNotFoundException( \"HTML results not found at \" + htmlOutput.getAbsolutePath() );\r\n        }\r\n        return htmlOutput;\r\n    }"}
{"func_code_string":"private boolean isBinary() {\n        try (InputStream in = getInputStream()) {\n            long size = Files.size(file.toPath());\n            if (size == 0) {\n                \/\/ Empty file, so no need to check\n                return true;\n            }\n\n            byte[] b = new byte[( size < StreamUtils.DEFAULT_PROBE_SIZE ? (int)size : StreamUtils.DEFAULT_PROBE_SIZE)];\n            int read = in.read(b);\n            if (read != b.length) {\n                \/\/ Something went wrong, so better not to read line by line\n                return true;\n            }\n\n            return StreamUtils.isNonWhitespaceControlCharacter(b);\n        } catch (IOException e) {\n            \/\/ If cannot be checked, then considered as binary, so we do not\n            \/\/ read line by line\n            return true;\n        }\n    }","func_code_tokens":["private","boolean","isBinary","(",")","{","try","(","InputStream","in","=","getInputStream","(",")",")","{","long","size","=","Files",".","size","(","file",".","toPath","(",")",")",";","if","(","size","==","0",")","{","\/\/ Empty file, so no need to check","return","true",";","}","byte","[","]","b","=","new","byte","[","(","size","<","StreamUtils",".","DEFAULT_PROBE_SIZE","?","(","int",")","size",":","StreamUtils",".","DEFAULT_PROBE_SIZE",")","]",";","int","read","=","in",".","read","(","b",")",";","if","(","read","!=","b",".","length",")","{","\/\/ Something went wrong, so better not to read line by line","return","true",";","}","return","StreamUtils",".","isNonWhitespaceControlCharacter","(","b",")",";","}","catch","(","IOException","e",")","{","\/\/ If cannot be checked, then considered as binary, so we do not","\/\/ read line by line","return","true",";","}","}"],"func_documentation_string":"Check if the file is binary or not","func_documentation_tokens":["Check","if","the","file","is","binary","or","not"],"label":0,"text":"Check if the file is binary or not[SEP]private boolean isBinary() {\n        try (InputStream in = getInputStream()) {\n            long size = Files.size(file.toPath());\n            if (size == 0) {\n                \/\/ Empty file, so no need to check\n                return true;\n            }\n\n            byte[] b = new byte[( size < StreamUtils.DEFAULT_PROBE_SIZE ? (int)size : StreamUtils.DEFAULT_PROBE_SIZE)];\n            int read = in.read(b);\n            if (read != b.length) {\n                \/\/ Something went wrong, so better not to read line by line\n                return true;\n            }\n\n            return StreamUtils.isNonWhitespaceControlCharacter(b);\n        } catch (IOException e) {\n            \/\/ If cannot be checked, then considered as binary, so we do not\n            \/\/ read line by line\n            return true;\n        }\n    }"}
{"func_code_string":"public static String getCurrentDate() {\n\t\tlong now = System.currentTimeMillis();\n\n\t\tif ((now - currentDateGenerated) > 1000) {\n\t\t\tsynchronized (format) {\n\t\t\t\tif ((now - currentDateGenerated) > 1000) {\n\t\t\t\t\tcurrentDateGenerated = now;\n\t\t\t\t\tcurrentDate = format.format(new Date(now));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn currentDate;\n\t}","func_code_tokens":["public","static","String","getCurrentDate","(",")","{","long","now","=","System",".","currentTimeMillis","(",")",";","if","(","(","now","-","currentDateGenerated",")",">","1000",")","{","synchronized","(","format",")","{","if","(","(","now","-","currentDateGenerated",")",">","1000",")","{","currentDateGenerated","=","now",";","currentDate","=","format",".","format","(","new","Date","(","now",")",")",";","}","}","}","return","currentDate",";","}"],"func_documentation_string":"Gets the current date in HTTP format.\n\n@return Current date in HTTP format","func_documentation_tokens":["Gets","the","current","date","in","HTTP","format","."],"label":1,"text":"Gets the current date in HTTP format.\n\n@return Current date in HTTP format[SEP]public static String getCurrentDate() {\n\t\tlong now = System.currentTimeMillis();\n\n\t\tif ((now - currentDateGenerated) > 1000) {\n\t\t\tsynchronized (format) {\n\t\t\t\tif ((now - currentDateGenerated) > 1000) {\n\t\t\t\t\tcurrentDateGenerated = now;\n\t\t\t\t\tcurrentDate = format.format(new Date(now));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn currentDate;\n\t}"}
{"func_code_string":"public static String[] split(final String src, final String delimiter) {\n\t\tint maxparts = (src.length() \/ delimiter.length()) + 2;\t\t\/\/ one more for the last\n\t\tint[] positions = new int[maxparts];\n\t\tint dellen = delimiter.length();\n\n\t\tint i, j = 0;\n\t\tint count = 0;\n\t\tpositions[0] = - dellen;\n\t\twhile ((i = src.indexOf(delimiter, j)) != -1) {\n\t\t\tcount++;\n\t\t\tpositions[count] = i;\n\t\t\tj = i + dellen;\n\t\t}\n\t\tcount++;\n\t\tpositions[count] = src.length();\n\n\t\tString[] result = new String[count];\n\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tresult[i] = src.substring(positions[i] + dellen, positions[i + 1]);\n\t\t}\n\t\treturn result;\n\t}","func_code_tokens":["public","static","String","[","]","split","(","final","String","src",",","final","String","delimiter",")","{","int","maxparts","=","(","src",".","length","(",")","\/","delimiter",".","length","(",")",")","+","2",";","\/\/ one more for the last","int","[","]","positions","=","new","int","[","maxparts","]",";","int","dellen","=","delimiter",".","length","(",")",";","int","i",",","j","=","0",";","int","count","=","0",";","positions","[","0","]","=","-","dellen",";","while","(","(","i","=","src",".","indexOf","(","delimiter",",","j",")",")","!=","-","1",")","{","count","++",";","positions","[","count","]","=","i",";","j","=","i","+","dellen",";","}","count","++",";","positions","[","count","]","=","src",".","length","(",")",";","String","[","]","result","=","new","String","[","count","]",";","for","(","i","=","0",";","i","<","count",";","i","++",")","{","result","[","i","]","=","src",".","substring","(","positions","[","i","]","+","dellen",",","positions","[","i","+","1","]",")",";","}","return","result",";","}"],"func_documentation_string":"Splits a string in several parts (tokens) that are separated by delimiter.\nDelimiter is <b>always<\/b> surrounded by two strings! If there is no\ncontent between two delimiters, empty string will be returned for that\ntoken. Therefore, the length of the returned array will always be:\n#delimiters + 1.\n<p>\nMethod is much, much faster then regexp <code>String.split()<\/code>,\nand a bit faster then <code>StringTokenizer<\/code>.\n\n@param src       string to split\n@param delimiter split delimiter\n\n@return array of split strings","func_documentation_tokens":["Splits","a","string","in","several","parts","(","tokens",")","that","are","separated","by","delimiter",".","Delimiter","is","<b",">","always<","\/","b",">","surrounded","by","two","strings!","If","there","is","no","content","between","two","delimiters","empty","string","will","be","returned","for","that","token",".","Therefore","the","length","of","the","returned","array","will","always","be",":","#delimiters","+","1",".","<p",">","Method","is","much","much","faster","then","regexp","<code",">","String",".","split","()","<","\/","code",">","and","a","bit","faster","then","<code",">","StringTokenizer<","\/","code",">","."],"label":1,"text":"Splits a string in several parts (tokens) that are separated by delimiter.\nDelimiter is <b>always<\/b> surrounded by two strings! If there is no\ncontent between two delimiters, empty string will be returned for that\ntoken. Therefore, the length of the returned array will always be:\n#delimiters + 1.\n<p>\nMethod is much, much faster then regexp <code>String.split()<\/code>,\nand a bit faster then <code>StringTokenizer<\/code>.\n\n@param src       string to split\n@param delimiter split delimiter\n\n@return array of split strings[SEP]public static String[] split(final String src, final String delimiter) {\n\t\tint maxparts = (src.length() \/ delimiter.length()) + 2;\t\t\/\/ one more for the last\n\t\tint[] positions = new int[maxparts];\n\t\tint dellen = delimiter.length();\n\n\t\tint i, j = 0;\n\t\tint count = 0;\n\t\tpositions[0] = - dellen;\n\t\twhile ((i = src.indexOf(delimiter, j)) != -1) {\n\t\t\tcount++;\n\t\t\tpositions[count] = i;\n\t\t\tj = i + dellen;\n\t\t}\n\t\tcount++;\n\t\tpositions[count] = src.length();\n\n\t\tString[] result = new String[count];\n\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tresult[i] = src.substring(positions[i] + dellen, positions[i + 1]);\n\t\t}\n\t\treturn result;\n\t}"}
{"func_code_string":"public static String reverse(final String s) {\n\t\tStringBuilder result = new StringBuilder(s.length());\n\t\tfor (int i = s.length() -1; i >= 0; i--) {\n\t\t\tresult.append(s.charAt(i));\n\t\t}\n\t\treturn result.toString();\n\t}","func_code_tokens":["public","static","String","reverse","(","final","String","s",")","{","StringBuilder","result","=","new","StringBuilder","(","s",".","length","(",")",")",";","for","(","int","i","=","s",".","length","(",")","-","1",";","i",">=","0",";","i","--",")","{","result",".","append","(","s",".","charAt","(","i",")",")",";","}","return","result",".","toString","(",")",";","}"],"func_documentation_string":"Reverse a string.","func_documentation_tokens":["Reverse","a","string","."],"label":1,"text":"Reverse a string.[SEP]public static String reverse(final String s) {\n\t\tStringBuilder result = new StringBuilder(s.length());\n\t\tfor (int i = s.length() -1; i >= 0; i--) {\n\t\t\tresult.append(s.charAt(i));\n\t\t}\n\t\treturn result.toString();\n\t}"}
{"func_code_string":"public void save() {\n    if (catListBox != null) catListBox.save();\n\n    if (prefs != null) {\n      if (fileChooser != null)\n        fileChooser.save();\n      if (catgenFileChooser != null)\n        catgenFileChooser.save();\n      prefs.putInt(HDIVIDER, split.getDividerLocation());\n    }\n  }","func_code_tokens":["public","void","save","(",")","{","if","(","catListBox","!=","null",")","catListBox",".","save","(",")",";","if","(","prefs","!=","null",")","{","if","(","fileChooser","!=","null",")","fileChooser",".","save","(",")",";","if","(","catgenFileChooser","!=","null",")","catgenFileChooser",".","save","(",")",";","prefs",".","putInt","(","HDIVIDER",",","split",".","getDividerLocation","(",")",")",";","}","}"],"func_documentation_string":"Save persistent state.","func_documentation_tokens":["Save","persistent","state","."],"label":0,"text":"Save persistent state.[SEP]public void save() {\n    if (catListBox != null) catListBox.save();\n\n    if (prefs != null) {\n      if (fileChooser != null)\n        fileChooser.save();\n      if (catgenFileChooser != null)\n        catgenFileChooser.save();\n      prefs.putInt(HDIVIDER, split.getDividerLocation());\n    }\n  }"}
{"func_code_string":"static void readWmoXmlTableB(InputStream ios, TableB b) throws IOException {\r\n    org.jdom2.Document doc;\r\n    try {\r\n      SAXBuilder builder = new SAXBuilder();\r\n      doc = builder.build(ios);\r\n    } catch (JDOMException e) {\r\n      throw new IOException(e.getMessage());\r\n    }\r\n\r\n    Element root = doc.getRootElement();\r\n\r\n    String[] elems = null;\r\n    for (Version v : Version.values()) {\r\n      elems = v.getElemNamesB();\r\n      List<Element> featList = root.getChildren(elems[0]);\r\n      if (featList != null && featList.size() > 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    \/\/ if not found using element name, assume its BUFR_WMO\r\n    if (elems == null) {\r\n      elems = Version.BUFR_WMO.getElemNamesB();\r\n    }\r\n\r\n    List<Element> featList = root.getChildren();\r\n    for (Element elem : featList) {\r\n      Element ce = elem.getChild(elems[1]);\r\n      if (ce == null) continue;\r\n\r\n      String name = Util.cleanName(elem.getChildTextNormalize(elems[1]));\r\n      String units = cleanUnit(elem.getChildTextNormalize(\"BUFR_Unit\"));\r\n      int x = 0, y = 0, scale = 0, reference = 0, width = 0;\r\n\r\n      String fxy = null;\r\n      String s = null;\r\n      try {\r\n        fxy = elem.getChildTextNormalize(\"FXY\");\r\n        int xy = Integer.parseInt(cleanNumber(fxy));\r\n        x = xy \/ 1000;\r\n        y = xy % 1000;\r\n\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' fails parsing %n\", fxy, name);\r\n      }\r\n\r\n      try {\r\n        s = elem.getChildTextNormalize(\"BUFR_Scale\");\r\n        scale = Integer.parseInt(cleanNumber(s));\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' has bad scale='%s'%n\", fxy, name, s);\r\n      }\r\n\r\n      try {\r\n        s = elem.getChildTextNormalize(\"BUFR_ReferenceValue\");\r\n        reference = Integer.parseInt(cleanNumber(s));\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' has bad reference='%s' %n\", fxy, name, s);\r\n      }\r\n\r\n      try {\r\n        s = elem.getChildTextNormalize(\"BUFR_DataWidth_Bits\");\r\n        width = Integer.parseInt(cleanNumber(s));\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' has bad width='%s' %n\", fxy, name, s);\r\n      }\r\n\r\n      b.addDescriptor((short) x, (short) y, scale, reference, width, name, units, null);\r\n    }\r\n    ios.close();\r\n  }","func_code_tokens":["static","void","readWmoXmlTableB","(","InputStream","ios",",","TableB","b",")","throws","IOException","{","org",".","jdom2",".","Document","doc",";","try","{","SAXBuilder","builder","=","new","SAXBuilder","(",")",";","doc","=","builder",".","build","(","ios",")",";","}","catch","(","JDOMException","e",")","{","throw","new","IOException","(","e",".","getMessage","(",")",")",";","}","Element","root","=","doc",".","getRootElement","(",")",";","String","[","]","elems","=","null",";","for","(","Version","v",":","Version",".","values","(",")",")","{","elems","=","v",".","getElemNamesB","(",")",";","List","<","Element",">","featList","=","root",".","getChildren","(","elems","[","0","]",")",";","if","(","featList","!=","null","&&","featList",".","size","(",")",">","0",")","{","break",";","}","}","\/\/ if not found using element name, assume its BUFR_WMO\r","if","(","elems","==","null",")","{","elems","=","Version",".","BUFR_WMO",".","getElemNamesB","(",")",";","}","List","<","Element",">","featList","=","root",".","getChildren","(",")",";","for","(","Element","elem",":","featList",")","{","Element","ce","=","elem",".","getChild","(","elems","[","1","]",")",";","if","(","ce","==","null",")","continue",";","String","name","=","Util",".","cleanName","(","elem",".","getChildTextNormalize","(","elems","[","1","]",")",")",";","String","units","=","cleanUnit","(","elem",".","getChildTextNormalize","(","\"BUFR_Unit\"",")",")",";","int","x","=","0",",","y","=","0",",","scale","=","0",",","reference","=","0",",","width","=","0",";","String","fxy","=","null",";","String","s","=","null",";","try","{","fxy","=","elem",".","getChildTextNormalize","(","\"FXY\"",")",";","int","xy","=","Integer",".","parseInt","(","cleanNumber","(","fxy",")",")",";","x","=","xy","\/","1000",";","y","=","xy","%","1000",";","}","catch","(","NumberFormatException","e",")","{","System",".","out",".","printf","(","\" key %s name '%s' fails parsing %n\"",",","fxy",",","name",")",";","}","try","{","s","=","elem",".","getChildTextNormalize","(","\"BUFR_Scale\"",")",";","scale","=","Integer",".","parseInt","(","cleanNumber","(","s",")",")",";","}","catch","(","NumberFormatException","e",")","{","System",".","out",".","printf","(","\" key %s name '%s' has bad scale='%s'%n\"",",","fxy",",","name",",","s",")",";","}","try","{","s","=","elem",".","getChildTextNormalize","(","\"BUFR_ReferenceValue\"",")",";","reference","=","Integer",".","parseInt","(","cleanNumber","(","s",")",")",";","}","catch","(","NumberFormatException","e",")","{","System",".","out",".","printf","(","\" key %s name '%s' has bad reference='%s' %n\"",",","fxy",",","name",",","s",")",";","}","try","{","s","=","elem",".","getChildTextNormalize","(","\"BUFR_DataWidth_Bits\"",")",";","width","=","Integer",".","parseInt","(","cleanNumber","(","s",")",")",";","}","catch","(","NumberFormatException","e",")","{","System",".","out",".","printf","(","\" key %s name '%s' has bad width='%s' %n\"",",","fxy",",","name",",","s",")",";","}","b",".","addDescriptor","(","(","short",")","x",",","(","short",")","y",",","scale",",","reference",",","width",",","name",",","units",",","null",")",";","}","ios",".","close","(",")",";","}"],"func_documentation_string":"\/*\n14.1\n<BC_TableB_BUFR14_1_0_CREX_6_1_0>\n<SNo>1<\/SNo>\n<Class>00<\/Class>\n<FXY>000001<\/FXY>\n<ElementName_E>Table A: entry<\/ElementName_E>\n<ElementName_F>Table A : entr?e<\/ElementName_F>\n<ElementName_R>??????? ?: ???????<\/ElementName_R>\n<ElementName_S>Tabla A: elemento<\/ElementName_S>\n<BUFR_Unit>CCITT IA5<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>24<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth>3<\/CREX_DataWidth>\n<Status>Operational<\/Status>\n<NotesToTable_E>Notes: (see)#BUFR14_1_0_CREX6_1_0_Notes.doc#BC_Cl000<\/NotesToTable_E>\n<\/BC_TableB_BUFR14_1_0_CREX_6_1_0>\n\n14.2\n<Exporting_BCTableB_E>\n<No>2<\/No>\n<ClassNo>00<\/ClassNo>\n<ClassName>BUFR\/CREX table entries<\/ClassName>\n<FXY>000002<\/FXY>\n<ElementName>Table A: data category description, line 1 <\/ElementName>\n<BUFR_Unit>CCITT IA5 <\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>256<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth>32<\/CREX_DataWidth>\n<Status>Operational<\/Status>\n<\/Exporting_BCTableB_E>\n\n15.1\n<Exp_JointTableB_E>\n<No>1<\/No>\n<ClassNo>00<\/ClassNo>\n<ClassName_E>BUFR\/CREX table entries<\/ClassName_E>\n<FXY>000001<\/FXY>\n<ElementName_E>Table A: entry<\/ElementName_E>\n<BUFR_Unit>CCITT IA5<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>24<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth_Char>3<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/Exp_JointTableB_E>\n\n16.0\n<Exp_BUFRCREXTableB_E>\n<No>681<\/No>\n<ClassNo>13<\/ClassNo>\n<ClassName_E>Hydrographic and hydrological elements<\/ClassName_E>\n<FXY>013060<\/FXY>\n<ElementName_E>Total accumulated precipitation<\/ElementName_E>\n<BUFR_Unit>kg m-2<\/BUFR_Unit>\n<BUFR_Scale>1<\/BUFR_Scale>\n<BUFR_ReferenceValue>-1<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>17<\/BUFR_DataWidth_Bits>\n<CREX_Unit>kg m-2<\/CREX_Unit>\n<CREX_Scale>1<\/CREX_Scale>\n<CREX_DataWidth_Char>5<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/Exp_BUFRCREXTableB_E>\n\n<BUFRCREX_17_0_0_TableB_en>\n<No>8<\/No>\n<ClassNo>00<\/ClassNo>\n<ClassName_en>BUFR\/CREX table entries<\/ClassName_en>\n<FXY>000008<\/FXY>\n<ElementName_en>BUFR Local table version number<\/ElementName_en>\n<Note_en>(see Note 4)<\/Note_en>\n<BUFR_Unit>CCITT IA5<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>16<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth_Char>2<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/BUFRCREX_17_0_0_TableB_en>\n\n<BUFRCREX_22_0_1_TableB_en>\n<No>1018<\/No>\n<ClassNo>21<\/ClassNo>\n<ClassName_en>BUFR\/CREX Radar data<\/ClassName_en>\n<FXY>021073<\/FXY>\n<ElementName_en>Satellite altimeter instrument mode<\/ElementName_en>\n<BUFR_Unit>Flag table<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>9<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Flag table<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth_Char>3<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/BUFRCREX_22_0_1_TableB_en>","func_documentation_tokens":["\/","*","14",".","1","<BC_TableB_BUFR14_1_0_CREX_6_1_0",">","<SNo",">","1<","\/","SNo",">","<Class",">","00<","\/","Class",">","<FXY",">","000001<","\/","FXY",">","<ElementName_E",">","Table","A",":","entry<","\/","ElementName_E",">","<ElementName_F",">","Table","A",":","entr?e<","\/","ElementName_F",">","<ElementName_R",">","???????","?",":","???????<","\/","ElementName_R",">","<ElementName_S",">","Tabla","A",":","elemento<","\/","ElementName_S",">","<BUFR_Unit",">","CCITT","IA5<","\/","BUFR_Unit",">","<BUFR_Scale",">","0<","\/","BUFR_Scale",">","<BUFR_ReferenceValue",">","0<","\/","BUFR_ReferenceValue",">","<BUFR_DataWidth_Bits",">","24<","\/","BUFR_DataWidth_Bits",">","<CREX_Unit",">","Character<","\/","CREX_Unit",">","<CREX_Scale",">","0<","\/","CREX_Scale",">","<CREX_DataWidth",">","3<","\/","CREX_DataWidth",">","<Status",">","Operational<","\/","Status",">","<NotesToTable_E",">","Notes",":","(","see",")","#BUFR14_1_0_CREX6_1_0_Notes",".","doc#BC_Cl000<","\/","NotesToTable_E",">","<","\/","BC_TableB_BUFR14_1_0_CREX_6_1_0",">"],"label":1,"text":"\/*\n14.1\n<BC_TableB_BUFR14_1_0_CREX_6_1_0>\n<SNo>1<\/SNo>\n<Class>00<\/Class>\n<FXY>000001<\/FXY>\n<ElementName_E>Table A: entry<\/ElementName_E>\n<ElementName_F>Table A : entr?e<\/ElementName_F>\n<ElementName_R>??????? ?: ???????<\/ElementName_R>\n<ElementName_S>Tabla A: elemento<\/ElementName_S>\n<BUFR_Unit>CCITT IA5<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>24<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth>3<\/CREX_DataWidth>\n<Status>Operational<\/Status>\n<NotesToTable_E>Notes: (see)#BUFR14_1_0_CREX6_1_0_Notes.doc#BC_Cl000<\/NotesToTable_E>\n<\/BC_TableB_BUFR14_1_0_CREX_6_1_0>\n\n14.2\n<Exporting_BCTableB_E>\n<No>2<\/No>\n<ClassNo>00<\/ClassNo>\n<ClassName>BUFR\/CREX table entries<\/ClassName>\n<FXY>000002<\/FXY>\n<ElementName>Table A: data category description, line 1 <\/ElementName>\n<BUFR_Unit>CCITT IA5 <\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>256<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth>32<\/CREX_DataWidth>\n<Status>Operational<\/Status>\n<\/Exporting_BCTableB_E>\n\n15.1\n<Exp_JointTableB_E>\n<No>1<\/No>\n<ClassNo>00<\/ClassNo>\n<ClassName_E>BUFR\/CREX table entries<\/ClassName_E>\n<FXY>000001<\/FXY>\n<ElementName_E>Table A: entry<\/ElementName_E>\n<BUFR_Unit>CCITT IA5<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>24<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth_Char>3<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/Exp_JointTableB_E>\n\n16.0\n<Exp_BUFRCREXTableB_E>\n<No>681<\/No>\n<ClassNo>13<\/ClassNo>\n<ClassName_E>Hydrographic and hydrological elements<\/ClassName_E>\n<FXY>013060<\/FXY>\n<ElementName_E>Total accumulated precipitation<\/ElementName_E>\n<BUFR_Unit>kg m-2<\/BUFR_Unit>\n<BUFR_Scale>1<\/BUFR_Scale>\n<BUFR_ReferenceValue>-1<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>17<\/BUFR_DataWidth_Bits>\n<CREX_Unit>kg m-2<\/CREX_Unit>\n<CREX_Scale>1<\/CREX_Scale>\n<CREX_DataWidth_Char>5<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/Exp_BUFRCREXTableB_E>\n\n<BUFRCREX_17_0_0_TableB_en>\n<No>8<\/No>\n<ClassNo>00<\/ClassNo>\n<ClassName_en>BUFR\/CREX table entries<\/ClassName_en>\n<FXY>000008<\/FXY>\n<ElementName_en>BUFR Local table version number<\/ElementName_en>\n<Note_en>(see Note 4)<\/Note_en>\n<BUFR_Unit>CCITT IA5<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>16<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Character<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth_Char>2<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/BUFRCREX_17_0_0_TableB_en>\n\n<BUFRCREX_22_0_1_TableB_en>\n<No>1018<\/No>\n<ClassNo>21<\/ClassNo>\n<ClassName_en>BUFR\/CREX Radar data<\/ClassName_en>\n<FXY>021073<\/FXY>\n<ElementName_en>Satellite altimeter instrument mode<\/ElementName_en>\n<BUFR_Unit>Flag table<\/BUFR_Unit>\n<BUFR_Scale>0<\/BUFR_Scale>\n<BUFR_ReferenceValue>0<\/BUFR_ReferenceValue>\n<BUFR_DataWidth_Bits>9<\/BUFR_DataWidth_Bits>\n<CREX_Unit>Flag table<\/CREX_Unit>\n<CREX_Scale>0<\/CREX_Scale>\n<CREX_DataWidth_Char>3<\/CREX_DataWidth_Char>\n<Status>Operational<\/Status>\n<\/BUFRCREX_22_0_1_TableB_en>[SEP]static void readWmoXmlTableB(InputStream ios, TableB b) throws IOException {\r\n    org.jdom2.Document doc;\r\n    try {\r\n      SAXBuilder builder = new SAXBuilder();\r\n      doc = builder.build(ios);\r\n    } catch (JDOMException e) {\r\n      throw new IOException(e.getMessage());\r\n    }\r\n\r\n    Element root = doc.getRootElement();\r\n\r\n    String[] elems = null;\r\n    for (Version v : Version.values()) {\r\n      elems = v.getElemNamesB();\r\n      List<Element> featList = root.getChildren(elems[0]);\r\n      if (featList != null && featList.size() > 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    \/\/ if not found using element name, assume its BUFR_WMO\r\n    if (elems == null) {\r\n      elems = Version.BUFR_WMO.getElemNamesB();\r\n    }\r\n\r\n    List<Element> featList = root.getChildren();\r\n    for (Element elem : featList) {\r\n      Element ce = elem.getChild(elems[1]);\r\n      if (ce == null) continue;\r\n\r\n      String name = Util.cleanName(elem.getChildTextNormalize(elems[1]));\r\n      String units = cleanUnit(elem.getChildTextNormalize(\"BUFR_Unit\"));\r\n      int x = 0, y = 0, scale = 0, reference = 0, width = 0;\r\n\r\n      String fxy = null;\r\n      String s = null;\r\n      try {\r\n        fxy = elem.getChildTextNormalize(\"FXY\");\r\n        int xy = Integer.parseInt(cleanNumber(fxy));\r\n        x = xy \/ 1000;\r\n        y = xy % 1000;\r\n\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' fails parsing %n\", fxy, name);\r\n      }\r\n\r\n      try {\r\n        s = elem.getChildTextNormalize(\"BUFR_Scale\");\r\n        scale = Integer.parseInt(cleanNumber(s));\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' has bad scale='%s'%n\", fxy, name, s);\r\n      }\r\n\r\n      try {\r\n        s = elem.getChildTextNormalize(\"BUFR_ReferenceValue\");\r\n        reference = Integer.parseInt(cleanNumber(s));\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' has bad reference='%s' %n\", fxy, name, s);\r\n      }\r\n\r\n      try {\r\n        s = elem.getChildTextNormalize(\"BUFR_DataWidth_Bits\");\r\n        width = Integer.parseInt(cleanNumber(s));\r\n      } catch (NumberFormatException e) {\r\n        System.out.printf(\" key %s name '%s' has bad width='%s' %n\", fxy, name, s);\r\n      }\r\n\r\n      b.addDescriptor((short) x, (short) y, scale, reference, width, name, units, null);\r\n    }\r\n    ios.close();\r\n  }"}
{"func_code_string":"public FilterReply getFilterChainDecision(E event) {\n    final Filter<E>[] filterArrray = filterList.asTypedArray();\n    final int len = filterArrray.length;\n\n    for (int i = 0; i < len; i++) {\n      final FilterReply r = filterArrray[i].decide(event);\n      if (r == FilterReply.DENY || r == FilterReply.ACCEPT) {\n        return r;\n      }\n    }\n\n    \/\/ no decision\n    return FilterReply.NEUTRAL;\n  }","func_code_tokens":["public","FilterReply","getFilterChainDecision","(","E","event",")","{","final","Filter","<","E",">","[","]","filterArrray","=","filterList",".","asTypedArray","(",")",";","final","int","len","=","filterArrray",".","length",";","for","(","int","i","=","0",";","i","<","len",";","i","++",")","{","final","FilterReply","r","=","filterArrray","[","i","]",".","decide","(","event",")",";","if","(","r","==","FilterReply",".","DENY","||","r","==","FilterReply",".","ACCEPT",")","{","return","r",";","}","}","\/\/ no decision","return","FilterReply",".","NEUTRAL",";","}"],"func_documentation_string":"Loop through the filters in the list. As soon as a filter decides on\nACCEPT or DENY, then that value is returned. If all of the filters return\nNEUTRAL, then NEUTRAL is returned.","func_documentation_tokens":["Loop","through","the","filters","in","the","list",".","As","soon","as","a","filter","decides","on","ACCEPT","or","DENY","then","that","value","is","returned",".","If","all","of","the","filters","return","NEUTRAL","then","NEUTRAL","is","returned","."],"label":0,"text":"Loop through the filters in the list. As soon as a filter decides on\nACCEPT or DENY, then that value is returned. If all of the filters return\nNEUTRAL, then NEUTRAL is returned.[SEP]public FilterReply getFilterChainDecision(E event) {\n    final Filter<E>[] filterArrray = filterList.asTypedArray();\n    final int len = filterArrray.length;\n\n    for (int i = 0; i < len; i++) {\n      final FilterReply r = filterArrray[i].decide(event);\n      if (r == FilterReply.DENY || r == FilterReply.ACCEPT) {\n        return r;\n      }\n    }\n\n    \/\/ no decision\n    return FilterReply.NEUTRAL;\n  }"}
{"func_code_string":"private File extractFile(String fileName, JarFile containingJar, File dstDir)\n\t\t\tthrows DeploymentException {\n\n\t\tZipEntry zipFileEntry = containingJar.getEntry(fileName);\n\t\tlogger.trace(\"Extracting file \" + fileName + \" from \"\n\t\t\t\t+ containingJar.getName());\n\t\tif (zipFileEntry == null) {\n\t\t\tthrow new DeploymentException(\"Error extracting jar file  \"\n\t\t\t\t\t+ fileName + \" from \" + containingJar.getName());\n\t\t}\n\t\tFile extractedFile = new File(dstDir, new File(zipFileEntry.getName())\n\t\t\t\t.getName());\n\t\ttry {\n\t\t\tpipeStream(containingJar.getInputStream(zipFileEntry),\n\t\t\t\t\tnew FileOutputStream(extractedFile));\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new DeploymentException(\"file \" + fileName + \" not found in \"\n\t\t\t\t\t+ containingJar.getName(), e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new DeploymentException(\"erro extracting file \" + fileName\n\t\t\t\t\t+ \" from \" + containingJar.getName(), e);\n\t\t}\n\t\tlogger.debug(\"Extracted file \" + extractedFile.getName());\n\t\treturn extractedFile;\n\t}","func_code_tokens":["private","File","extractFile","(","String","fileName",",","JarFile","containingJar",",","File","dstDir",")","throws","DeploymentException","{","ZipEntry","zipFileEntry","=","containingJar",".","getEntry","(","fileName",")",";","logger",".","trace","(","\"Extracting file \"","+","fileName","+","\" from \"","+","containingJar",".","getName","(",")",")",";","if","(","zipFileEntry","==","null",")","{","throw","new","DeploymentException","(","\"Error extracting jar file  \"","+","fileName","+","\" from \"","+","containingJar",".","getName","(",")",")",";","}","File","extractedFile","=","new","File","(","dstDir",",","new","File","(","zipFileEntry",".","getName","(",")",")",".","getName","(",")",")",";","try","{","pipeStream","(","containingJar",".","getInputStream","(","zipFileEntry",")",",","new","FileOutputStream","(","extractedFile",")",")",";","}","catch","(","FileNotFoundException","e",")","{","throw","new","DeploymentException","(","\"file \"","+","fileName","+","\" not found in \"","+","containingJar",".","getName","(",")",",","e",")",";","}","catch","(","IOException","e",")","{","throw","new","DeploymentException","(","\"erro extracting file \"","+","fileName","+","\" from \"","+","containingJar",".","getName","(",")",",","e",")",";","}","logger",".","debug","(","\"Extracted file \"","+","extractedFile",".","getName","(",")",")",";","return","extractedFile",";","}"],"func_documentation_string":"Extracts the file with name <code>fileName<\/code> out of the\n<code>containingJar<\/code> archive and stores it in <code>dstDir<\/code>.\n\n@param fileName\nthe name of the file to extract.\n@param containingJar\nthe archive where to extract it from.\n@param dstDir\nthe location where the extracted file should be stored.\n@return a <code>java.io.File<\/code> reference to the extracted file.\n@throws DeploymentException","func_documentation_tokens":["Extracts","the","file","with","name","<code",">","fileName<","\/","code",">","out","of","the","<code",">","containingJar<","\/","code",">","archive","and","stores","it","in","<code",">","dstDir<","\/","code",">","."],"label":0,"text":"Extracts the file with name <code>fileName<\/code> out of the\n<code>containingJar<\/code> archive and stores it in <code>dstDir<\/code>.\n\n@param fileName\nthe name of the file to extract.\n@param containingJar\nthe archive where to extract it from.\n@param dstDir\nthe location where the extracted file should be stored.\n@return a <code>java.io.File<\/code> reference to the extracted file.\n@throws DeploymentException[SEP]private File extractFile(String fileName, JarFile containingJar, File dstDir)\n\t\t\tthrows DeploymentException {\n\n\t\tZipEntry zipFileEntry = containingJar.getEntry(fileName);\n\t\tlogger.trace(\"Extracting file \" + fileName + \" from \"\n\t\t\t\t+ containingJar.getName());\n\t\tif (zipFileEntry == null) {\n\t\t\tthrow new DeploymentException(\"Error extracting jar file  \"\n\t\t\t\t\t+ fileName + \" from \" + containingJar.getName());\n\t\t}\n\t\tFile extractedFile = new File(dstDir, new File(zipFileEntry.getName())\n\t\t\t\t.getName());\n\t\ttry {\n\t\t\tpipeStream(containingJar.getInputStream(zipFileEntry),\n\t\t\t\t\tnew FileOutputStream(extractedFile));\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new DeploymentException(\"file \" + fileName + \" not found in \"\n\t\t\t\t\t+ containingJar.getName(), e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new DeploymentException(\"erro extracting file \" + fileName\n\t\t\t\t\t+ \" from \" + containingJar.getName(), e);\n\t\t}\n\t\tlogger.debug(\"Extracted file \" + extractedFile.getName());\n\t\treturn extractedFile;\n\t}"}
{"func_code_string":"public static void sort(List list, Sort... sorts) {\n        Sort.sorts(sorts).sort(list);\n    }","func_code_tokens":["public","static","void","sort","(","List","list",",","Sort","...","sorts",")","{","Sort",".","sorts","(","sorts",")",".","sort","(","list",")",";","}"],"func_documentation_string":"Takes a list an an array or sorts\n\n@param list list to sorts\n@param sorts what you want to sore the list by","func_documentation_tokens":["Takes","a","list","an","an","array","or","sorts"],"label":1,"text":"Takes a list an an array or sorts\n\n@param list list to sorts\n@param sorts what you want to sore the list by[SEP]public static void sort(List list, Sort... sorts) {\n        Sort.sorts(sorts).sort(list);\n    }"}
{"func_code_string":"public static String format(Date date, String format)\n\t{\n\t\tParameters.checkNotNull(date);\n\t\treturn new SimpleDateFormat(format).format(date);\n\t}","func_code_tokens":["public","static","String","format","(","Date","date",",","String","format",")","{","Parameters",".","checkNotNull","(","date",")",";","return","new","SimpleDateFormat","(","format",")",".","format","(","date",")",";","}"],"func_documentation_string":"Returns the {@code String} representation of the given {@code Date}\naccording to the specified format pattern.\n\n@param date the {@code Date} to format.\n@param format the format pattern to use.\n\n@return the {@code String} representation of {@code date}.\n\n@throws NullPointerException if one of the arguments is {@code null}.","func_documentation_tokens":["Returns","the","{","@code","String","}","representation","of","the","given","{","@code","Date","}","according","to","the","specified","format","pattern","."],"label":1,"text":"Returns the {@code String} representation of the given {@code Date}\naccording to the specified format pattern.\n\n@param date the {@code Date} to format.\n@param format the format pattern to use.\n\n@return the {@code String} representation of {@code date}.\n\n@throws NullPointerException if one of the arguments is {@code null}.[SEP]public static String format(Date date, String format)\n\t{\n\t\tParameters.checkNotNull(date);\n\t\treturn new SimpleDateFormat(format).format(date);\n\t}"}
{"func_code_string":"@SuppressWarnings(\"Duplicates\")\n    public static void main(String[] args) {\n        \/\/ init logging\n        PropertyConfigurator.configure(\n                Is24CsvWritingExample.class.getResource(PACKAGE + \"\/log4j.properties\"));\n\n        \/\/ create some CSV records\n        List<Is24CsvRecord> records = new ArrayList<>();\n        records.add(createHausKaufRecord());\n        records.add(createHausKaufRecord());\n        records.add(createWohnungMieteRecord());\n        records.add(createWohnungMieteRecord());\n\n        \/\/ write CSV records into a java.io.File\n        try {\n            write(records, File.createTempFile(\"output-\", \".csv\"));\n        } catch (IOException ex) {\n            LOGGER.error(\"Can't create temporary file!\");\n            LOGGER.error(\"> \" + ex.getLocalizedMessage(), ex);\n            System.exit(1);\n        }\n\n        \/\/ write CSV records into a java.io.OutputStream\n        write(records, new NullOutputStream());\n\n        \/\/ write CSV records into a java.io.Writer\n        write(records, new NullWriter());\n\n        \/\/ write CSV records into a string and send it to the console\n        writeToConsole(records);\n    }","func_code_tokens":["@","SuppressWarnings","(","\"Duplicates\"",")","public","static","void","main","(","String","[","]","args",")","{","\/\/ init logging","PropertyConfigurator",".","configure","(","Is24CsvWritingExample",".","class",".","getResource","(","PACKAGE","+","\"\/log4j.properties\"",")",")",";","\/\/ create some CSV records","List","<","Is24CsvRecord",">","records","=","new","ArrayList","<>","(",")",";","records",".","add","(","createHausKaufRecord","(",")",")",";","records",".","add","(","createHausKaufRecord","(",")",")",";","records",".","add","(","createWohnungMieteRecord","(",")",")",";","records",".","add","(","createWohnungMieteRecord","(",")",")",";","\/\/ write CSV records into a java.io.File","try","{","write","(","records",",","File",".","createTempFile","(","\"output-\"",",","\".csv\"",")",")",";","}","catch","(","IOException","ex",")","{","LOGGER",".","error","(","\"Can't create temporary file!\"",")",";","LOGGER",".","error","(","\"> \"","+","ex",".","getLocalizedMessage","(",")",",","ex",")",";","System",".","exit","(","1",")",";","}","\/\/ write CSV records into a java.io.OutputStream","write","(","records",",","new","NullOutputStream","(",")",")",";","\/\/ write CSV records into a java.io.Writer","write","(","records",",","new","NullWriter","(",")",")",";","\/\/ write CSV records into a string and send it to the console","writeToConsole","(","records",")",";","}"],"func_documentation_string":"Start the example application.\n\n@param args command line arguments","func_documentation_tokens":["Start","the","example","application","."],"label":1,"text":"Start the example application.\n\n@param args command line arguments[SEP]@SuppressWarnings(\"Duplicates\")\n    public static void main(String[] args) {\n        \/\/ init logging\n        PropertyConfigurator.configure(\n                Is24CsvWritingExample.class.getResource(PACKAGE + \"\/log4j.properties\"));\n\n        \/\/ create some CSV records\n        List<Is24CsvRecord> records = new ArrayList<>();\n        records.add(createHausKaufRecord());\n        records.add(createHausKaufRecord());\n        records.add(createWohnungMieteRecord());\n        records.add(createWohnungMieteRecord());\n\n        \/\/ write CSV records into a java.io.File\n        try {\n            write(records, File.createTempFile(\"output-\", \".csv\"));\n        } catch (IOException ex) {\n            LOGGER.error(\"Can't create temporary file!\");\n            LOGGER.error(\"> \" + ex.getLocalizedMessage(), ex);\n            System.exit(1);\n        }\n\n        \/\/ write CSV records into a java.io.OutputStream\n        write(records, new NullOutputStream());\n\n        \/\/ write CSV records into a java.io.Writer\n        write(records, new NullWriter());\n\n        \/\/ write CSV records into a string and send it to the console\n        writeToConsole(records);\n    }"}
{"func_code_string":"@SuppressWarnings(\"Duplicates\")\n    public static void main(String[] args) {\n        \/\/ init logging\n        PropertyConfigurator.configure(\n                IdxWritingExample.class.getResource(PACKAGE + \"\/log4j.properties\"));\n\n        \/\/ create some CSV records\n        List<IdxRecord> records = new ArrayList<>();\n        records.add(createRecord());\n        records.add(createRecord());\n        records.add(createRecord());\n        records.add(createRecord());\n\n        \/\/ write CSV records into a java.io.File\n        try {\n            write(records, File.createTempFile(\"output-\", \".csv\"));\n        } catch (IOException ex) {\n            LOGGER.error(\"Can't create temporary file!\");\n            LOGGER.error(\"> \" + ex.getLocalizedMessage(), ex);\n            System.exit(1);\n        }\n\n        \/\/ write CSV records into a java.io.OutputStream\n        write(records, new NullOutputStream());\n\n        \/\/ write CSV records into a java.io.Writer\n        write(records, new NullWriter());\n\n        \/\/ write CSV records into a string and send it to the console\n        writeToConsole(records);\n    }","func_code_tokens":["@","SuppressWarnings","(","\"Duplicates\"",")","public","static","void","main","(","String","[","]","args",")","{","\/\/ init logging","PropertyConfigurator",".","configure","(","IdxWritingExample",".","class",".","getResource","(","PACKAGE","+","\"\/log4j.properties\"",")",")",";","\/\/ create some CSV records","List","<","IdxRecord",">","records","=","new","ArrayList","<>","(",")",";","records",".","add","(","createRecord","(",")",")",";","records",".","add","(","createRecord","(",")",")",";","records",".","add","(","createRecord","(",")",")",";","records",".","add","(","createRecord","(",")",")",";","\/\/ write CSV records into a java.io.File","try","{","write","(","records",",","File",".","createTempFile","(","\"output-\"",",","\".csv\"",")",")",";","}","catch","(","IOException","ex",")","{","LOGGER",".","error","(","\"Can't create temporary file!\"",")",";","LOGGER",".","error","(","\"> \"","+","ex",".","getLocalizedMessage","(",")",",","ex",")",";","System",".","exit","(","1",")",";","}","\/\/ write CSV records into a java.io.OutputStream","write","(","records",",","new","NullOutputStream","(",")",")",";","\/\/ write CSV records into a java.io.Writer","write","(","records",",","new","NullWriter","(",")",")",";","\/\/ write CSV records into a string and send it to the console","writeToConsole","(","records",")",";","}"],"func_documentation_string":"Start the example application.\n\n@param args command line arguments","func_documentation_tokens":["Start","the","example","application","."],"label":1,"text":"Start the example application.\n\n@param args command line arguments[SEP]@SuppressWarnings(\"Duplicates\")\n    public static void main(String[] args) {\n        \/\/ init logging\n        PropertyConfigurator.configure(\n                IdxWritingExample.class.getResource(PACKAGE + \"\/log4j.properties\"));\n\n        \/\/ create some CSV records\n        List<IdxRecord> records = new ArrayList<>();\n        records.add(createRecord());\n        records.add(createRecord());\n        records.add(createRecord());\n        records.add(createRecord());\n\n        \/\/ write CSV records into a java.io.File\n        try {\n            write(records, File.createTempFile(\"output-\", \".csv\"));\n        } catch (IOException ex) {\n            LOGGER.error(\"Can't create temporary file!\");\n            LOGGER.error(\"> \" + ex.getLocalizedMessage(), ex);\n            System.exit(1);\n        }\n\n        \/\/ write CSV records into a java.io.OutputStream\n        write(records, new NullOutputStream());\n\n        \/\/ write CSV records into a java.io.Writer\n        write(records, new NullWriter());\n\n        \/\/ write CSV records into a string and send it to the console\n        writeToConsole(records);\n    }"}
{"func_code_string":"public static <A> A[] arrayFilter(A[] arr, Predicate<A> accept) {\n\t\tif (arr == null || arr.length == 0)\n\t\t\treturn arr;\n\t\tA[] accepted = newArray(arr, arr.length);\n\t\tint j = 0;\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t\tif (accept.test(arr[i]))\n\t\t\t\taccepted[j++] = arr[i];\n\t\treturn j == arr.length ? arr : copyOf(accepted, j);\n\t}","func_code_tokens":["public","static","<","A",">","A","[","]","arrayFilter","(","A","[","]","arr",",","Predicate","<","A",">","accept",")","{","if","(","arr","==","null","||","arr",".","length","==","0",")","return","arr",";","A","[","]","accepted","=","newArray","(","arr",",","arr",".","length",")",";","int","j","=","0",";","for","(","int","i","=","0",";","i","<","arr",".","length",";","i","++",")","if","(","accept",".","test","(","arr","[","i","]",")",")","accepted","[","j","++","]","=","arr","[","i","]",";","return","j","==","arr",".","length","?","arr",":","copyOf","(","accepted",",","j",")",";","}"],"func_documentation_string":"\/* Arrays","func_documentation_tokens":["\/","*","Arrays"],"label":1,"text":"\/* Arrays[SEP]public static <A> A[] arrayFilter(A[] arr, Predicate<A> accept) {\n\t\tif (arr == null || arr.length == 0)\n\t\t\treturn arr;\n\t\tA[] accepted = newArray(arr, arr.length);\n\t\tint j = 0;\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t\tif (accept.test(arr[i]))\n\t\t\t\taccepted[j++] = arr[i];\n\t\treturn j == arr.length ? arr : copyOf(accepted, j);\n\t}"}
{"func_code_string":"public Matrix multiply (final float k)\n  {\n    final float pv[][] = new float [m_nRows] [m_nCols]; \/\/ product values\n\n    \/\/ Compute values of the product.\n    for (int r = 0; r < m_nRows; ++r)\n    {\n      for (int c = 0; c < m_nCols; ++c)\n      {\n        pv[r][c] = k * m_aValues[r][c];\n      }\n    }\n\n    return new Matrix (pv);\n  }","func_code_tokens":["public","Matrix","multiply","(","final","float","k",")","{","final","float","pv","[","]","[","]","=","new","float","[","m_nRows","]","[","m_nCols","]",";","\/\/ product values","\/\/ Compute values of the product.","for","(","int","r","=","0",";","r","<","m_nRows",";","++","r",")","{","for","(","int","c","=","0",";","c","<","m_nCols",";","++","c",")","{","pv","[","r","]","[","c","]","=","k","*","m_aValues","[","r","]","[","c","]",";","}","}","return","new","Matrix","(","pv",")",";","}"],"func_documentation_string":"Multiply this matrix by a constant.\n\n@param k\nthe constant\n@return the product matrix","func_documentation_tokens":["Multiply","this","matrix","by","a","constant","."],"label":1,"text":"Multiply this matrix by a constant.\n\n@param k\nthe constant\n@return the product matrix[SEP]public Matrix multiply (final float k)\n  {\n    final float pv[][] = new float [m_nRows] [m_nCols]; \/\/ product values\n\n    \/\/ Compute values of the product.\n    for (int r = 0; r < m_nRows; ++r)\n    {\n      for (int c = 0; c < m_nCols; ++c)\n      {\n        pv[r][c] = k * m_aValues[r][c];\n      }\n    }\n\n    return new Matrix (pv);\n  }"}
{"func_code_string":"private synchronized void readProperties() {\n    try {\n      propertyFileURI = CatalogManager.class.getResource(\"\/\"+propertyFile);\n      InputStream in =\n\tCatalogManager.class.getResourceAsStream(\"\/\"+propertyFile);\n      if (in==null) {\n\tif (!ignoreMissingProperties) {\n\t  System.err.println(\"Cannot find \"+propertyFile);\n\t  \/\/ there's no reason to give this warning more than once\n\t  ignoreMissingProperties = true;\n\t}\n\treturn;\n      }\n      resources = new PropertyResourceBundle(in);\n    } catch (MissingResourceException mre) {\n      if (!ignoreMissingProperties) {\n\tSystem.err.println(\"Cannot read \"+propertyFile);\n      }\n    } catch (java.io.IOException e) {\n      if (!ignoreMissingProperties) {\n\tSystem.err.println(\"Failure trying to read \"+propertyFile);\n      }\n    }\n\n    \/\/ This is a bit of a hack. After we've successfully read the properties,\n    \/\/ use them to set the default debug level, if the user hasn't already set\n    \/\/ the default debug level.\n    if (verbosity == null) {\n      try {\n\tString verbStr = resources.getString(\"verbosity\");\n\tint verb = Integer.parseInt(verbStr.trim());\n\tdebug.setDebug(verb);\n\tverbosity = new Integer(verb);\n      } catch (Exception e) {\n\t\/\/ nop\n      }\n    }\n  }","func_code_tokens":["private","synchronized","void","readProperties","(",")","{","try","{","propertyFileURI","=","CatalogManager",".","class",".","getResource","(","\"\/\"","+","propertyFile",")",";","InputStream","in","=","CatalogManager",".","class",".","getResourceAsStream","(","\"\/\"","+","propertyFile",")",";","if","(","in","==","null",")","{","if","(","!","ignoreMissingProperties",")","{","System",".","err",".","println","(","\"Cannot find \"","+","propertyFile",")",";","\/\/ there's no reason to give this warning more than once","ignoreMissingProperties","=","true",";","}","return",";","}","resources","=","new","PropertyResourceBundle","(","in",")",";","}","catch","(","MissingResourceException","mre",")","{","if","(","!","ignoreMissingProperties",")","{","System",".","err",".","println","(","\"Cannot read \"","+","propertyFile",")",";","}","}","catch","(","java",".","io",".","IOException","e",")","{","if","(","!","ignoreMissingProperties",")","{","System",".","err",".","println","(","\"Failure trying to read \"","+","propertyFile",")",";","}","}","\/\/ This is a bit of a hack. After we've successfully read the properties,","\/\/ use them to set the default debug level, if the user hasn't already set","\/\/ the default debug level.","if","(","verbosity","==","null",")","{","try","{","String","verbStr","=","resources",".","getString","(","\"verbosity\"",")",";","int","verb","=","Integer",".","parseInt","(","verbStr",".","trim","(",")",")",";","debug",".","setDebug","(","verb",")",";","verbosity","=","new","Integer","(","verb",")",";","}","catch","(","Exception","e",")","{","\/\/ nop","}","}","}"],"func_documentation_string":"Load the properties from the propertyFile and build the\nresources from it.","func_documentation_tokens":["Load","the","properties","from","the","propertyFile","and","build","the","resources","from","it","."],"label":1,"text":"Load the properties from the propertyFile and build the\nresources from it.[SEP]private synchronized void readProperties() {\n    try {\n      propertyFileURI = CatalogManager.class.getResource(\"\/\"+propertyFile);\n      InputStream in =\n\tCatalogManager.class.getResourceAsStream(\"\/\"+propertyFile);\n      if (in==null) {\n\tif (!ignoreMissingProperties) {\n\t  System.err.println(\"Cannot find \"+propertyFile);\n\t  \/\/ there's no reason to give this warning more than once\n\t  ignoreMissingProperties = true;\n\t}\n\treturn;\n      }\n      resources = new PropertyResourceBundle(in);\n    } catch (MissingResourceException mre) {\n      if (!ignoreMissingProperties) {\n\tSystem.err.println(\"Cannot read \"+propertyFile);\n      }\n    } catch (java.io.IOException e) {\n      if (!ignoreMissingProperties) {\n\tSystem.err.println(\"Failure trying to read \"+propertyFile);\n      }\n    }\n\n    \/\/ This is a bit of a hack. After we've successfully read the properties,\n    \/\/ use them to set the default debug level, if the user hasn't already set\n    \/\/ the default debug level.\n    if (verbosity == null) {\n      try {\n\tString verbStr = resources.getString(\"verbosity\");\n\tint verb = Integer.parseInt(verbStr.trim());\n\tdebug.setDebug(verb);\n\tverbosity = new Integer(verb);\n      } catch (Exception e) {\n\t\/\/ nop\n      }\n    }\n  }"}
{"func_code_string":"@Implementation\n  protected List<Address> getFromLocation(double latitude, double longitude, int maxResults)\n      throws IOException {\n    Preconditions.checkArgument(\n        -90 <= latitude && latitude <= 90, \"Latitude must be between -90 and 90, got %s\", latitude);\n    Preconditions.checkArgument(\n        -180 <= longitude && longitude <= 180,\n        \"Longitude must be between -180 and 180, got %s\",\n        longitude);\n    return fromLocation.subList(0, Math.min(maxResults, fromLocation.size()));\n  }","func_code_tokens":["@","Implementation","protected","List","<","Address",">","getFromLocation","(","double","latitude",",","double","longitude",",","int","maxResults",")","throws","IOException","{","Preconditions",".","checkArgument","(","-","90","<=","latitude","&&","latitude","<=","90",",","\"Latitude must be between -90 and 90, got %s\"",",","latitude",")",";","Preconditions",".","checkArgument","(","-","180","<=","longitude","&&","longitude","<=","180",",","\"Longitude must be between -180 and 180, got %s\"",",","longitude",")",";","return","fromLocation",".","subList","(","0",",","Math",".","min","(","maxResults",",","fromLocation",".","size","(",")",")",")",";","}"],"func_documentation_string":"Returns an empty list by default, or the last value set by {@link #setFromLocation(List)}\n\n`latitude` and `longitude` are ignored by this implementation, except to check that they are in\nappropriate bounds. `maxResults` determines the\nmaximum number of addresses to return.","func_documentation_tokens":["Returns","an","empty","list","by","default","or","the","last","value","set","by","{","@link","#setFromLocation","(","List",")","}"],"label":0,"text":"Returns an empty list by default, or the last value set by {@link #setFromLocation(List)}\n\n`latitude` and `longitude` are ignored by this implementation, except to check that they are in\nappropriate bounds. `maxResults` determines the\nmaximum number of addresses to return.[SEP]@Implementation\n  protected List<Address> getFromLocation(double latitude, double longitude, int maxResults)\n      throws IOException {\n    Preconditions.checkArgument(\n        -90 <= latitude && latitude <= 90, \"Latitude must be between -90 and 90, got %s\", latitude);\n    Preconditions.checkArgument(\n        -180 <= longitude && longitude <= 180,\n        \"Longitude must be between -180 and 180, got %s\",\n        longitude);\n    return fromLocation.subList(0, Math.min(maxResults, fromLocation.size()));\n  }"}
{"func_code_string":"private void init(final int var) {\n        \/\/ creates and\/or resizes the initializations array if necessary\n        if (initializations == null) {\n            initializations = new int[2];\n        }\n        int n = initializations.length;\n        if (initializationCount >= n) {\n            int[] t = new int[Math.max(initializationCount + 1, 2 * n)];\n            System.arraycopy(initializations, 0, t, 0, n);\n            initializations = t;\n        }\n        \/\/ stores the type to be initialized\n        initializations[initializationCount++] = var;\n    }","func_code_tokens":["private","void","init","(","final","int","var",")","{","\/\/ creates and\/or resizes the initializations array if necessary","if","(","initializations","==","null",")","{","initializations","=","new","int","[","2","]",";","}","int","n","=","initializations",".","length",";","if","(","initializationCount",">=","n",")","{","int","[","]","t","=","new","int","[","Math",".","max","(","initializationCount","+","1",",","2","*","n",")","]",";","System",".","arraycopy","(","initializations",",","0",",","t",",","0",",","n",")",";","initializations","=","t",";","}","\/\/ stores the type to be initialized","initializations","[","initializationCount","++","]","=","var",";","}"],"func_documentation_string":"Adds a new type to the list of types on which a constructor is invoked in\nthe basic block.\n\n@param var\na type on a which a constructor is invoked.","func_documentation_tokens":["Adds","a","new","type","to","the","list","of","types","on","which","a","constructor","is","invoked","in","the","basic","block","."],"label":1,"text":"Adds a new type to the list of types on which a constructor is invoked in\nthe basic block.\n\n@param var\na type on a which a constructor is invoked.[SEP]private void init(final int var) {\n        \/\/ creates and\/or resizes the initializations array if necessary\n        if (initializations == null) {\n            initializations = new int[2];\n        }\n        int n = initializations.length;\n        if (initializationCount >= n) {\n            int[] t = new int[Math.max(initializationCount + 1, 2 * n)];\n            System.arraycopy(initializations, 0, t, 0, n);\n            initializations = t;\n        }\n        \/\/ stores the type to be initialized\n        initializations[initializationCount++] = var;\n    }"}
{"func_code_string":"public static void forHtmlUnquotedAttribute(Writer out, String input)\n        throws IOException\n    {\n        encode(Encoders.HTML_UNQUOTED_ATTRIBUTE_ENCODER, out, input);\n    }","func_code_tokens":["public","static","void","forHtmlUnquotedAttribute","(","Writer","out",",","String","input",")","throws","IOException","{","encode","(","Encoders",".","HTML_UNQUOTED_ATTRIBUTE_ENCODER",",","out",",","input",")",";","}"],"func_documentation_string":"See {@link #forHtmlUnquotedAttribute(String)} for description of encoding.  This\nversion writes directly to a Writer without an intervening string.\n\n@param out where to write encoded output\n@param input the input string to encode\n@throws IOException if thrown by writer","func_documentation_tokens":["See","{","@link","#forHtmlUnquotedAttribute","(","String",")","}","for","description","of","encoding",".","This","version","writes","directly","to","a","Writer","without","an","intervening","string","."],"label":1,"text":"See {@link #forHtmlUnquotedAttribute(String)} for description of encoding.  This\nversion writes directly to a Writer without an intervening string.\n\n@param out where to write encoded output\n@param input the input string to encode\n@throws IOException if thrown by writer[SEP]public static void forHtmlUnquotedAttribute(Writer out, String input)\n        throws IOException\n    {\n        encode(Encoders.HTML_UNQUOTED_ATTRIBUTE_ENCODER, out, input);\n    }"}
{"func_code_string":"private void inspectBinaryFile(byte[] bytes) {\n\t\tfor (int i = 0; i < bytes.length; i += width) {\n\t\t\tout.print(String.format(\"0x%04X \", i));\n\t\t\t\/\/ Print out databytes\n\t\t\tfor (int j = 0; j < width; ++j) {\n\t\t\t\tif(j+i < bytes.length) {\n\t\t\t\t\tout.print(String.format(\"%02X \", bytes[i+j]));\n\t\t\t\t} else {\n\t\t\t\t\tout.print(\"   \");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\/\/\n\t\t\tfor (int j = 0; j < width; ++j) {\n\t\t\t\tif(j+i < bytes.length) {\n\t\t\t\t\tchar c = (char) bytes[i+j];\n\t\t\t\t\tif(c >= 32 && c < 128) {\n\t\t\t\t\t\tout.print(c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.print(\".\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\/\/\n\t\t\tout.println();\n\t\t}\n\t}","func_code_tokens":["private","void","inspectBinaryFile","(","byte","[","]","bytes",")","{","for","(","int","i","=","0",";","i","<","bytes",".","length",";","i","+=","width",")","{","out",".","print","(","String",".","format","(","\"0x%04X \"",",","i",")",")",";","\/\/ Print out databytes","for","(","int","j","=","0",";","j","<","width",";","++","j",")","{","if","(","j","+","i","<","bytes",".","length",")","{","out",".","print","(","String",".","format","(","\"%02X \"",",","bytes","[","i","+","j","]",")",")",";","}","else","{","out",".","print","(","\"   \"",")",";","}","}","\/\/","for","(","int","j","=","0",";","j","<","width",";","++","j",")","{","if","(","j","+","i","<","bytes",".","length",")","{","char","c","=","(","char",")","bytes","[","i","+","j","]",";","if","(","c",">=","32","&&","c","<","128",")","{","out",".","print","(","c",")",";","}","else","{","out",".","print","(","\".\"",")",";","}","}","}","\/\/","out",".","println","(",")",";","}","}"],"func_documentation_string":"Inspect a given binary file. That is a file for which we don't have a better\ninspector.\n\n@param bytes","func_documentation_tokens":["Inspect","a","given","binary","file",".","That","is","a","file","for","which","we","don","t","have","a","better","inspector","."],"label":0,"text":"Inspect a given binary file. That is a file for which we don't have a better\ninspector.\n\n@param bytes[SEP]private void inspectBinaryFile(byte[] bytes) {\n\t\tfor (int i = 0; i < bytes.length; i += width) {\n\t\t\tout.print(String.format(\"0x%04X \", i));\n\t\t\t\/\/ Print out databytes\n\t\t\tfor (int j = 0; j < width; ++j) {\n\t\t\t\tif(j+i < bytes.length) {\n\t\t\t\t\tout.print(String.format(\"%02X \", bytes[i+j]));\n\t\t\t\t} else {\n\t\t\t\t\tout.print(\"   \");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\/\/\n\t\t\tfor (int j = 0; j < width; ++j) {\n\t\t\t\tif(j+i < bytes.length) {\n\t\t\t\t\tchar c = (char) bytes[i+j];\n\t\t\t\t\tif(c >= 32 && c < 128) {\n\t\t\t\t\t\tout.print(c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.print(\".\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\/\/\n\t\t\tout.println();\n\t\t}\n\t}"}
{"func_code_string":"public List<IHidden> getHidden()\n    {\n        for (final IHidden hidden : this.hidden) {\n            hidden.setAdded(false);\n        }\n        return this.hidden;\n    }","func_code_tokens":["public","List","<","IHidden",">","getHidden","(",")","{","for","(","final","IHidden","hidden",":","this",".","hidden",")","{","hidden",".","setAdded","(","false",")",";","}","return","this",".","hidden",";","}"],"func_documentation_string":"Getter method for instance variable {@link #hidden}.\n\n@return value of instance variable {@link #hidden}","func_documentation_tokens":["Getter","method","for","instance","variable","{","@link","#hidden","}","."],"label":0,"text":"Getter method for instance variable {@link #hidden}.\n\n@return value of instance variable {@link #hidden}[SEP]public List<IHidden> getHidden()\n    {\n        for (final IHidden hidden : this.hidden) {\n            hidden.setAdded(false);\n        }\n        return this.hidden;\n    }"}
{"func_code_string":"public static boolean convertToBoolean(Object o)\n  {\n    if(o == null)\n      return false;\n\n    if(o instanceof Boolean)\n    {\n      return (Boolean) o;\n    }\n\n    return convertToBoolean(o.toString());\n  }","func_code_tokens":["public","static","boolean","convertToBoolean","(","Object","o",")","{","if","(","o","==","null",")","return","false",";","if","(","o","instanceof","Boolean",")","{","return","(","Boolean",")","o",";","}","return","convertToBoolean","(","o",".","toString","(",")",")",";","}"],"func_documentation_string":"Converts the object into a boolean value.\n\n@param o the object to convert\n@return a <code>boolean<\/code>","func_documentation_tokens":["Converts","the","object","into","a","boolean","value","."],"label":1,"text":"Converts the object into a boolean value.\n\n@param o the object to convert\n@return a <code>boolean<\/code>[SEP]public static boolean convertToBoolean(Object o)\n  {\n    if(o == null)\n      return false;\n\n    if(o instanceof Boolean)\n    {\n      return (Boolean) o;\n    }\n\n    return convertToBoolean(o.toString());\n  }"}
{"func_code_string":"public Path withFile(final String file) {\n\t\tfinal Path result = new Path(this);\n\t\tresult.setFile(file);\n\t\treturn result;\n\t}","func_code_tokens":["public","Path","withFile","(","final","String","file",")","{","final","Path","result","=","new","Path","(","this",")",";","result",".","setFile","(","file",")",";","return","result",";","}"],"func_documentation_string":"Create a new path with a given file.\n\n@param file the file for the path\n@return the new path","func_documentation_tokens":["Create","a","new","path","with","a","given","file","."],"label":0,"text":"Create a new path with a given file.\n\n@param file the file for the path\n@return the new path[SEP]public Path withFile(final String file) {\n\t\tfinal Path result = new Path(this);\n\t\tresult.setFile(file);\n\t\treturn result;\n\t}"}
{"func_code_string":"public int randomChooseFromDistribution(double... probs) {\n\t\tint result = -1;\n\t\tint[] range = new int[probs.length];\n\t\tdouble accuracy = 1000;\n\t\tint total = 0;\n\n\t\tfor (int i = 0; i < probs.length; i++) {\n\t\t\trange[i] = (int) (probs[i] * accuracy);\n\t\t\ttotal += range[i];\n\t\t}\n\n\t\tint randNum = (int) (rng.nextDouble() * total);\n\t\tfor (int i = 0; i < range.length; i++) {\n\t\t\trandNum -= range[i];\n\t\t\tif (randNum <= 0) {\n\t\t\t\tresult = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","func_code_tokens":["public","int","randomChooseFromDistribution","(","double","...","probs",")","{","int","result","=","-","1",";","int","[","]","range","=","new","int","[","probs",".","length","]",";","double","accuracy","=","1000",";","int","total","=","0",";","for","(","int","i","=","0",";","i","<","probs",".","length",";","i","++",")","{","range","[","i","]","=","(","int",")","(","probs","[","i","]","*","accuracy",")",";","total","+=","range","[","i","]",";","}","int","randNum","=","(","int",")","(","rng",".","nextDouble","(",")","*","total",")",";","for","(","int","i","=","0",";","i","<","range",".","length",";","i","++",")","{","randNum","-=","range","[","i","]",";","if","(","randNum","<=","0",")","{","result","=","i",";","break",";","}","}","return","result",";","}"],"func_documentation_string":"Return the result of a random choose from a given distribution.\n\n@param probs\n@return","func_documentation_tokens":["Return","the","result","of","a","random","choose","from","a","given","distribution","."],"label":1,"text":"Return the result of a random choose from a given distribution.\n\n@param probs\n@return[SEP]public int randomChooseFromDistribution(double... probs) {\n\t\tint result = -1;\n\t\tint[] range = new int[probs.length];\n\t\tdouble accuracy = 1000;\n\t\tint total = 0;\n\n\t\tfor (int i = 0; i < probs.length; i++) {\n\t\t\trange[i] = (int) (probs[i] * accuracy);\n\t\t\ttotal += range[i];\n\t\t}\n\n\t\tint randNum = (int) (rng.nextDouble() * total);\n\t\tfor (int i = 0; i < range.length; i++) {\n\t\t\trandNum -= range[i];\n\t\t\tif (randNum <= 0) {\n\t\t\t\tresult = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}"}
{"func_code_string":"@SuppressWarnings({\"MethodWithMultipleReturnPoints\", \"LabeledStatement\", \"ValueOfIncrementOrDecrementUsed\", \"ContinueStatement\", \"ContinueStatementWithLabel\"})\n    public static int indexOf(char[] src, char[] find, int startAt) {\n        int startPos = startAt;\n        final int max = src.length - find.length;\n        if (startPos > max) {\n            return -1;\n        }\n        final char find0 = find[0];\n        final int len = find.length;\n        int j;\n        int k;\n\n        \/\/ Find the first character\n        startOver:\n        while (startPos <= max) {\n            if (src[startPos++] == find0) {\n                \/\/ First character found - look for the rest\n                j = startPos;\n                k = 1;\n                while (k < len) {\n                    if (src[j++] != find[k++]) {\n                        continue startOver;\n                    }\n                }\n                return startPos - 1;\n            }\n        }\n        return -1;\n    }","func_code_tokens":["@","SuppressWarnings","(","{","\"MethodWithMultipleReturnPoints\"",",","\"LabeledStatement\"",",","\"ValueOfIncrementOrDecrementUsed\"",",","\"ContinueStatement\"",",","\"ContinueStatementWithLabel\"","}",")","public","static","int","indexOf","(","char","[","]","src",",","char","[","]","find",",","int","startAt",")","{","int","startPos","=","startAt",";","final","int","max","=","src",".","length","-","find",".","length",";","if","(","startPos",">","max",")","{","return","-","1",";","}","final","char","find0","=","find","[","0","]",";","final","int","len","=","find",".","length",";","int","j",";","int","k",";","\/\/ Find the first character","startOver",":","while","(","startPos","<=","max",")","{","if","(","src","[","startPos","++","]","==","find0",")","{","\/\/ First character found - look for the rest","j","=","startPos",";","k","=","1",";","while","(","k","<","len",")","{","if","(","src","[","j","++","]","!=","find","[","k","++","]",")","{","continue","startOver",";","}","}","return","startPos","-","1",";","}","}","return","-","1",";","}"],"func_documentation_string":"Same as String.indexOf but (slightly) faster ;)\n\nHint: Performance optimized code - so some warnings are suppressed.","func_documentation_tokens":["Same","as","String",".","indexOf","but","(","slightly",")","faster",";",")"],"label":1,"text":"Same as String.indexOf but (slightly) faster ;)\n\nHint: Performance optimized code - so some warnings are suppressed.[SEP]@SuppressWarnings({\"MethodWithMultipleReturnPoints\", \"LabeledStatement\", \"ValueOfIncrementOrDecrementUsed\", \"ContinueStatement\", \"ContinueStatementWithLabel\"})\n    public static int indexOf(char[] src, char[] find, int startAt) {\n        int startPos = startAt;\n        final int max = src.length - find.length;\n        if (startPos > max) {\n            return -1;\n        }\n        final char find0 = find[0];\n        final int len = find.length;\n        int j;\n        int k;\n\n        \/\/ Find the first character\n        startOver:\n        while (startPos <= max) {\n            if (src[startPos++] == find0) {\n                \/\/ First character found - look for the rest\n                j = startPos;\n                k = 1;\n                while (k < len) {\n                    if (src[j++] != find[k++]) {\n                        continue startOver;\n                    }\n                }\n                return startPos - 1;\n            }\n        }\n        return -1;\n    }"}
{"func_code_string":"protected String readFile(File file, List<String> lines) {\n    int\t\ti;\n\n    try {\n      lines.addAll(Files.readAllLines(file.toPath()));\n      i = 0;\n      while (i < lines.size()) {\n        if (lines.get(i).trim().isEmpty()) {\n          lines.remove(i);\n          continue;\n\t}\n\tif (lines.get(i).startsWith(\"#\")) {\n          lines.remove(i);\n          continue;\n\t}\n\ti++;\n      }\n    }\n    catch (Exception e) {\n      return \"Failed to read file: \" + file + \"\\n\" + e;\n    }\n\n    return null;\n  }","func_code_tokens":["protected","String","readFile","(","File","file",",","List","<","String",">","lines",")","{","int","i",";","try","{","lines",".","addAll","(","Files",".","readAllLines","(","file",".","toPath","(",")",")",")",";","i","=","0",";","while","(","i","<","lines",".","size","(",")",")","{","if","(","lines",".","get","(","i",")",".","trim","(",")",".","isEmpty","(",")",")","{","lines",".","remove","(","i",")",";","continue",";","}","if","(","lines",".","get","(","i",")",".","startsWith","(","\"#\"",")",")","{","lines",".","remove","(","i",")",";","continue",";","}","i","++",";","}","}","catch","(","Exception","e",")","{","return","\"Failed to read file: \"","+","file","+","\"\\n\"","+","e",";","}","return","null",";","}"],"func_documentation_string":"Reads the file into the the provided list.\nSkips empty lines and lines starting with #.\n\n@param file\tthe file to read\n@param lines \tthe lines to add the content to\n@return \t\tnull if successful, otherwise error message","func_documentation_tokens":["Reads","the","file","into","the","the","provided","list",".","Skips","empty","lines","and","lines","starting","with","#","."],"label":1,"text":"Reads the file into the the provided list.\nSkips empty lines and lines starting with #.\n\n@param file\tthe file to read\n@param lines \tthe lines to add the content to\n@return \t\tnull if successful, otherwise error message[SEP]protected String readFile(File file, List<String> lines) {\n    int\t\ti;\n\n    try {\n      lines.addAll(Files.readAllLines(file.toPath()));\n      i = 0;\n      while (i < lines.size()) {\n        if (lines.get(i).trim().isEmpty()) {\n          lines.remove(i);\n          continue;\n\t}\n\tif (lines.get(i).startsWith(\"#\")) {\n          lines.remove(i);\n          continue;\n\t}\n\ti++;\n      }\n    }\n    catch (Exception e) {\n      return \"Failed to read file: \" + file + \"\\n\" + e;\n    }\n\n    return null;\n  }"}
