package src;

import java.util.List;

public abstract class Plant extends Actor{
    // the stats of the plant
    private final Stats stats;

    // growth of the plant - a plant grows each turn, it has a maxGrowth
    private int growth;

    // sun reserves of the plant
    private int sunQuantity;

    // water reserves of the plant
    private int waterQuantity;

    // max quantity of water and sun a plant can keep in reserves
    private final int MAX_QUANTITY=15;

    // the number of times this plant sprouted
    private int sprouted;

    /**
     * Constructor - set the stats, the location, and the field of the plant. Set if the plant should be assigned a random size. Initialize various fields
     * @param randomSize - boolean true if random size assigned
     * @param field - the field of the plant
     * @param location - the location of the plant
     * @param plantStats - the stats of the plant
     */
    public Plant(boolean randomSize,Field field,Location location, Stats plantStats){
        super(field,location);
        waterQuantity = 1;
        sunQuantity = 2;
        stats = plantStats;
        if(randomSize) {
            growth = rand.nextInt(stats.getStat(StatTypes.MAX_AGE)-30)+30;
        }
        else growth = 0;
        sprouted = 0;
    }

    /**
     * Override of the act method in Actor. Start the plant actions -> check if the plant dies, grow, pollinate, sprout
     * @param newActors - List of new plants (generated by the sprout of this plant)
     */
    @Override
    public void act(List<Actor> newActors){
        if(waterQuantity>0 && sunQuantity>0) {
            grow();
            if (pollinate() && growth > stats.getStat(StatTypes.BREEDING_AGE) && sprouted < stats.getStat(StatTypes.MAX_LITTER_SIZE)) {
                sprout(newActors);
                sprouted++;
            }
            waterQuantity+=getLocation().getWeather().getWater();
            sunQuantity+=getLocation().getWeather().getSun();
            if(waterQuantity>MAX_QUANTITY)
                waterQuantity=MAX_QUANTITY;
            if(sunQuantity>MAX_QUANTITY)
                sunQuantity=MAX_QUANTITY;
            waterQuantity-=1;
            sunQuantity-=1;
        }
        else
            setDead();
    }

    /**
     * Make the plant grow -> increment the grow field if the maxGrowth hasn't been reached
     */
    private void grow(){
        if(stats.getStat(StatTypes.MAX_AGE)>growth)
            growth+=3;
    }

    /**
     * Try to pollinate the plant -> the plant get pollinated by itself or by other adjacent plant
     * @return true if the plant was pollinated
     */
    private boolean pollinate(){
        if(rand.nextInt(100)<stats.getStat(StatTypes.BREEDING_PROBABILITY))
            return true;
        for(Location loc: super.getField().adjacentLocations(super.getLocation())){
            for(Actor act : getField().getActorsAt(loc))
                if(act.getClass().equals(this.getClass()))
                    if(rand.nextInt(100)<stats.getStat(StatTypes.BREEDING_PROBABILITY))
                        return true;
        }
        return false;
    }

    /**
     * Get the growth of this plant (size of the plant)
     * @return plant growth
     */
    public int getGrowth(){
        return growth;
    }

    /**
     * An animal eats this plant by an amount -> reduce the growth of this plant (the plant may die). Return the nutritional value multiplied by how much the animal ate out of this plant.
     * @param amount -> the amount an animal eats out of this plant
     * @return total nutritional value
     */
    public int isEaten(int amount){
        growth -= amount;
        if(growth<=0){
            return (growth+amount)*stats.getStat(StatTypes.NUTRITIONAL_VALUE);
        }
        return amount*stats.getStat(StatTypes.NUTRITIONAL_VALUE);
    }

    /**
     * This plant sprouts -> creating children of this plant
     * @param newActors - list of children of the plant
     */
    private void sprout(List<Actor> newActors){
        List<Location> aux = super.getField().getFreeAdjacentLocations(super.getLocation());
        if(aux.size() > 0)
            newActors.add(newPlant(aux.get(rand.nextInt(aux.size()))));
    }

    protected abstract Plant newPlant(Location loc);
}
